[
["prepare-data-for-meta-analysis.html", "6 Prepare data for meta-analysis 6.1 Set environment and import data 6.2 Subset to Trials containing DMI fungicides 6.3 Standardising sample variance 6.4 Classifying fungicide treatment 6.5 Trial factor 6.6 Test dose effect 6.7 Row spacing", " 6 Prepare data for meta-analysis 6.1 Set environment and import data load(&quot;cache/PreliminaryData.Rdata&quot;) source(here(&quot;R/same.R&quot;)) # matches each element of a vector and does not return NAs 6.2 Subset to Trials containing DMI fungicides DMI_Trials &lt;- PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;)%&gt;% distinct(trial_ref) %&gt;% pull() PM_MB_dat &lt;- PM_MB_dat[PM_MB_dat$trial_ref %in% DMI_Trials,] Now remove any non-DMI treatments or controls PM_MB_dat &lt;- PM_MB_dat %&gt;% filter(fungicide_ai == &quot;control&quot; | fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) 6.3 Standardising sample variance Meta-analyses use variance from the data to calculate the effect sizes. The type of variance needs to be the same across all the data incorporated in the meta-analysis. We are narrowing the meta-analysis to only include treatments using demethylation inhibitors, tebuconazole and propiconazole. Let’s look at what type of statistical error was reported for the trials that used these fungicides. PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(trial_ref, location, year , Y_error_type) %&gt;% summarise(DMI_treatments = length(Y_error_type), .groups = &#39;drop&#39;) %&gt;% arrange(Y_error_type) %&gt;% kable(caption = &quot;Number of treatments for each trial and the error type reported&quot;, align = &quot;c&quot;) %&gt;% footnote(general = &quot;DMI - demethylation inhibitors (tebuconazole and propiconazole).&quot;) (#tab:variance_types)Number of treatments for each trial and the error type reported trial_ref location year Y_error_type DMI_treatments mung1112/02 Kingaroy 2012 lsd (P=0.05) 6 AM1303 Premer 2013 stdev 3 AM1304 Marys Mount 2013 stdev 3 AM1305 Goolhi 2013 stdev 3 BB1305 Millmerran 2013 stdev 3 mung1011/01 Hermitage 2011 stdev 2 mung1011/02 Kingaroy 2011 stdev 6 mung1415/01 Hermitage 2015 stdev 5 mung1516/01 Hermitage 2016 stdev 6 mung1516/02 Kingaroy 2016 stdev 6 mung1617/01 Hermitage 2017 stdev 30 mung1617/02 Missen Flats 2017 stdev 30 mung1718/01 Wellcamp 2018 stdev 12 mung1819/01 Hermitage 2019 stdev 3 mung1819/02 Hermitage 2019 stdev 3 Note: DMI - demethylation inhibitors (tebuconazole and propiconazole). The experiment summaries report either standard deviation, least square differences. First we will convert LSD and standard deviation to sample variance. 6.3.1 Converting least-squares to sample variance First let’s get a list the of trials that reported LSD. Trials &lt;- PM_MB_dat %&gt;% filter(Y_error_type == &quot;lsd (P=0.05)&quot;) %&gt;% select(trial_ref) %&gt;% distinct() Trials ## trial_ref ## 1 mung1112/02 Let’s use this list of trials to subset the data and calculate sampling variances. We will follow the method of converting ‘least square differences’ (LSD) to sampling variance reported by Nugugi et.al (2011). Tcrit &lt;- 2.042 for (i in Trials$trial_ref) { DFw &lt;- sum(PM_MB_dat[PM_MB_dat$trial_ref == i, ]$replicates) - length(PM_MB_dat[PM_MB_dat$trial_ref == i, ]$replicates) # degrees of freedom within groups LSD &lt;- PM_MB_dat[PM_MB_dat$trial_ref == i, ]$yield_error[1] V_yield &lt;- (PM_MB_dat[PM_MB_dat$trial_ref == i, ]$replicates[1] * (LSD / Tcrit) ^ 2) / 2 # method - Nugugi et.al (2011) DOI: 10.1094/phyto-08-10-0221 for (j in seq_along(PM_MB_dat[PM_MB_dat$trial_ref == i,]$replicates)) { if (j == 1) { Sv &lt;- vector(length = length(PM_MB_dat[PM_MB_dat$trial_ref == i,]$replicates)) } # reset Sv vector if this is the first loop Sv[j] = V_yield / PM_MB_dat[PM_MB_dat$trial_ref == i,]$replicates[j] } # Replace the values in the dataset PM_MB_dat[PM_MB_dat$trial_ref == i,]$yield_error &lt;- Sv PM_MB_dat[PM_MB_dat$trial_ref == i,]$Y_error_type &lt;- &quot;SamplingVariance&quot; } 6.3.2 Converting standard deviation to sample variance Now to estimate the variance from the standard deviation. # subset data by those which describe the Yield error with standard deviation Trials &lt;- PM_MB_dat %&gt;% filter(Y_error_type == &quot;stdev&quot;) %&gt;% select(trial_ref) %&gt;% pull() PM_MB_dat[PM_MB_dat$trial_ref %in% Trials,&quot;yield_error&quot;] &lt;- PM_MB_dat[PM_MB_dat$trial_ref %in% Trials,&quot;yield_error&quot;]^2 PM_MB_dat[PM_MB_dat$trial_ref %in% Trials,]$Y_error_type &lt;- &quot;SamplingVariance&quot; 6.3.3 Check variance of data-set Our data currently uses sample variance to define the yield error. We should expect that when yield increases so does the variance. Let’s quickly plot this to check. PM_MB_dat %&gt;% ggplot(aes(x = grain_yield.t.ha., y = yield_error)) + geom_point() No association between yield and sample variance, this might be due to the unpredictable nature of mungbeans. Lets look at the association between mean squares and yield to see if there is a more typical association between yield and variance. PM_MB_dat %&gt;% ggplot(aes(x = grain_yield.t.ha., y = Y_Msquare/replicates)) + geom_point() ## Warning: Removed 7 rows containing missing values (geom_point). PM_MB_dat[is.na(PM_MB_dat$Y_Msquare),] ## trial_ref year location host_genotype row_spacing replicates ## 147 mung1112/02 2012 Kingaroy Crystal 0.75 3 ## 148 mung1112/02 2012 Kingaroy Crystal 0.75 3 ## 149 mung1112/02 2012 Kingaroy Crystal 0.75 3 ## 150 mung1112/02 2012 Kingaroy Crystal 0.75 3 ## 151 mung1112/02 2012 Kingaroy Crystal 0.75 3 ## 152 mung1112/02 2012 Kingaroy Crystal 0.75 3 ## 153 mung1112/02 2012 Kingaroy Crystal 0.75 3 ## planting_date flowering_date pod_fill_date mid_late_pod_fill ## 147 2012-02-03 2012-03-12 &lt;NA&gt; &lt;NA&gt; ## 148 2012-02-03 2012-03-12 &lt;NA&gt; &lt;NA&gt; ## 149 2012-02-03 2012-03-12 &lt;NA&gt; &lt;NA&gt; ## 150 2012-02-03 2012-03-12 &lt;NA&gt; &lt;NA&gt; ## 151 2012-02-03 2012-03-12 &lt;NA&gt; &lt;NA&gt; ## 152 2012-02-03 2012-03-12 &lt;NA&gt; &lt;NA&gt; ## 153 2012-02-03 2012-03-12 &lt;NA&gt; &lt;NA&gt; ## first_sign_disease fungicide_ai dose_ai.ha fungicide_application_1 ## 147 2012-03-12 control 0.00 &lt;NA&gt; ## 148 2012-03-12 tebuconazole 62.35 2012-03-13 ## 149 2012-03-12 tebuconazole 62.35 2012-03-13 ## 150 2012-03-12 propiconazole 62.50 2012-03-13 ## 151 2012-03-12 propiconazole 62.50 2012-03-13 ## 152 2012-03-12 propiconazole 125.00 2012-03-13 ## 153 2012-03-12 propiconazole 125.00 2012-03-13 ## fungicide_application_2 fungicide_application_3 fungicide_application_4 ## 147 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 148 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 149 2012-03-30 &lt;NA&gt; &lt;NA&gt; ## 150 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 151 2012-03-30 &lt;NA&gt; &lt;NA&gt; ## 152 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 153 2012-03-30 &lt;NA&gt; &lt;NA&gt; ## fungicide_application_5 fungicide_application_6 fungicide_application_7 ## 147 &lt;NA&gt; &lt;NA&gt; NA ## 148 &lt;NA&gt; &lt;NA&gt; NA ## 149 &lt;NA&gt; &lt;NA&gt; NA ## 150 &lt;NA&gt; &lt;NA&gt; NA ## 151 &lt;NA&gt; &lt;NA&gt; NA ## 152 &lt;NA&gt; &lt;NA&gt; NA ## 153 &lt;NA&gt; &lt;NA&gt; NA ## total_fungicide harvest_date final_assessment PM_final_severity ## 147 0 &lt;NA&gt; 2012-04-30 8.0 ## 148 1 &lt;NA&gt; 2012-04-30 8.0 ## 149 2 &lt;NA&gt; 2012-04-30 4.3 ## 150 1 &lt;NA&gt; 2012-04-30 7.7 ## 151 2 &lt;NA&gt; 2012-04-30 4.7 ## 152 1 &lt;NA&gt; 2012-04-30 7.3 ## 153 2 &lt;NA&gt; 2012-04-30 1.7 ## disease_error D_error_type grain_yield.t.ha. Y_Msquare yield_error ## 147 1.3 lsd (P=0.05) 0.751 NA 0.007256526 ## 148 1.3 lsd (P=0.05) 1.090 NA 0.007256526 ## 149 1.3 lsd (P=0.05) 1.098 NA 0.007256526 ## 150 1.3 lsd (P=0.05) 1.036 NA 0.007256526 ## 151 1.3 lsd (P=0.05) 1.201 NA 0.007256526 ## 152 1.3 lsd (P=0.05) 1.057 NA 0.007256526 ## 153 1.3 lsd (P=0.05) 1.323 NA 0.007256526 ## Y_error_type yield_gain prop_YG AUDPC_m AUDPS_sd ## 147 SamplingVariance NA NA NA NA ## 148 SamplingVariance 0.339 0.4513981 NA NA ## 149 SamplingVariance 0.347 0.4620506 NA NA ## 150 SamplingVariance 0.285 0.3794940 NA NA ## 151 SamplingVariance 0.450 0.5992011 NA NA ## 152 SamplingVariance 0.306 0.4074567 NA NA ## 153 SamplingVariance 0.572 0.7616511 NA NA 6.4 Classifying fungicide treatment First we need to calculate the time between the first sign of disease and the fungicide treatments. PM_MB_dat %&lt;&gt;% mutate(fungicide_timing_1 = fungicide_application_1 - first_sign_disease) %&gt;% mutate(fungicide_timing_2 = fungicide_application_2 - fungicide_application_1) %&gt;% mutate(fungicide_timing_3 = fungicide_application_3 - fungicide_application_2) To ensure sufficient number of replicates, we will bin the continuous variable into three categorical variables relating to when the first fungicide application was made. These categorical variables are named: Early: First fungicide application was prior to first sign of disease. Recommended: First fungicide application was applied on the day powdery mildew was observed, or within three days of first sign. Late: First fungicide application was four or more days after first sign of disease being observed. The number of sprays need also be defined. data.frame(TreatmentName = c(&quot;Early&quot;, &quot;Recommended&quot;, &quot;Late&quot;, &quot;EarlyPlus&quot;, &quot;RecommendedPlus&quot;, &quot;LatePlus&quot;), n_sprays = rep(c(&quot;Single&quot;, &quot;Two - Three&quot;), each = 3), DaysRelativeToFirstSign = c(&quot;Prior to first sign of Powdery Mildew&quot;, &quot;1 - 3 days after first sign of Powdery Mildew&quot;, &quot;7 - 8 days after first sign of Powdery Mildew&quot;))%&gt;% kable() TreatmentName n_sprays DaysRelativeToFirstSign Early Single Prior to first sign of Powdery Mildew Recommended Single 1 - 3 days after first sign of Powdery Mildew Late Single 7 - 8 days after first sign of Powdery Mildew EarlyPlus Two - Three Prior to first sign of Powdery Mildew RecommendedPlus Two - Three 1 - 3 days after first sign of Powdery Mildew LatePlus Two - Three 7 - 8 days after first sign of Powdery Mildew PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate( spray_management = case_when( fungicide_timing_1 &lt; 0 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Early&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Recommended&quot;, fungicide_timing_1 &gt;= 4 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Late&quot;, fungicide_timing_1 &lt; 0 &amp; !is.na(fungicide_application_2) ~ &quot;Early_plus&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 &amp; !is.na(fungicide_application_2) ~ &quot;Recommended_plus&quot;, fungicide_timing_1 &gt;= 4 &amp; !is.na(fungicide_application_2) ~ &quot;Late_plus&quot;, TRUE ~ &quot;Other&quot; ) ) PM_MB_dat[PM_MB_dat$fungicide_ai == &quot;control&quot;, c( &quot;fungicide_timing_1&quot;, &quot;fungicide_timing_2&quot;, &quot;fungicide_timing_3&quot;, &quot;spray_management&quot; )] &lt;- &quot;control&quot; Now to view the number break-down of the spray_management treatments table(PM_MB_dat$spray_management) ## ## control Early Early_plus Late ## 38 13 5 17 ## Late_plus Recommended Recommended_plus ## 19 27 40 There are few ‘Early_plus’ treatments, these treatments therefore will have too few comparisons with other treatments in the meta-analysis to provide accurate results. Therefore we will remove ‘Early_plus’ from the analysis. PM_MB_dat &lt;- PM_MB_dat %&gt;% filter(spray_management != &quot;Early_plus&quot;) 6.5 Trial factor We have a number of variable which could introduce variation in our analysis. We will combine these variables into a single variable called trial which will help us define the between trial variation. PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate(trial = paste(trial_ref, year, location, host_genotype, row_spacing, sep = &quot;_&quot;)) %&gt;% select(trial_ref, trial, everything()) 6.6 Test dose effect Earlier we noted there were different doses of propiconazole, which might influence our analysis. Let’s add the dose variable to the trial variable then compare linear mixed effect models including and excluding dose in the trial variable. We already have a factor breaking down the dose in the trial variable. Let’s make a new one without dose. table(PM_MB_dat$dose_ai.ha) ## ## 0 60 62 62.35 62.5 125 ## 38 6 36 24 12 38 PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate(dose = case_when( dose_ai.ha == 0 ~ &quot;control&quot;, dose_ai.ha &lt;= 70 ~ &quot;lowDose&quot;, dose_ai.ha &gt; 70 ~ &quot;highDose&quot;, TRUE ~ NA_character_ )) PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate(trial_dose = paste(trial_ref, year, location, host_genotype, row_spacing,dose , sep = &quot;_&quot;)) cbind(NoDose = head(PM_MB_dat$trial), Dose = head(PM_MB_dat$trial_dose)) %&gt;% kable() NoDose Dose mung1011/01_2011_Hermitage_Berken_0.75 mung1011/01_2011_Hermitage_Berken_0.75_control mung1011/01_2011_Hermitage_Berken_0.75 mung1011/01_2011_Hermitage_Berken_0.75_lowDose mung1011/01_2011_Hermitage_Crystal_0.75 mung1011/01_2011_Hermitage_Crystal_0.75_control mung1011/01_2011_Hermitage_Crystal_0.75 mung1011/01_2011_Hermitage_Crystal_0.75_lowDose mung1011/02_2011_Kingaroy_Berken_0.75 mung1011/02_2011_Kingaroy_Berken_0.75_control mung1011/02_2011_Kingaroy_Berken_0.75 mung1011/02_2011_Kingaroy_Berken_0.75_lowDose Let’s test the dose effect in a basic linear mixed effect model. m_noDose &lt;- lmer(log(grain_yield.t.ha. * 1000) ~ factor(spray_management) + (1 | trial), data = PM_MB_dat) m_dose &lt;- lmer(log(grain_yield.t.ha. * 1000) ~ factor(spray_management) + (1 | trial_dose), data = PM_MB_dat) anova(m_noDose, m_dose) ## refitting model(s) with ML (instead of REML) ## Data: PM_MB_dat ## Models: ## m_noDose: log(grain_yield.t.ha. * 1000) ~ factor(spray_management) + (1 | ## m_noDose: trial) ## m_dose: log(grain_yield.t.ha. * 1000) ~ factor(spray_management) + (1 | ## m_dose: trial_dose) ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## m_noDose 8 -43.277 -18.982 29.639 -59.277 ## m_dose 8 55.856 80.151 -19.928 39.856 0 0 1 Using the model without dose produces a lower AIC and we find no significant difference between models. We will not use dose as a defining variable in trial. Remove columns which are not needed PM_MB_dat &lt;- PM_MB_dat %&gt;% select(-c(trial_dose,fungicide_timing_1,fungicide_timing_2, fungicide_timing_3, dose, fungicide_application_4, fungicide_application_5, fungicide_application_6, fungicide_application_7)) 6.7 Row spacing We may want to consider row spacing in the trials. However one of the locations has NA as the row spacing. PM_MB_dat%&gt;% filter(is.na(row_spacing))%&gt;% select(trial_ref,year, location, row_spacing,spray_management,host_genotype, fungicide_ai) ## trial_ref year location row_spacing spray_management host_genotype ## 1 AM1303 2013 Premer NA control Crystal ## 2 AM1303 2013 Premer NA Recommended_plus Crystal ## 3 AM1303 2013 Premer NA Recommended Crystal ## 4 AM1303 2013 Premer NA Recommended_plus Crystal ## fungicide_ai ## 1 control ## 2 propiconazole ## 3 propiconazole ## 4 propiconazole For now let’s assign the most used row spacing of 0.33 m as an approximation so the model can analyse this as a continuous variable. If we decide to use the row_spacing column as a factor in the final model we will need to remove this approximation. PM_MB_dat[is.na(PM_MB_dat$row_spacing),&quot;row_spacing&quot;] &lt;- 0.33 save(PM_MB_dat, file = here(&quot;cache/PrepData.Rdata&quot;)) "],
["perhaps-move-below-to-post-analysis-analysis.html", "7 Perhaps move below to post analysis, analysis", " 7 Perhaps move below to post analysis, analysis "]
]
