[
["index.html", "A meta-analysis of powdery mildew yield loss mitigation strategies in Australian mungbean 1 Home 1.1 Contents 1.2 Other research questions, which are not the focus of this study 1.3 Possible sources of variation in this analysis.", " A meta-analysis of powdery mildew yield loss mitigation strategies in Australian mungbean Paul Melloy, Emerson Del Ponte and Adam H. Sparks 20 January, 2021 1 Home This research compendium details the statistical analysis and methods of a meta-analysis of fungicide efficacy trials for controlling powdery mildew in mungbean. The meta-analysis’s main aim is to determine: When is the optimum time to spray fungicide to limit the effect of powdery mildew on mungbean yields? 1.1 Contents This compendium is broken down into seven sections: [Details of the experiments, which were included in the analysis][Studies considered in meta-analysis] [Preliminary data exploration which investigates possible variables that could influence the meta-analysis][Preliminary Analysis] [Fungicides][Fungicides] [Mungbean cultivar][Mungbean cultivars] [Row spacing][Row spacing] [Rainfall][Yield vs in-season rain] [When conditions become suitable for powdery mildew infection][Season range and first incidence] [Preparation of data for the meta-analysis][Prepare data for meta-analysis] [Meta-analysis of the effect of fungicide spray schedule on yield loss][Meta-analysis] [Meta-analysis of the effect of fungicide spray schedule on disease severity and yield loss][AUPDC meta-analysis] [Manuscript Wireframe][Manuscript wire frame] [Manuscript: A meta-analysis of fungicide use in mungbean to control for yield loss due to powdery mildew.][Manuscript] 1.2 Other research questions, which are not the focus of this study How has the first sign of powdery mildew changed between the seasons and experimental sites? Is there an ideal planting time, or fungicide management strategy, which could make use of powdery mildew defoliation during pod maturation resulting in an increased yield? Do infections that occur before flowering increase the probable yield loss? 1.3 Possible sources of variation in this analysis. Variability among host genotypes. The probable influence of season might be influenced by host genotype. This is because newer varieties were adopted into experimental trials as they were released. Between 2001 and 2015 mungbean genotype changed from Green Diamond, Berken, Crystal to Jade. Jade was the only cultivar used between 2015 and 2019. Estimations of plant maturity stages over each growing season. These estimations might able to be computed using APSIM. "],
["trials-considered-for-inclusion-in-meta-analysis.html", "2 Trials considered for inclusion in meta-analysis 2.1 Criteria for inclusion in meta-analysis 2.2 Import data and apply selection criteria 2.3 Subset data to selection criteria", " 2 Trials considered for inclusion in meta-analysis Trials testing fungicide efficacy on powdery mildew in mungbean in the Grains Research and Development Corporation (GRDC) northern grains region were sourced for a meta-analysis. Data was collected from a number of researchers from the Department of Agriculture and Primary Industries and the University of Southern Queensland and the National Growers Association. We would like to acknowledge in particular Professor Malcolm Riley’s and Dr. Sue Thompson’s effort in establishing and coordinating early field trials between 2010 and 2014. 2.1 Criteria for inclusion in meta-analysis A field trial testing the efficacy of fungicide on powdery mildew afflicted mungbean plants. Trial data needed to include: fungicide active ingredients. A demethylase inhibitor (DMI) fungicide. The date at which powdery mildew first appeared in the trial. Disease severity at the end of the growing seasons. Fungicide application dates. fungicide dose. Crop yield. Treatment means and accompanying variance 2.2 Import data and apply selection criteria 2.2.1 Import data from trials we have the raw data PM_MB_raw &lt;- rbind( read.csv(here(&quot;cache/2010 PMmung Hermitage means.csv&quot;), stringsAsFactors = FALSE), read.csv(here(&quot;cache/2011 PMmung Herm means.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/2011 PMmung Kingaroy means.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/AM1305_Goolhi_means.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/AM1304-MarysMount_means.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/AM1303-Premer-Disease_means.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/BB1305_Millmerran_means.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/Herm_16_means.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/King_16_means.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/Fogerty_17_mean.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/Hermitage_17_mean.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/Wellcamp_18_mean.csv&quot;),stringsAsFactors = FALSE), read.csv(here(&quot;cache/Hermitage_19_mean.csv&quot;),stringsAsFactors = FALSE) ) write.csv(PM_MB_raw, file = here(&quot;cache/PM_Mungbean_SummaryOfTrialsWithRawData&quot;), row.names = FALSE) 2.2.2 Import dataset of manual entries Import dataset which were manually entered from trial reports PM_MB_man &lt;- read.csv(here(&quot;cache/PM_Mungbean_DataManuallyEntered.csv&quot;), stringsAsFactors = FALSE) Bind datasets, data set compiled from raw trial data and data manually compiled from trial reports. PM_MB_dat &lt;- rbind( PM_MB_raw, PM_MB_man ) 2.2.3 Summary of all trials (#tab:data_summary)Description of Experiments Unique Trial Reference Year Location Replicates per treatments Planting date First sign of disease Fungicide treatments mung0001/01 2001 Bongeen_1 5 2001-02-11 2001-03-16 7 mung0102/01 2002 Bongeen_2 3 NA 2002-02-07 12 mung0102/02 2002 Hermitage 3 - 6 2002-01-29 2002-03-19 13 mung0102/03 2002 Hermitage 3 - 6 2002-02-12 2002-04-04 13 mung0102/04 2002 Kingaroy 8 2002-02-12 2002-04-05 3 mung0304/01 2002 Redvale 7 2004-02-21 2004-03-23 3 mung0910/01 2010 Hermitage 3 2010-01-22 2010-03-18 15 mung0910/02 2010 Kingaroy 3 2010-01-29 2010-03-26 15 mung1011/01 2011 Hermitage 3 - 6 2011-01-24 2011-03-28 12 mung1011/02 2011 Kingaroy 3 2011-02-02 2011-03-22 20 mung1112/01 2012 Gatton 3 2012-02-20 2012-04-02 15 mung1112/02 2012 Kingaroy 3 2012-02-03 2012-03-12 15 AM1303 2013 Premer 3 2012-12-28 2013-02-28 11 AM1304 2013 Marys Mount 3 - 4 2012-12-24 2013-03-16 11 AM1305 2013 Goolhi 4 2013-01-23 2013-03-25 11 BB1305 2013 Millmerran 4 2013-01-12 2013-03-13 11 mung1415/01 2015 Hermitage 5 2015-01-19 2015-03-16 6 mung1415/02 2015 Dalby 5 2015-01-06 2015-03-02 1 mung1516/01 2016 Hermitage 4 2016-02-03 2016-03-08 7 mung1516/02 2016 Kingaroy 4 2016-02-11 2016-03-09 7 mung1516/03 2016 Emerald 4 2016-02-12 2016-03-17 7 mung1617/01 2017 Hermitage 3 2017-02-13 2017-03-24 54 mung1617/02 2017 Missen Flats 3 2017-01-27 2017-03-07 54 mung1718/01 2018 Wellcamp 3 2018-02-13 2018-03-21 24 mung1819/01 2019 Hermitage 6 2018-02-04 2018-04-12 4 mung1819/02 2019 Hermitage 5 - 6 2018-02-18 2018-04-12 4 2.2.4 Experiment locations The following map displays experiment locations in the GRDC northern grain growing region which were considered for inclusion in this meta-analysis. 2.3 Subset data to selection criteria Lets apply the selection criteria our dataset. All trials identified for this meta-analysis reported: fungicide active ingredient, dose, first sign of disease. Therefore no trials need to be removed to satisfy this criteria. Three trials omitted due to not reporting yields PM_MB_dat %&gt;% filter(is.na(grain_yield.t.ha.)) %&gt;% distinct(trial_ref, year, location) ## trial_ref year location ## 1 mung0102/01 2002 Bongeen_2 ## 2 mung0102/02 2002 Hermitage ## 3 mung0102/03 2002 Hermitage PM_MB_dat &lt;- PM_MB_dat %&gt;% filter(!is.na(grain_yield.t.ha.)) One more trial removed as it did not report disease severity. PM_MB_dat %&gt;% filter(is.na(PM_final_severity)) %&gt;% distinct(trial_ref, year, location) ## trial_ref year location ## 1 mung1415/02 2015 Dalby PM_MB_dat &lt;- PM_MB_dat %&gt;% filter(!is.na(PM_final_severity)) No trials from our subset need to be removed for not reporting fungicide application dates. PM_MB_dat %&gt;% group_by(trial_ref) %&gt;% summarise(No_Record_Of_Fungicide_Application_Dates = all(is.na(fungicide_application_1)), .groups = &#39;drop&#39;)%&gt;% filter(No_Record_Of_Fungicide_Application_Dates) ## # A tibble: 0 x 2 ## # ... with 2 variables: trial_ref &lt;chr&gt;, ## # No_Record_Of_Fungicide_Application_Dates &lt;lgl&gt; No trials from our subset need to be removed for not reporting fungicide dose. PM_MB_dat %&gt;% group_by(trial_ref) %&gt;% summarise(No_Record_Of_Fungicide_Dose = all(is.na(dose_ai.ha)), .groups = &#39;drop&#39;)%&gt;% filter(No_Record_Of_Fungicide_Dose) ## # A tibble: 0 x 2 ## # ... with 2 variables: trial_ref &lt;chr&gt;, No_Record_Of_Fungicide_Dose &lt;lgl&gt; Four trials from our subset need to be removed for not reporting yield variance. NoVar &lt;- PM_MB_dat %&gt;% group_by(trial_ref) %&gt;% summarise(location = location, year = year, No_Var = all(is.na(yield_error)), .groups = &#39;drop&#39;)%&gt;% filter(No_Var)%&gt;% distinct(trial_ref, year, location) NoVar ## # A tibble: 4 x 3 ## trial_ref location year ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 mung0102/04 Kingaroy 2002 ## 2 mung0304/01 Redvale 2002 ## 3 mung1112/01 Gatton 2012 ## 4 mung1516/03 Emerald 2016 PM_MB_dat &lt;- PM_MB_dat %&gt;% filter(!(trial_ref %in% NoVar$trial_ref)) We need to focus the meta-analysis on fungicides with the same mode of action. Let’s look at all the fungicides and retain the best represented fungicide group in the data. PM_MB_dat %&gt;% group_by(fungicide_ai,trial_ref) %&gt;% summarise() %&gt;% count(sort = TRUE) %&gt;% rename(Trials = n) %&gt;% ggplot(aes(x = reorder(fungicide_ai, Trials), y = Trials)) + xlab(&quot;Fungicide active ingredient&quot;) + ylab(&quot;N Trials&quot;) + geom_col() + scale_fill_usq() + ggtitle(label = &quot;Number of trials in which the\\nspecified fungicide was used&quot;) + scale_colour_usq() + coord_flip() ## `summarise()` regrouping output by &#39;fungicide_ai&#39; (override with `.groups` argument) The demethylation inhibitors (DMI), tebuconazole and propiconazole, are used in the highest frequencies. Thee DMIs have the same fungicide mode of action and are good candidates to be pooled in the meta-analysis. Amistar Xtra and Custodia both contain strobilurin and triazole, however, because they contain differing dose ratios (inverted) pooling may not be appropriate. Perhaps best way forward is to focus the meta-analysis on only the DMIs. This can then be compared to an additional meta-analysis including azoxystrobin as a comparison. We will retain the following trials, which only contain DMI fungicides. However, we won’t remove non-DMI fungicides just yet, we will do this before the analysis. PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;)%&gt;% distinct(trial_ref, location, year)%&gt;% arrange(year) ## trial_ref year location ## 1 mung1011/01 2011 Hermitage ## 2 mung1011/02 2011 Kingaroy ## 3 mung1112/02 2012 Kingaroy ## 4 AM1305 2013 Goolhi ## 5 AM1304 2013 Marys Mount ## 6 AM1303 2013 Premer ## 7 BB1305 2013 Millmerran ## 8 mung1415/01 2015 Hermitage ## 9 mung1516/01 2016 Hermitage ## 10 mung1516/02 2016 Kingaroy ## 11 mung1617/02 2017 Missen Flats ## 12 mung1617/01 2017 Hermitage ## 13 mung1718/01 2018 Wellcamp ## 14 mung1819/01 2019 Hermitage ## 15 mung1819/02 2019 Hermitage 2.3.1 Classify dataset variables Finally we are going to define the class of each variable in the data, retaining only the variables relevant to the analysis. It should be noted that the data-set below has still retained all fungicide active ingredients. Before dropping the non-DMI fungicides from the final meta-analysis we will inspect their influence on grain yield. PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate(trial_ref = as.character(trial_ref)) %&gt;% mutate(year = as.character(year)) %&gt;% mutate(location = as.character(location)) %&gt;% mutate(host_genotype = as.character(host_genotype)) %&gt;% mutate(row_spacing = as.double(round(row_spacing, digits = 2))) %&gt;% mutate(replicates = as.integer(replicates)) %&gt;% mutate(planting_date = ymd(planting_date)) %&gt;% mutate(flowering_date = ymd(flowering_date)) %&gt;% mutate(pod_fill_date = ymd(pod_fill_date)) %&gt;% mutate(mid_late_pod_fill = ymd(mid_late_pod_fill)) %&gt;% mutate(first_sign_disease = ymd(first_sign_disease)) %&gt;% mutate(fungicide_ai = as.character(fungicide_ai))%&gt;% mutate(dose_ai.ha = round(as.double(dose_ai.ha), digits = 2))%&gt;% mutate(fungicide_application_1 = ymd(fungicide_application_1)) %&gt;% mutate(fungicide_application_2 = ymd(fungicide_application_2)) %&gt;% mutate(fungicide_application_3 = ymd(fungicide_application_3)) %&gt;% mutate(fungicide_application_4 = ymd(fungicide_application_4)) %&gt;% mutate(fungicide_application_5 = ymd(fungicide_application_5)) %&gt;% mutate(fungicide_application_6 = ymd(fungicide_application_6)) %&gt;% mutate(total_fungicide = as.integer(total_fungicide)) %&gt;% mutate(harvest_date = ymd(harvest_date)) %&gt;% mutate(final_assessment = ymd(final_assessment)) %&gt;% mutate(PM_final_severity = round(as.double(PM_final_severity), digits = 4))%&gt;% mutate(disease_error = round(as.double(disease_error), digits = 6))%&gt;% mutate(D_error_type = as.character(D_error_type))%&gt;% mutate(grain_yield.t.ha. = round(as.double(grain_yield.t.ha.), digits = 4))%&gt;% mutate(yield_error = round(as.double(yield_error), digits = 6))%&gt;% mutate(Y_error_type = as.character(Y_error_type))%&gt;% mutate(Y_Msquare = round(as.double(Y_Msquare), digits = 6))%&gt;% mutate(yield_gain = round(as.double(yield_gain), digits = 4))%&gt;% mutate(prop_YG = round(as.double(prop_YG), digits = 4))%&gt;% select(-c(trial_design, # remove the following columns plot_length.m., plot_width.m., plant_density, trade_name, n_treatment, emergence_date, rating_scale, raw_graded, raw_data_avail, comments, days_harvest.planting, AUDPS_m, AUDPC_sd, Inc_Ms)) save(PM_MB_dat, file = here(&quot;cache/ImportDataAndSelectTrials01.Rdata&quot;)) "],
["preliminary-analysis.html", "3 Preliminary Analysis 3.1 Explore and Visualise Data", " 3 Preliminary Analysis 3.1 Explore and Visualise Data The data explored in the PM_MB_dat data frame is a list of mean values from each treatment in each respective experiment. These preliminary analyses will describe the data and then investigate any change in mungbean yields which is attributable to the fungicide treatment. All fungicide ai treatments are still contained in the PM_MB_dat data, so filtering the data might be necessary to only inspect DMI treatments. 3.1.1 Descriptive statistics 3.1.1.1 Spatio-temporal variation Lets look at how many trials were undertaken each season in trials including DMI fungicides. tmp1 &lt;- PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;)%&gt;% distinct(trial_ref, location, year)%&gt;% arrange(year) table(tmp1$year) ## ## 2011 2012 2013 2015 2016 2017 2018 2019 ## 2 1 4 1 2 2 1 2 Also the location of the trials including DMI fungicides. table(tmp1$location) ## ## Goolhi Hermitage Kingaroy Marys Mount Millmerran Missen Flats ## 1 6 3 1 1 1 ## Premer Wellcamp ## 1 1 3.1.1.2 Mean yield What is the variation in yield over all the trials (including non-DMI fungicide trials) in the no spray control and fungicide treated plots. PM_MB_dat %&gt;% filter(fungicide_ai == &quot;control&quot;)%&gt;% summarise(mean_yield = mean(grain_yield.t.ha. * 1000), minimum_yield = min(grain_yield.t.ha. * 1000), maximum_yield = max(grain_yield.t.ha. * 1000), yield_stdev = sd(grain_yield.t.ha. * 1000), yield_SE = sd(grain_yield.t.ha. * 1000)/ sqrt(n())) %&gt;% kable(align = &#39;c&#39;, caption = &quot;Average yield statistics for no spray contol plots&quot; ) (#tab:ControlYield_AllTrials)Average yield statistics for no spray contol plots mean_yield minimum_yield maximum_yield yield_stdev yield_SE 1085.918 289.4 2083.9 498.6859 74.33971 What is the yield variation in no spray control trials yield over only the DMI fungicide trials. DMITrials &lt;- PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;)%&gt;% distinct(trial_ref)%&gt;% pull() PM_MB_dat %&gt;% filter(trial_ref %in% DMITrials)%&gt;% filter(fungicide_ai == &quot;control&quot; )%&gt;% summarise(mean_yield = mean(grain_yield.t.ha.*1000), minimum_yield = min(grain_yield.t.ha.*1000), maximum_yield = max(grain_yield.t.ha.*1000), yield_sterr = sd(grain_yield.t.ha.*1000)/(sqrt(length(grain_yield.t.ha.))))%&gt;% kable(align = &#39;c&#39;, caption = &quot;Average yield statistics for control plots in trials which used a DMI fungicide&quot;) (#tab:ControlYield_DMITrials)Average yield statistics for control plots in trials which used a DMI fungicide mean_yield minimum_yield maximum_yield yield_sterr 1064.195 289.4 2083.9 83.94989 Mean yields in DMI fungicide treated plots PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;)%&gt;% summarise(mean_yield = mean(grain_yield.t.ha.*1000), minimum_yield = min(grain_yield.t.ha.*1000), maximum_yield = max(grain_yield.t.ha.*1000), yield_sterr = sd(grain_yield.t.ha.*1000)/(sqrt(length(grain_yield.t.ha.))))%&gt;% kable(align = &#39;c&#39;, caption = &quot;Average yield statistics for DMI fungicide treated plots&quot;) (#tab:Yield_DMITrials)Average yield statistics for DMI fungicide treated plots mean_yield minimum_yield maximum_yield yield_sterr 1217.958 275.9 2526.3 58.33326 Trial mean yields in all fungicide treated plots PM_MB_dat %&gt;% group_by(trial_ref, location, year)%&gt;% summarise(mean_yield = mean(grain_yield.t.ha.*1000), minimum_yield = min(grain_yield.t.ha.*1000), maximum_yield = max(grain_yield.t.ha.*1000), yield_sterr = sd(grain_yield.t.ha.*1000)/(sqrt(length(grain_yield.t.ha.))))%&gt;% arrange(yield_sterr) %&gt;% kable(align = &#39;c&#39;, caption = &quot;Average yield statistics for DMI fungicide treated plots&quot;) ## `summarise()` regrouping output by &#39;trial_ref&#39;, &#39;location&#39; (override with `.groups` argument) (#tab:Yield_AllTrials)Average yield statistics for DMI fungicide treated plots trial_ref location year mean_yield minimum_yield maximum_yield yield_sterr mung1819/02 Hermitage 2019 293.3000 275.9 311.7 7.443901 mung1819/01 Hermitage 2019 566.3250 543.2 587.2 9.141059 BB1305 Millmerran 2013 787.3818 683.2 847.4 13.464038 mung1617/01 Hermitage 2017 504.8963 316.3 712.5 13.499050 AM1305 Goolhi 2013 655.3000 541.7 722.2 17.242843 AM1303 Premer 2013 1439.8273 1333.7 1563.9 22.465489 mung1011/02 Kingaroy 2011 812.3350 640.8 1058.6 24.650758 AM1304 Marys Mount 2013 1207.4000 1093.8 1336.8 25.702953 mung0910/02 Kingaroy 2010 1368.8667 1177.0 1542.0 26.250055 mung0001/01 Bongeen_1 2001 579.1429 498.0 700.0 27.819511 mung1516/02 Kingaroy 2016 933.6286 810.7 1033.9 30.761802 mung1415/01 Hermitage 2015 2129.5833 2018.3 2262.4 36.448881 mung1112/02 Kingaroy 2012 1108.3333 751.0 1323.0 38.308108 mung1011/01 Hermitage 2011 1598.8083 1387.6 1808.3 41.403948 mung1617/02 Missen Flats 2017 1820.6204 1130.2 2642.2 45.380237 mung1718/01 Wellcamp 2018 1348.7167 812.8 1690.3 52.794618 mung1516/01 Hermitage 2016 2213.7143 1802.9 2370.1 74.774325 mung0910/01 Hermitage 2010 1340.4800 1001.1 1891.9 82.143578 Lets look at the yield gains in each trial compared to the no spray control, we will also calculate the proportional grain yield gains. for (i in unique(PM_MB_dat$trial_ref)) { # Loop code over each trial reference dat1 &lt;- PM_MB_dat[PM_MB_dat$trial_ref == i, ] if (any(is.na(unique(dat1$row_spacing)))) { # If there is no recorded row.spacing don&#39;t calculate proportional yield, skip to the next trial warning( unique(dat1$trial_ref), &quot; at &quot;, unique(dat1$location), &quot; in year &quot;, unique(dat1$year), &quot; has unknown row.spacing (NA)\\n &#39;yield_gain&#39; and &#39;proportional yield gain&#39; not calculated\\n&quot; ) next() } for (j in unique(dat1$row_spacing)) { # Loop within trial row_spacing dat2 &lt;- dat1[dat1$row_spacing == j, ] controlY &lt;- mean(dat2[dat2$fungicide_ai == &quot;control&quot;, &quot;grain_yield.t.ha.&quot;]) #Mean taken as some trials had multiple control reps # Calculate the yield gain relative to the no spray control (controlY) dat2$yield_gain &lt;- dat2$grain_yield.t.ha. - controlY dat2$prop_YG &lt;- dat2$yield_gain / controlY # insert NA as yield_gain and proportional yield gain for the controls dat2[dat2$fungicide_ai == &quot;control&quot;, c(&quot;yield_gain&quot;, &quot;prop_YG&quot;)] &lt;- NA # Reassign values to row_spacing subset dat1[dat1$row_spacing == j, ] &lt;- dat2 } # Reassign values to trial_ref subset PM_MB_dat[PM_MB_dat$trial_ref == i, ] &lt;- dat1 } ## Warning: AM1303 at Premer in year 2013 has unknown row.spacing (NA) ## &#39;yield_gain&#39; and &#39;proportional yield gain&#39; not calculated # ____________________________________________ # calculate yield gain and prop_yield gain for experiments with no row spacing data dat1 &lt;- PM_MB_dat[PM_MB_dat$trial_ref == &quot;AM1303&quot;, ] controlY &lt;- mean(dat1[dat1$fungicide_ai == &quot;control&quot;, &quot;grain_yield.t.ha.&quot;]) dat1$yield_gain &lt;- dat1$grain_yield.t.ha. - controlY dat1$prop_YG &lt;- dat1$yield_gain / controlY dat1[dat1$fungicide_ai == &quot;control&quot;, c(&quot;yield_gain&quot;, &quot;prop_YG&quot;)] &lt;- c(NA, NA) PM_MB_dat[PM_MB_dat$trial_ref == &quot;AM1303&quot;, ] &lt;- dat1 Lets show the yield gains in each trial as a table and plot PM_MB_dat %&gt;% filter(trial_ref %in% DMITrials)%&gt;% # selects only the trials with DMI fungicide treatments filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;)%&gt;% group_by(trial_ref, location, year)%&gt;% summarise(yield_gain_m = mean(yield_gain), yield_gain_se = sd(yield_gain, na.rm = T)/sqrt(n()), yg_n = n(), .groups = &quot;drop&quot;)%&gt;% arrange(yield_gain_m) ## # A tibble: 15 x 6 ## trial_ref location year yield_gain_m yield_gain_se yg_n ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 AM1303 Premer 2013 -0.0454 0.0372 3 ## 2 AM1305 Goolhi 2013 -0.0347 0.0342 3 ## 3 BB1305 Millmerran 2013 -0.0294 0.0170 3 ## 4 mung1819/01 Hermitage 2019 -0.0278 0.00838 3 ## 5 mung1819/02 Hermitage 2019 0.0052 0.0104 3 ## 6 mung1617/01 Hermitage 2017 0.0302 0.0204 30 ## 7 mung1011/02 Kingaroy 2011 0.0606 0.0634 6 ## 8 AM1304 Marys Mount 2013 0.0919 0.0432 3 ## 9 mung1415/01 Hermitage 2015 0.102 0.0395 5 ## 10 mung1011/01 Hermitage 2011 0.132 0.113 2 ## 11 mung1516/02 Kingaroy 2016 0.143 0.0272 6 ## 12 mung1718/01 Wellcamp 2018 0.219 0.0461 12 ## 13 mung1617/02 Missen Flats 2017 0.281 0.0437 30 ## 14 mung1112/02 Kingaroy 2012 0.383 0.0443 6 ## 15 mung1516/01 Hermitage 2016 0.479 0.0356 6 bw_labels &lt;- PM_MB_dat %&gt;% filter(trial_ref %in% DMITrials)%&gt;% group_by(trial_ref, location, year)%&gt;% summarise(m_gy = mean(grain_yield.t.ha.)) %&gt;% mutate(trial = paste(location,year,sep = &quot;\\n&quot;)) %&gt;% arrange(m_gy) %&gt;% pull(trial) ## `summarise()` regrouping output by &#39;trial_ref&#39;, &#39;location&#39; (override with `.groups` argument) bw_labels[1] &lt;- paste0(bw_labels[1],&quot;(b)&quot;) bw_labels[3] &lt;- paste0(bw_labels[3],&quot;(a)&quot;) fungicide_spray_plot &lt;- PM_MB_dat %&gt;% filter(trial_ref %in% DMITrials)%&gt;% mutate(spray_treat = ifelse(fungicide_ai == &quot;control&quot;,&quot;control&quot;, &quot;Fungicide treated&quot;))%&gt;% group_by(trial_ref, location, year)%&gt;% ggplot(aes(reorder(trial_ref, grain_yield.t.ha.), grain_yield.t.ha., fill = spray_treat))+ geom_boxplot()+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))+ xlab(&quot;Trial location and year&quot;)+ ylab(bquote(&#39;Mungbean yield &#39;*t~ha^-1*&#39;&#39;))+ scale_x_discrete(labels = bw_labels)+ ylim(0,2.5)+ scale_fill_grey(start = 1, end = 0.7)+ labs(colour = &quot;Fungicide treatment&quot;)+ guides(fill = guide_legend(title = &quot;Treatment&quot;)) fungicide_spray_plot ## Warning: Removed 2 rows containing non-finite values (stat_boxplot). #ggsave(&quot;paper/figures/Fig1_trial_yield_bw.png&quot;) 3.1.1.3 Full trial summary Lets inspect a summary of both powdery mildew severity and grain yield for trials including DMI funcgicides. Sev_yield_table &lt;- PM_MB_dat %&gt;% filter( fungicide_ai == &quot;control&quot; | fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot; ) %&gt;% mutate(PM_sev_control = case_when(fungicide_ai == &quot;control&quot; ~ PM_final_severity, TRUE ~ NA_real_)) %&gt;% mutate(PM_sev_treat = case_when(fungicide_ai != &quot;control&quot; ~ PM_final_severity, TRUE ~ NA_real_)) %&gt;% mutate(PM_y_control = case_when(fungicide_ai == &quot;control&quot; ~ grain_yield.t.ha., TRUE ~ NA_real_)) %&gt;% mutate(PM_y_treat = case_when(fungicide_ai != &quot;control&quot; ~ grain_yield.t.ha., TRUE ~ NA_real_)) %&gt;% group_by(trial_ref, location, year, planting_date, first_sign_disease) %&gt;% summarise(n = n(), m_PM_sev_control = round(mean(PM_sev_control, na.rm = TRUE),digits = 2), min_PM_sev = round(min(PM_sev_treat, na.rm = TRUE),digits = 2), max_PM_sev = round(max(PM_sev_treat, na.rm = TRUE),digits = 2), m_PM_yield_control = round(mean(PM_y_control, na.rm = TRUE),digits = 3), min_PM_yield = round(min(PM_y_treat, na.rm = TRUE),digits = 3), max_PM_yield = round(max(PM_y_treat, na.rm = TRUE),digits = 3), .groups = &quot;drop&quot;)%&gt;% filter(min_PM_sev &lt; 10) %&gt;% # anything exceeding 9 is off the scale and should be removed due to it being the result of min(NA, na.rm = T) ie. Inf arrange(year)%&gt;% mutate(PM_sev_range = paste(min_PM_sev, max_PM_sev, sep = &quot; - &quot;))%&gt;% mutate(yield_range = paste(min_PM_yield, max_PM_yield, sep = &quot; - &quot;))%&gt;% select(-c(min_PM_sev,max_PM_sev,min_PM_yield,max_PM_yield)) %&gt;% flextable() %&gt;% set_header_labels(trial_ref = &quot;Trial code&quot;, location = &quot;Location&quot;, year = &quot;Year&quot;, planting_date = &quot;Sowing date&quot;, first_sign_disease = &quot;PM onset&quot;, n = &quot;n&quot;, m_PM_sev_control = &quot;Control mean\\nPM severity&quot;, PM_sev_range = &quot;PM severity\\nrange*&quot;, m_PM_yield_control = &quot;Control\\nmean yield&quot;, yield_range = &quot;Yield range\\n(t / ha)*&quot; ) %&gt;% fontsize(size = 8,part = &quot;body&quot;)%&gt;% fontsize(size = 10, part = &quot;header&quot;)%&gt;% align(j = 3:10, align = &quot;center&quot;, part = &quot;all&quot;) %&gt;% autofit() %&gt;% width(j = 7:10, width = 0.9)%&gt;% width(j = 3, width = 0.5)%&gt;% set_caption(&quot;Table 1: Mean yield and severity for trials included in the meta-analysis. Powdery mildew (PM) onset, number of treatments per trial (n), PM mean plot severity of the non-fungicide treated plots and the severity range in fungicide treatments; Mean yield in non-fungicide treated control and the range of yields in the fungicide treatments in tonnes per hectare&quot;) Sev_yield_table .cl-c23cfeb0{font-family:'Arial';font-size:10px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;}.cl-c23cfeb1{font-family:'Arial';font-size:8px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;}.cl-c23d9a78{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;line-height: 1.00;background-color:transparent;}.cl-c23d9a79{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;line-height: 1.00;background-color:transparent;}.cl-c23e3654{width:36px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e3655{width:63px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e3656{width:65px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e3657{width:76px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e3658{width:29px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e3659{width:69px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e365a{width:67px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e365b{width:63px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e365c{width:65px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e365d{width:69px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e365e{width:67px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d50{width:76px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d51{width:36px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d52{width:29px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d53{width:65px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d54{width:67px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d55{width:69px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d56{width:36px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d57{width:76px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d58{width:29px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d59{width:63px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e5d5a{width:29px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e844c{width:67px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e844d{width:65px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e844e{width:36px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e844f{width:69px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e8450{width:76px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e8451{width:63px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e8452{width:65px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e8453{width:29px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e8454{width:69px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e8455{width:63px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23e8456{width:76px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab34{width:67px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab35{width:36px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab36{width:76px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab37{width:67px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab38{width:65px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab39{width:69px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab3a{width:29px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab3b{width:63px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c23eab3c{width:36px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} (#tab:Full_Trial_Summary_table)Table 1: Mean yield and severity for trials included in the meta-analysis. Powdery mildew (PM) onset, number of treatments per trial (n), PM mean plot severity of the non-fungicide treated plots and the severity range in fungicide treatments; Mean yield in non-fungicide treated control and the range of yields in the fungicide treatments in tonnes per hectare Trial codeLocationYearSowing datePM onsetnControl meanPM severityControlmean yieldPM severityrange*Yield range(t / ha)*mung1011/01Hermitage20112011-01-242011-03-2844.831.5252 - 2.331.544 - 1.769mung1011/02Kingaroy20112011-02-022011-03-2287.830.7983 - 5.330.641 - 1.059mung1112/02Kingaroy20122012-02-032012-03-1278.000.7511.7 - 81.036 - 1.323AM1303Premer20132012-12-282013-02-2848.001.4222 - 7.831.334 - 1.45AM1304Marys Mount20132012-12-242013-03-1643.001.0941.38 - 3.171.117 - 1.265AM1305Goolhi20132013-01-232013-03-2547.000.6941 - 3.750.604 - 0.722BB1305Millmerran20132013-01-122013-03-1348.000.8021.62 - 80.744 - 0.803mung1415/01Hermitage20152015-01-192015-03-1667.802.0453.2 - 6.62.018 - 2.262mung1516/01Hermitage20162016-02-032016-03-0878.001.8033 - 7.52.141 - 2.37mung1516/02Kingaroy20162016-02-112016-03-0978.250.8112.25 - 7.750.873 - 1.034mung1617/01Hermitage20172017-02-132017-03-24398.000.4765.33 - 80.327 - 0.683mung1617/02Missen Flats20172017-01-272017-03-07398.961.5617.67 - 91.13 - 2.526mung1718/01Wellcamp20182018-02-132018-03-21188.221.1945.67 - 7.671.084 - 1.69mung1819/01Hermitage20192018-02-042018-04-1247.500.5875 - 7.170.543 - 0.571mung1819/02Hermitage20192018-02-182018-04-1247.830.2894.6 - 7.330.276 - 0.312 Various factors have been studied in the previous experiments which may influence the subsequent meta-analysis. On this page, unless stated, the following plots and analyses were made disregarding other effects. The following factors are postulated to influence mungbean grain yield and/or powdery mildew mean plot severity. 1 Fungicide type 2 Fungicide dose (varies only slightly within some fungicide types) 3 Number of fungicide sprays 4 Timing of fungicide spray/s relative to first sign of disease 5 Host cultivar (probably is a co-variate with season due to changing cultivars over time) 6 Experiment location 7 Row spacing 8 Final disease rating / disease pressure The data plotted below are from 18 field trials between ( - ) of which the details are described in the Trials considered for inclusion in meta-analysis section. 3.1.2 Fungicides 3.1.2.1 Fungicide type Before we exclude non-DMI fungicides let’s have a look at the efficacy of the other fungicides in comparison to the DMIs. For this comparison we will focus on the proportional yield saved, relative to the no spray control. The primary focus of this research is the effect of fungicide on mitigating yield loss due to disease. We are using proportional yield, relative to the no spray control, to reduce the effect of location and seasonal influences. PM_MB_dat %&gt;% group_by(fungicide_ai, total_fungicide) %&gt;% summarise( n = length(prop_YG), lower_2.5 = quantile(prop_YG, na.rm = T, c(0.025)), median = median(prop_YG, na.rm = T), mean = mean(prop_YG, na.rm = T), upper_97.5 = quantile(prop_YG, na.rm = T, c(0.975)) ) %&gt;% filter(n &gt;= 5) %&gt;% # remove any fungicide groups with less than 5 observations arrange(desc(median)) %&gt;% kable( caption = &quot;Fungicide effect on proportion of yield gain.&quot;, col.names = c( &quot;Fungicide active ingredient&quot;, &quot;Total fungicide applications&quot;, &quot;n Treatments&quot;, &quot;2.5% quartile&quot;, &quot;Median proportional grain yield&quot;, &quot;Mean proportional grain yield&quot;, &quot;97.5 % quartile&quot; ), align = &quot;c&quot; ) %&gt;% kable_styling(fixed_thead = T, full_width = T) %&gt;% column_spec(c(2, 3), width = &quot;1cm&quot;) %&gt;% kableExtra::add_footnote(label = &quot;Fungicides with less than five observations were omitted from this table&quot;) (#tab:Fungicide_x_nSprays_tble2)Fungicide effect on proportion of yield gain. Fungicide active ingredient Total fungicide applications n Treatments 2.5% quartile Median proportional grain yield Mean proportional grain yield 97.5 % quartile 200 g/L tebuconazole + 120 g/L azoxystrobin 2 18 -0.2370852 0.2180954 0.1597781 0.3561961 tebuconazole 2 31 -0.1444260 0.1641791 0.1637018 0.4867519 propiconazole 2 25 -0.1614388 0.1359108 0.2052755 0.6641811 propiconazole 1 24 -0.2070297 0.1332710 0.1136816 0.4386503 200 g/L tebuconazole + 120 g/L azoxystrobin 1 18 -0.1624297 0.1264091 0.1722395 0.4469985 tebuconazole 1 33 -0.1187344 0.1089182 0.1063287 0.4858887 sulphur 2 7 -0.0991580 0.0881653 0.1639453 0.6167386 200 g/L azoxystrobin + 80 g/L cyproconazole 2 9 -0.1273899 0.0842830 0.1892034 0.5677763 tebuconazole 3 5 -0.1700857 0.0815279 0.0677670 0.2552920 200 g/L azoxystrobin + 80 g/L cyproconazole 1 15 -0.1080565 0.0551238 0.1209152 0.6131158 sulphur 3 7 -0.1767673 0.0509326 0.0013425 0.1418347 carbendazim 2 5 -0.1960792 0.0397440 0.0381322 0.1875988 carbendazim 1 10 -0.0907066 0.0069470 0.0557278 0.3545017 sulphur 1 15 -0.1628304 -0.0028804 0.0352930 0.4017964 control 0 45 NA NA NaN NA a Fungicides with less than five observations were omitted from this table Let’s visualise this in a plot for one and two sprays only. PM_MB_dat %&gt;% mutate(fungicide_ai = as.factor(PM_MB_dat$fungicide_ai)) %&gt;% filter(total_fungicide == 1 | total_fungicide == 2) %&gt;% filter( fungicide_ai != &quot;pyrazophos&quot; &amp; fungicide_ai != &quot;control&quot; &amp; fungicide_ai != &quot;benomyl&quot; &amp; fungicide_ai != &quot;Acibenzolar-S-methyl&quot; ) %&gt;% mutate(fungicide_ai = factor( fungicide_ai, levels = c( &quot;carbendazim&quot;, &quot;pyraclostrobin&quot;, &quot;sulphur&quot;, &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, &quot;tebuconazole&quot;, &quot;propiconazole&quot;, &quot;200 g/L tebuconazole + 120 g/L azoxystrobin&quot; ) )) %&gt;% ggplot(aes(y = prop_YG, x = fungicide_ai)) + facet_grid(rows = vars(total_fungicide)) + geom_boxplot(aes(fill = fungicide_ai)) + geom_hline(aes(yintercept = 0), size = 0.5) + labs(y = &quot;Proportion of grain yield saved&quot;, title = &quot;Grain yield proportion saved\\nfaceted by number of sprays&quot;) + theme(legend.position = &quot;none&quot;) + scale_fill_usq() + coord_flip() There is a small yield effect among the strobilurin fungicide mixes and the DMI fungicides. While there is some differences in the variation between tebuconazole and propiconazole, the medians are very similar. I think it is safe to combine these fungicides, with the same mode of action in the meta-analysis. The follow-up spray seems to show an increase in yield protection. 3.1.2.2 Fungicide Doses From this point on we will investigate only the DMI fungicides, tebuconazole and propiconazole, and disregard all other fungicide modes-of-action. We should check that all fungicide doses that were used were roughly the same, if we are to compare between trials where dose might be different. PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% ggplot(aes(x = as.factor(dose_ai.ha), fill = fungicide_ai)) + xlab(&quot;Dose (g ai/ha)&quot;) + ggtitle(label = &quot;Total number of treatments for each respective tebuconazole\\nor propiconazole dose&quot;) + geom_bar() + scale_fill_usq() + scale_colour_usq() All trials that used tebuconazole used approximately the same dose. Dose of the active ingredient ranged from 62.35 g per hectare to 60 g per hectare. Doses for propiconazole range from 62.5 to 125, a large variation. Let’s inspect the difference in yields for each dose. PM_MB_dat %&gt;% filter(fungicide_ai == &quot;propiconazole&quot;) %&gt;% ggplot(aes(x = relevel(as.factor(dose_ai.ha), &quot;62.5&quot;), y = prop_YG)) + xlab(&quot;Dose (g ai/ha)&quot;) + ggtitle(label = &quot;Yield for each respective propiconazole dose,\\nfaceted by number of applications&quot;) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) + ylab(&quot;Yield gain proportially\\nto the no spray control&quot;) + facet_grid(cols = vars(total_fungicide)) This dose effect should be acknowledged in the meta-analysis. How many treatments of each dose have been investigated per trial? table(as.character(PM_MB_dat[PM_MB_dat$fungicide_ai == &quot;propiconazole&quot;,]$trial_ref), PM_MB_dat[PM_MB_dat$fungicide_ai == &quot;propiconazole&quot;,]$dose_ai.ha) ## ## 62.5 125 ## AM1303 3 0 ## AM1304 3 0 ## AM1305 3 0 ## BB1305 3 0 ## mung1112/02 2 2 ## mung1617/01 0 15 ## mung1617/02 0 15 ## mung1718/01 0 6 One trial show both doses were applied in the same trial, and mung1112/02. 3.1.2.3 Number of fungicide sprays Let’s look at the frequency of sprays per fungicide. table(PM_MB_dat$fungicide_ai, PM_MB_dat$total_fungicide) ## ## 0 1 2 3 7 ## 200 g/L azoxystrobin + 80 g/L cyproconazole 0 15 9 4 0 ## 200 g/L tebuconazole + 120 g/L azoxystrobin 0 18 18 0 0 ## Acibenzolar-S-methyl 0 0 1 0 0 ## benomyl 0 0 1 0 0 ## carbendazim 0 10 5 0 0 ## control 45 0 0 0 0 ## propiconazole 0 24 25 3 0 ## pyraclostrobin 0 4 4 0 0 ## pyrazophos 0 0 1 0 0 ## sulphur 0 15 7 7 3 ## tebuconazole 0 33 31 5 0 This table shows that the majority of treatments inspected one and two spray management practices. 3.1.2.4 Timing of fungicide sprays The timing of fungicide application can be crucial for maximum disease control and yield loss mitigation. The experiments all relied on natural infection and thus infection at a standardised crop maturity stage was not possible. To best estimate the effect of fungicide application timing we will use the day when the disease was first found in the field as a reference. The first sign of disease is a useful reference as it can be assessed with little training for the assessor. First let’s make a plot to visualise when one or more spray management regimes were made in relation to the first sign of disease regardless of fungicide active. The plot is faceted by number of spray applications. PM_MB_dat %&gt;% mutate( s1_DfromFS = fungicide_application_1 - first_sign_disease, s2_DfromFS = fungicide_application_2 - first_sign_disease, s3_DfromFS = fungicide_application_3 - first_sign_disease, s4_DfromFS = fungicide_application_4 - first_sign_disease, s5_DfromFS = fungicide_application_5 - first_sign_disease ) %&gt;% gather( key = spray, value = n_days, s1_DfromFS, s2_DfromFS, s3_DfromFS, s4_DfromFS, s5_DfromFS ) %&gt;% drop_na(n_days) %&gt;% ggplot(aes(x = spray, y = as.numeric(n_days))) + geom_violin() + scale_x_discrete(labels = c( &quot;First spray&quot;, &quot;Second spray&quot;, &quot;Third spray&quot;, &quot;Fourth spray&quot;, &quot;Fifth spray&quot; )) + ylab(&quot;Number of days after or before first sign of powdery mildew&quot;) + ggtitle(&quot;Fungicide application timing relative to First Sign of Disease.\\n - Faceted by number of applications&quot;)+ facet_grid(cols = vars(total_fungicide)) + coord_flip() The plot shows single fungicide applications are mostly made at zero, first sign of disease in the crop. Some were made earlier and some around 10 days later. Experiments that tested two spray treatments also tend to make the first application at first sign of disease, and the second spray between 10 and 25 days later. Three spray treatments seemed to be mostly used in experiments where preventative sprays as the first fungicide application were made. 3.1.3 Mungbean cultivars Australian mungbean varieties have the following resistance to powdery mildew. Berken: Highly susceptible Crystal: Susceptible Jade: Moderately susceptible Let’s view a stacked bar plot of the number of sprays for both demethylation inhibitors, tebuconazole and propiconazole against each cultivar. PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(host_genotype, fungicide_ai, trial_ref) %&gt;% summarise() %&gt;% count() %&gt;% rename(Treatments = n) %&gt;% ggplot(aes(x = host_genotype, y = Treatments, fill = fungicide_ai)) + xlab(&quot;Cultivar&quot;) + ylab(&quot;N Trials&quot;) + ggtitle(label = &quot;Cultivars used in either tebuconazole or propiconazole trials&quot;) + geom_col() + scale_fill_usq(name = &quot;Fungicide AI&quot;) ## `summarise()` regrouping output by &#39;host_genotype&#39;, &#39;fungicide_ai&#39; (override with `.groups` argument) 3.1.4 Row spacing Some experiments were designed to investigate the effect of row spacing and plant density on powdery mildew disease as well as fungicide timing and efficacy. The results showed that the row spacing had no statistically significant effect on powdery mildew, but narrower rows in most cases increased yield significantly. This finding has also been shown by several other researchers’ work in Queensland and New South Wales as well. Eight trials used a row spacing of 0.75 meters and tebuconazole as an active ingredient (AI). PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(fungicide_ai, row_spacing, trial_ref) %&gt;% summarise() %&gt;% count() %&gt;% rename(Trials = n) %&gt;% ggplot(aes(x = as.factor(row_spacing), y = Trials)) + xlab(&quot;Row Spacing (m)&quot;) + ylab(&quot;N Trials&quot;) + ggtitle(label = &quot;Trial row spacing using tebuconazole&quot;) + geom_col(aes(fill = fungicide_ai), position = &quot;dodge&quot;) + scale_fill_usq(name = &quot;Fungicide AI&quot;) ## `summarise()` regrouping output by &#39;fungicide_ai&#39;, &#39;row_spacing&#39; (override with `.groups` argument) Let’s plot the row spacing treatments for the response variables yield and disease severity. The main questions are: Were there any statistical differences for mungbean yield or powdery mildew severity between row spacing treatments? If not, can we pool certain row spacing that have no significant difference? Lets plot disease severity in boxplots grouped by row spacing treatment. We are asking here, which row spacing leads to the higher disease severity? # Which row spacing leads to the higher disease severity PM_MB_dat %&gt;% filter(year == 2017 | year == 2018) %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% ggplot(aes(y = PM_final_severity, x = factor(row_spacing))) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) + ylab(&quot;Final severity rating&quot;) + xlab(&quot;Row spacing (m)&quot;) + ggtitle(&quot;Powdery mildew severity between different row spacing across all trials&quot;) There is little difference here between the row spacing treatments, lets look if there is a trial location effect as disease pressure lead to varying results. # Which row spacing leads to the higher disease severity PM_MB_dat %&gt;% filter(year == 2017 | year == 2018) %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% ggplot(aes(y = PM_final_severity, x = factor(row_spacing))) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) + facet_grid(cols = vars(location)) + ggtitle(&quot;Powdery mildew variation between different row spacing&quot;) + ylab(&quot;Final severity rating&quot;) + xlab(&quot;Row spacing (m)&quot;) In the Wellcamp site, wider row spacing reduces PM severity, the other sites it seems there was not enough variation to make a distinction between row spacing treatments. # Which row spacing leads to the higher yield potential PM_MB_dat %&gt;% filter(year == 2017 | year == 2018) %&gt;% ggplot(aes( y = as.numeric(grain_yield.t.ha.), x = as.factor(row_spacing), colour = location )) + geom_jitter(width = 0.05) + ggtitle(&quot;Grain yield results for different row spacing at three locations&quot;) + xlab(&quot;Row spacing (m)&quot;) + ylab(&quot;Grain yield (t/ha)&quot;) + scale_colour_usq() The plots seem to imply when yield is limited, presumably by other abiotic factors, there is no effect of row spacing on yield, like in the Hermitage trial. However, if the average yield is more than approximately 1 t/ha then smaller row spacing has the potential to provide greater yield per hectare. Overall row spacing may influence both powdery mildew severity and yield. However, in the studies that were conducted, no interaction was found between row spacing, powdery mildew severity and yield. That is, the row spacing appeared to increase yield even if the amount of powdery mildew increased and no relationship could be detected between an interaction of the three. 3.1.5 Yield loss in cultivar Jade Mungbean Jade shows the best quantitative resistance to powdery mildew. Based on a GRDC report by Sue Thompson (2016) we want to know what the yield loss was in on cultivar Jade in the 2016 Trials. PM_MB_dat %&gt;% filter(year == &quot;2016&quot;, host_genotype == &quot;Jade&quot;)%&gt;% mutate(Treatment = case_when( fungicide_ai == &quot;control&quot; ~ &quot;control&quot;, TRUE ~ &quot;FungicideTreated&quot;))%&gt;% group_by(location, Treatment)%&gt;% summarise(trial_ref = trial_ref, location = location, year = year, Yield = mean(grain_yield.t.ha., na.rm = TRUE), .groups = &quot;drop&quot;)%&gt;% distinct()%&gt;% pivot_wider(names_from = Treatment, values_from = Yield)%&gt;% mutate(Diff = FungicideTreated - control) %&gt;% mutate(percent = (Diff/FungicideTreated)*100)%&gt;% select(trial_ref, location, year, control, FungicideTreated,percent, Diff) ## # A tibble: 2 x 7 ## trial_ref location year control FungicideTreated percent Diff ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mung1516/01 Hermitage 2016 1.80 2.28 21.0 0.479 ## 2 mung1516/02 Kingaroy 2016 0.811 0.954 15.0 0.143 This sequence of graphs show that AUDPC and disease incidence tends not affect yields if the season is a low yielding season, i.e. lower than 1 tonne per hectare. The higher the yield, the greater greater the influence on the disease on the yield especially if the crop is high yielding with AUDPC also being large enough to reduce yield. 3.1.6 FAO mungbean data An important consideration for why to carry out work on mungbean diseases is the value the crop provides. Lets pull in data from the FAOSTAT website for the area of mungbean crops harvested. beans &lt;- read.csv(here(&quot;data/FAOSTAT_data_7-6-2020.csv&quot;)) str(beans) ## &#39;data.frame&#39;:\t473 obs. of 15 variables: ## $ Domain.Code : chr &quot;QC&quot; &quot;QC&quot; &quot;QC&quot; &quot;QC&quot; ... ## $ Domain : chr &quot;Crops&quot; &quot;Crops&quot; &quot;Crops&quot; &quot;Crops&quot; ... ## $ Area.Code : int 10 10 10 10 10 10 10 10 10 10 ... ## $ Area : chr &quot;Australia&quot; &quot;Australia&quot; &quot;Australia&quot; &quot;Australia&quot; ... ## $ Element.Code : int 5312 5419 5510 5312 5419 5510 5312 5419 5510 5312 ... ## $ Element : chr &quot;Area harvested&quot; &quot;Yield&quot; &quot;Production&quot; &quot;Area harvested&quot; ... ## $ Item.Code : int 176 176 176 176 176 176 176 176 176 176 ... ## $ Item : chr &quot;Beans, dry&quot; &quot;Beans, dry&quot; &quot;Beans, dry&quot; &quot;Beans, dry&quot; ... ## $ Year.Code : int 1961 1961 1961 1962 1962 1962 1963 1963 1963 1964 ... ## $ Year : int 1961 1961 1961 1962 1962 1962 1963 1963 1963 1964 ... ## $ Unit : chr &quot;ha&quot; &quot;hg/ha&quot; &quot;tonnes&quot; &quot;ha&quot; ... ## $ Value : int 809 5525 447 809 11001 890 2023 5151 1042 1214 ... ## $ Flag : chr &quot;&quot; &quot;Fc&quot; &quot;&quot; &quot;&quot; ... ## $ Flag.Description: chr &quot;Official data&quot; &quot;Calculated data&quot; &quot;Official data&quot; &quot;Official data&quot; ... ## $ Note : logi NA NA NA NA NA NA ... beans %&gt;% filter(Item == &quot;Beans, dry&quot;, Element == &quot;Area harvested&quot;)%&gt;% select(Year,Value)%&gt;% ggplot(aes(y = Value, x = Year))+ geom_point()+ geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; save(PM_MB_dat, file = here(&quot;cache/PreliminaryData.Rdata&quot;)) References "],
["prepare-data-for-meta-analysis.html", "4 Prepare data for meta-analysis 4.1 Set environment and import data 4.2 Subset to trials containing DMI fungicides 4.3 Standardising sample variance 4.4 Classifying fungicide treatment 4.5 Trial factor 4.6 Test dose effect 4.7 Row spacing 4.8 Remove unnecersary variables 4.9 Final data check", " 4 Prepare data for meta-analysis 4.1 Set environment and import data load(&quot;cache/PreliminaryData.Rdata&quot;) source(here(&quot;R/same.R&quot;)) # matches each element of a vector and does not return NAs 4.2 Subset to trials containing DMI fungicides DMI_Trials &lt;- PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;)%&gt;% distinct(trial_ref) %&gt;% pull() PM_MB_dat &lt;- PM_MB_dat[PM_MB_dat$trial_ref %in% DMI_Trials,] Now remove any non-DMI treatments or controls PM_MB_dat &lt;- PM_MB_dat %&gt;% filter(fungicide_ai == &quot;control&quot; | fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) 4.3 Standardising sample variance Meta-analyses use variance from the data to calculate the effect sizes. The type of variance needs to be the same across all the data incorporated in the meta-analysis. We are narrowing the meta-analysis to only include treatments using demethylation inhibitors, tebuconazole and propiconazole. Let’s look at what type of statistical error was reported for the trials that used these fungicides. PM_MB_dat %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(trial_ref, location, year , Y_error_type) %&gt;% summarise(DMI_treatments = length(Y_error_type), .groups = &#39;drop&#39;) %&gt;% arrange(Y_error_type) %&gt;% kable(caption = &quot;Number of treatments for each trial and the error type reported&quot;, align = &quot;c&quot;) %&gt;% kableExtra::add_footnote(label = &quot;DMI - demethylation inhibitors (tebuconazole and propiconazole).&quot;, notation = &quot;none&quot;) (#tab:variance_types)Number of treatments for each trial and the error type reported trial_ref location year Y_error_type DMI_treatments mung1112/02 Kingaroy 2012 lsd (P=0.05) 6 AM1303 Premer 2013 stdev 3 AM1304 Marys Mount 2013 stdev 3 AM1305 Goolhi 2013 stdev 3 BB1305 Millmerran 2013 stdev 3 mung1011/01 Hermitage 2011 stdev 2 mung1011/02 Kingaroy 2011 stdev 6 mung1415/01 Hermitage 2015 stdev 5 mung1516/01 Hermitage 2016 stdev 6 mung1516/02 Kingaroy 2016 stdev 6 mung1617/01 Hermitage 2017 stdev 30 mung1617/02 Missen Flats 2017 stdev 30 mung1718/01 Wellcamp 2018 stdev 12 mung1819/01 Hermitage 2019 stdev 3 mung1819/02 Hermitage 2019 stdev 3 DMI - demethylation inhibitors (tebuconazole and propiconazole). The experiment summaries report either standard deviation or least square differences. First we will convert LSD and standard deviation, then square the stdev to get sample variance. 4.3.1 Converting least-squares to sample variance First let’s get a list the of trials that reported LSD. Trials &lt;- PM_MB_dat %&gt;% filter(Y_error_type == &quot;lsd (P=0.05)&quot;) %&gt;% select(trial_ref) %&gt;% distinct() Trials ## trial_ref ## 1 mung1112/02 Let’s use this list of trials to subset the data and calculate sampling variances. We will follow the method of converting ‘least square differences’ (LSD) to sampling variance reported by Nugugi et.al (2011). Tcrit &lt;- 2.042 for (i in Trials$trial_ref) { DFw &lt;- sum(PM_MB_dat[PM_MB_dat$trial_ref == i, ]$replicates) - length(PM_MB_dat[PM_MB_dat$trial_ref == i, ]$replicates) # degrees of freedom within groups LSD &lt;- PM_MB_dat[PM_MB_dat$trial_ref == i, ]$yield_error[1] V_yield &lt;- (PM_MB_dat[PM_MB_dat$trial_ref == i, ]$replicates[1] * (LSD / Tcrit) ^ 2) / 2 # method - Nugugi et.al (2011) DOI: 10.1094/phyto-08-10-0221 for (j in seq_along(PM_MB_dat[PM_MB_dat$trial_ref == i,]$replicates)) { if (j == 1) { Sv &lt;- vector(length = length(PM_MB_dat[PM_MB_dat$trial_ref == i,]$replicates)) } # reset Sv vector if this is the first loop Sv[j] = V_yield / PM_MB_dat[PM_MB_dat$trial_ref == i,]$replicates[j] } # Replace the values in the dataset PM_MB_dat[PM_MB_dat$trial_ref == i,]$yield_error &lt;- Sv PM_MB_dat[PM_MB_dat$trial_ref == i,]$Y_error_type &lt;- &quot;SamplingVariance&quot; } 4.3.2 Converting standard deviation to sample variance Now to estimate the variance from the standard deviation. # subset data by those which describe the Yield error with standard deviation Trials &lt;- PM_MB_dat %&gt;% filter(Y_error_type == &quot;stdev&quot;) %&gt;% select(trial_ref) %&gt;% pull() PM_MB_dat[PM_MB_dat$trial_ref %in% Trials,&quot;yield_error&quot;] &lt;- PM_MB_dat[PM_MB_dat$trial_ref %in% Trials,&quot;yield_error&quot;]^2 PM_MB_dat[PM_MB_dat$trial_ref %in% Trials,]$Y_error_type &lt;- &quot;SamplingVariance&quot; 4.3.3 Check variance of data-set Our data currently uses sample variance to define the yield error. We should expect that when yield increases so does the variance. Let’s quickly plot this to check. PM_MB_dat %&gt;% ggplot(aes(x = grain_yield.t.ha., y = yield_error)) + geom_point() There seems to be no association between yield and sample variance, this might be due to the variability of mungbeans yields. Lets look at the association between mean squares and yield to see if there is a more typical association between yield and variance. PM_MB_dat %&gt;% ggplot(aes(x = grain_yield.t.ha., y = Y_Msquare/replicates)) + geom_point() ## Warning: Removed 7 rows containing missing values (geom_point). There is a somewhat better trend here, if sampling variance from standard deviation proves unsuitable for the analysis we may compare models using variance from stdev and mean square for the best fit. However, seven treatments are missing mean square error. 4.3.4 Inspect variance and response for analysis Let’s inspect the response variance grain_yield.t.ha to see if it is normally distributed. In many cases a log transformation of the response variable improves the fit, due to the prevalence of log distributed data in nature. hist_usq(PM_MB_dat$grain_yield.t.ha., main = &quot;Grain yield (t / ha)&quot;) hist_usq(log(PM_MB_dat$grain_yield.t.ha.), main = &quot;log(Grain yield (t / ha))&quot;) hist_usq(sqrt(PM_MB_dat$grain_yield.t.ha.), main = &quot;sqrt(Grain yield (t / ha))&quot;) hist_usq(PM_MB_dat$yield_gain, main = &quot;Mean difference to control (t / ha)&quot;) The distribution of data does not seem to be improved by transformation of the data. We will retain the continuous variable grain_yield.t.ha as the response. Mean differences won’t be used as we are following the methodology of a ARM-based model, where mean differences are calculated following the meta-analysis. 4.3.4.1 Calculate sample variance from mean square errors Currently our data frame has the sample variance calculated earlier, however we can approximate it using the mean squared error. Let’s show the rational for our calculation and then add a secondary variance column (vi2). \\(MSE = Var + bias\\) However if our MSE was calculated from an unbiased sample we can assume \\(bias = 0\\) and therefore: \\(MSE = Var\\) To calculate the sample variance (for each treatment in the trial) from the mean square error (Trial variance) all we need to do is divide by the number of samples in each treatment. We can show this because: \\(MSE = \\frac{\\sum_{y_1}^{y_n}(y_i - \\overline{y})^2}{n - 1}\\) Where the sum of squares for the fungicide treatment estimator (\\(y\\)) is divided by the number of fungicide treatments (\\(n\\)). The sample variance is a similar formula except we use \\(x\\) instead of \\(y\\). \\(S_{Var} = \\frac{\\sum_{x_1}^{x_n}(x_i - \\overline{x})^2}{n - 1}\\) \\(x\\) being each observation within the experiment and \\(n\\) being the number of samples in the whole trial. Therefore: \\(S_{Var}\\approx\\frac{1}{n_{x}}\\frac{\\sum_{y_1}^{y_n}(y_i - \\overline{y})^2}{n_y - 1}\\) Where \\(n_x\\) is the number of samples within each treatment. As mentioned before there are a few treatments with no MSE (NAs), we can calculate it from the sample variance using this logic above. PM_MB_dat[is.na(PM_MB_dat$Y_Msquare),&quot;Y_Msquare&quot;] &lt;- PM_MB_dat %&gt;% filter(is.na(Y_Msquare))%&gt;% mutate(Y_Msquare = yield_error * replicates)%&gt;% pull(Y_Msquare) Now to calculate the sample variance from MSE for all treatments. #calculation when using log of response # PM_MB_dat$vi &lt;- # PM_MB_dat$Y_Msquare / (PM_MB_dat$n * PM_MB_dat$grain_yield.t.ha. ^ # 2) PM_MB_dat$vi2 &lt;- PM_MB_dat$Y_Msquare / PM_MB_dat$replicates 4.4 Classifying fungicide treatment First are going to calculate the time between the first sign of disease and the fungicide applications. PM_MB_dat %&lt;&gt;% mutate(fungicide_timing_1 = fungicide_application_1 - first_sign_disease) %&gt;% mutate(fungicide_timing_2 = fungicide_application_2 - fungicide_application_1) %&gt;% mutate(fungicide_timing_3 = fungicide_application_3 - fungicide_application_2) To ensure sufficient number of replicates, we will bin the continuous variable into three categorical variables relating to when the first fungicide application was made, relative to the first sign of disease. These categorical variables are named: - Early: First fungicide application was prior to first sign of disease. - Recommended: First fungicide application was applied on the day powdery mildew was observed, or within three days of first sign. - Late: First fungicide application was four or more days after first sign of disease being observed. The number of sprays need also be defined. data.frame(TreatmentName = c(&quot;Early&quot;, &quot;Recommended&quot;, &quot;Late&quot;, &quot;EarlyPlus&quot;, &quot;RecommendedPlus&quot;, &quot;LatePlus&quot;), n_sprays = rep(c(&quot;Single&quot;, &quot;Two - Three&quot;), each = 3), DaysRelativeToFirstSign = c(&quot;Prior to first sign of Powdery Mildew&quot;, &quot;1 - 3 days after first sign of Powdery Mildew&quot;, &quot;7 - 8 days after first sign of Powdery Mildew&quot;))%&gt;% kable() TreatmentName n_sprays DaysRelativeToFirstSign Early Single Prior to first sign of Powdery Mildew Recommended Single 1 - 3 days after first sign of Powdery Mildew Late Single 7 - 8 days after first sign of Powdery Mildew EarlyPlus Two - Three Prior to first sign of Powdery Mildew RecommendedPlus Two - Three 1 - 3 days after first sign of Powdery Mildew LatePlus Two - Three 7 - 8 days after first sign of Powdery Mildew PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate( spray_management = case_when( fungicide_timing_1 &lt; 0 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Early&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Recommended&quot;, fungicide_timing_1 &gt;= 4 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Late&quot;, fungicide_timing_1 &lt; 0 &amp; !is.na(fungicide_application_2) ~ &quot;Early_plus&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 &amp; !is.na(fungicide_application_2) ~ &quot;Recommended_plus&quot;, fungicide_timing_1 &gt;= 4 &amp; !is.na(fungicide_application_2) ~ &quot;Late_plus&quot;, TRUE ~ &quot;Other&quot; ) ) PM_MB_dat[PM_MB_dat$fungicide_ai == &quot;control&quot;, c( &quot;fungicide_timing_1&quot;, &quot;fungicide_timing_2&quot;, &quot;fungicide_timing_3&quot;, &quot;spray_management&quot; )] &lt;- &quot;control&quot; Now to view the number break-down of the spray_management treatments table(PM_MB_dat$spray_management) ## ## control Early Early_plus Late ## 38 13 5 17 ## Late_plus Recommended Recommended_plus ## 19 27 40 ‘Early_plus’ treatments are few in number, these treatments will have too few comparisons with other treatments in the meta-analysis to provide accurate results. Therefore we will remove ‘Early_plus’ from the analysis. PM_MB_dat &lt;- PM_MB_dat %&gt;% filter(spray_management != &quot;Early_plus&quot;) 4.5 Trial factor We have a number of variable which could introduce variation in our analysis. We will combine these variables into a single variable called trial which will help us define the between trial variation. PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate(trial = paste( trial_ref, year, location, host_genotype, row_spacing, sep = &quot;_&quot;)) %&gt;% select(trial_ref, trial, everything()) 4.6 Test dose effect Earlier, in section Fungicide Doses we noted there were different doses of propiconazole, which might influence our analysis. The current label for custodia PER82104, Containing: 120 g/L azoxystrobin and 200 g/L tebuconazole, recommends between 300 ml - 600 ml of the tebuconazole fraction per hectare, equivalent to 60 - 120 grams per hectare. These label rates are assumed to be the same for propiconazole infering these concentrations might be within the recommended rates. It is also worth noting the APVMA permit PER13979 which allows the use of Tebuconazole between 62.35 g / ha and 83 g / ha depending on the product formulation. Let’s add the dose variable to the trial variable then compare linear mixed effect models including and excluding dose in the trial variable. We already have a factor breaking down the dose in the trial variable. Let’s make a new one without dose. table(PM_MB_dat$dose_ai.ha) ## ## 0 60 62 62.35 62.5 125 ## 38 6 36 24 12 38 PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate(dose = case_when( dose_ai.ha == 0 ~ &quot;control&quot;, dose_ai.ha &lt;= 70 ~ &quot;lowDose&quot;, dose_ai.ha &gt; 70 ~ &quot;highDose&quot;, TRUE ~ NA_character_ )) PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate(trial_dose = paste(trial_ref, year, location, host_genotype, row_spacing,dose , sep = &quot;_&quot;)) cbind(NoDose = head(PM_MB_dat$trial), Dose = head(PM_MB_dat$trial_dose)) %&gt;% kable() NoDose Dose mung1011/01_2011_Hermitage_Berken_0.75 mung1011/01_2011_Hermitage_Berken_0.75_control mung1011/01_2011_Hermitage_Berken_0.75 mung1011/01_2011_Hermitage_Berken_0.75_lowDose mung1011/01_2011_Hermitage_Crystal_0.75 mung1011/01_2011_Hermitage_Crystal_0.75_control mung1011/01_2011_Hermitage_Crystal_0.75 mung1011/01_2011_Hermitage_Crystal_0.75_lowDose mung1011/02_2011_Kingaroy_Berken_0.75 mung1011/02_2011_Kingaroy_Berken_0.75_control mung1011/02_2011_Kingaroy_Berken_0.75 mung1011/02_2011_Kingaroy_Berken_0.75_lowDose Let’s test the dose effect in a linear mixed effect model. m_noDose &lt;- lmer(log(grain_yield.t.ha. * 1000) ~ factor(spray_management) + (1 | trial), data = PM_MB_dat) m_dose &lt;- lmer(log(grain_yield.t.ha. * 1000) ~ factor(spray_management) + (1 | trial_dose), data = PM_MB_dat) anova(m_noDose, m_dose) ## refitting model(s) with ML (instead of REML) ## Data: PM_MB_dat ## Models: ## m_noDose: log(grain_yield.t.ha. * 1000) ~ factor(spray_management) + (1 | ## m_noDose: trial) ## m_dose: log(grain_yield.t.ha. * 1000) ~ factor(spray_management) + (1 | ## m_dose: trial_dose) ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## m_noDose 8 -43.277 -18.982 29.639 -59.277 ## m_dose 8 55.856 80.151 -19.928 39.856 0 0 1 Using the model without dose produces a lower AIC and we find no significant difference between models. We will not use dose as a defining variable in trial. 4.7 Row spacing We may want to consider row spacing in the trials. However one of the locations has NA as the row spacing. PM_MB_dat%&gt;% filter(is.na(row_spacing))%&gt;% select(trial_ref,year, location, row_spacing,spray_management,host_genotype, fungicide_ai) ## trial_ref year location row_spacing spray_management host_genotype ## 1 AM1303 2013 Premer NA control Crystal ## 2 AM1303 2013 Premer NA Recommended_plus Crystal ## 3 AM1303 2013 Premer NA Recommended Crystal ## 4 AM1303 2013 Premer NA Recommended_plus Crystal ## fungicide_ai ## 1 control ## 2 propiconazole ## 3 propiconazole ## 4 propiconazole For now let’s assign the most used row spacing of 0.33 m as an approximation so the model can analyse this as a continuous variable. If we decide to use the row_spacing column as a factor in the final model we will need to remove this approximation. PM_MB_dat[is.na(PM_MB_dat$row_spacing),&quot;row_spacing&quot;] &lt;- 0.33 4.8 Remove unnecersary variables PM_MB_dat &lt;- PM_MB_dat %&gt;% select(-c(trial_dose, fungicide_timing_1,fungicide_timing_2, fungicide_timing_3, dose, fungicide_application_4, fungicide_application_5, fungicide_application_6, fungicide_application_7)) 4.9 Final data check Now we have defined our treatments lets inspect plots to visualise how well the data compares across the trial years and locations? # class spray_management as a factor and reorder them for the plot PM_MB_dat$spray_management &lt;- factor(PM_MB_dat$spray_management, rev( c( &quot;control&quot;, &quot;Early&quot;, &quot;Recommended&quot;, &quot;Recommended_plus&quot;, &quot;Late&quot;, &quot;Late_plus&quot; ) )) ggplot(PM_MB_dat, aes(x = as.factor(year), fill = spray_management)) + geom_bar(position = position_dodge2(width = 0.9, preserve = &quot;single&quot;)) + scale_fill_usq(name = &quot;Spray Management&quot;) + xlab(&quot;Year&quot;) kable( table(PM_MB_dat$spray_management, PM_MB_dat$year), align = rep(&#39;c&#39;, 8), caption = &quot;Which treatments and how many treatments are represented in each year&quot; ) %&gt;% kable_styling( &quot;striped&quot;, fixed_thead = TRUE, full_width = FALSE, position = &quot;center&quot; ) (#tab:table_of_nTreatments)Which treatments and how many treatments are represented in each year 2011 2012 2013 2015 2016 2017 2018 2019 Late_plus 0 0 0 1 6 0 12 0 Late 0 0 0 1 2 12 0 2 Recommended_plus 2 3 6 1 2 24 0 2 Recommended 4 3 3 1 2 12 0 2 Early 0 0 1 0 0 12 0 0 control 4 1 4 1 2 18 6 2 Treatments Late_plus and Early don’t have very good comparison to other treatments. Let’s visualise the spread of data in each treatments with box-plots. PM_MB_dat %&gt;% ggplot( aes( y = grain_yield.t.ha., x = spray_management, fill = spray_management, colour = spray_management ) ) + geom_boxplot(alpha = 0.25) + geom_jitter(width = 0.1, alpha = 0.5) + labs(x = &quot;Spray management variable&quot;, y = &quot;Grain yield (t/Ha)&quot;, title = &quot;Mean grain yield from each treatment \\n categorised by spray management scenario&quot;) + theme(plot.title = element_text(hjust = 0.5)) + geom_hline(yintercept = 0, linetype = 2) + scale_fill_usq() + scale_colour_usq() + coord_flip() + guides(fill = FALSE, color = FALSE) There seems like little difference between the treatments, with exception of Late_plus. Let’s do this plot again, but let’s look at the proportional mean difference between each treatment and the no spray control for each study, this should reduce variation in yield due between trials. PM_MB_dat %&gt;% filter(spray_management != &quot;control&quot;) %&gt;% ggplot( aes( y = prop_YG, x = spray_management, fill = spray_management, colour = spray_management ) ) + geom_boxplot(alpha = 0.25) + geom_jitter(width = 0.1, alpha = 0.5) + labs(x = &quot;Spray management variable&quot;, y = &quot;Grain yield (t/Ha)&quot;, title = &quot;Mean grain yield from each treatment \\n categorised by spray management scenario&quot;) + theme(plot.title = element_text(hjust = 0.5)) + geom_hline(yintercept = 0, linetype = 2) + scale_fill_usq() + scale_colour_usq() + coord_flip() + guides(fill = FALSE, color = FALSE) Using the mean difference in the treatment effect seems to show the effect of each treatment better than just raw yield and reduces the variability in the treatments. We know there is a good deal of variability in our studies and between them. Mungbean produces variable yields between seasons so ordinarily we should use a response that highlights the difference in the treatment effects that we are interested in and reduce the variability. However for an arm-based analysis, which we intend to do, we calculate the differences between control and treatment after the meta-analysis. 4.9.1 Simplify and save data PM_MB_dat_full &lt;- PM_MB_dat PM_MB_dat &lt;- PM_MB_dat %&gt;% mutate(spray_management = factor( spray_management, c( &quot;control&quot;, &quot;Early&quot;, &quot;Recommended&quot;, &quot;Recommended_plus&quot;, &quot;Late&quot;, &quot;Late_plus&quot; ) ), id = row_number(), vi = yield_error, n = replicates) %&gt;% select( trial, trial_ref, location, year, row_spacing, host_genotype, spray_management, fungicide_ai, grain_yield.t.ha., yield_gain, vi, vi2, n, id) save(PM_MB_dat, PM_MB_dat_full, file = here(&quot;cache/PrepData.Rdata&quot;)) "],
["grain-yield-meta-analysis.html", "5 Grain yield meta-analysis 5.1 metafor analysis 5.2 netmeta analysis", " 5 Grain yield meta-analysis Let’s get started with the analysis by first finding the best model fit that answers our research question. When, in relation to PM establishes in the crop, should farmers begin spraying mungbean to mitigate yield loss: before PM establishing, immediately after first sign of PM establishing, or after PM has become established in the crop. A secondary question to this aim is: given the time at which the first spray occurred is a second spray provide worthwhile yield protection. To do this, in our model: Grain yield is our response variable (t / ha) Trial, which resolves combinations of categorical variables: year, location, row spacing, fungicide dose and cultivar; is set as a random intercept We will investigate the effect size of our treatment - spray management, 5.1 metafor analysis For the first grain yield meta-analysis will be an ARM based model using the metafor package (Viechtbauer 2010). We are using the spray_management variable as a moderator and an interactive term to the trial random variable. PM_mv &lt;- rma.mv( yi = grain_yield.t.ha., vi, mods = ~ spray_management, method = &quot;ML&quot;, random = list( ~ spray_management | trial, ~ 1 | id), struct = &quot;UN&quot;, control = list(optimizer = &quot;optim&quot;), data = PM_MB_dat ) ## Warning: Some combinations of the levels of the inner factor never occurred. ## Corresponding rho value(s) fixed to 0. summary(PM_mv) ## ## Multivariate Meta-Analysis Model (k = 154; method: ML) ## ## logLik Deviance AIC BIC AICc ## 49.7175 233.2981 -45.4350 36.5628 -33.4350 ## ## Variance Components: ## ## estim sqrt nlvls fixed factor ## sigma^2 0.0000 0.0000 154 no id ## ## outer factor: trial (nlvls = 23) ## inner factor: spray_management (nlvls = 6) ## ## estim sqrt k.lvl fixed level ## tau^2.1 0.2096 0.4579 38 no control ## tau^2.2 0.2205 0.4696 13 no Early ## tau^2.3 0.2887 0.5373 27 no Recommended ## tau^2.4 0.4017 0.6338 40 no Recommended_plus ## tau^2.5 0.3285 0.5731 17 no Late ## tau^2.6 0.4008 0.6331 19 no Late_plus ## ## rho.cntr rho.Erly rho.Rcmm rho.Rcm_ rho.Late rho.Lt_p ## control 1 0.9706 0.9872 0.9735 0.9888 0.9843 ## Early 0.9706 1 0.9965 0.9960 0.9932 0.0000 ## Recommended 0.9872 0.9965 1 0.9954 0.9986 0.9986 ## Recommended_plus 0.9735 0.9960 0.9954 1 0.9967 0.9985 ## Late 0.9888 0.9932 0.9986 0.9967 1 0.9996 ## Late_plus 0.9843 0.0000 0.9986 0.9985 0.9996 1 ## cntr Erly Rcmm Rcm_ Late Lt_p ## control - no no no no no ## Early 7 - no no no yes ## Recommended 19 6 - no no no ## Recommended_plus 17 6 17 - no no ## Late 11 6 11 11 - no ## Late_plus 6 0 3 3 3 - ## ## Test for Residual Heterogeneity: ## QE(df = 148) = 10263.2645, p-val &lt; .0001 ## ## Test of Moderators (coefficients 2:6): ## QM(df = 5) = 37.7144, p-val &lt; .0001 ## ## Model Results: ## ## estimate se zval pval ci.lb ## intrcpt 1.0832 0.0975 11.1138 &lt;.0001 0.8921 ## spray_managementEarly 0.0153 0.0439 0.3479 0.7279 -0.0708 ## spray_managementRecommended 0.1461 0.0338 4.3279 &lt;.0001 0.0799 ## spray_managementRecommended_plus 0.1979 0.0549 3.6045 0.0003 0.0903 ## spray_managementLate 0.1432 0.0447 3.2006 0.0014 0.0555 ## spray_managementLate_plus 0.1387 0.0590 2.3483 0.0189 0.0229 ## ci.ub ## intrcpt 1.2742 *** ## spray_managementEarly 0.1013 ## spray_managementRecommended 0.2123 *** ## spray_managementRecommended_plus 0.3055 *** ## spray_managementLate 0.2309 ** ## spray_managementLate_plus 0.2544 * ## ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Lets try the model with an implied simpler variance-covariance matrix “compound symetry” (“CS”) to examine if unstructured matrix is suitable. PM_mv_cs &lt;- rma.mv( yi = grain_yield.t.ha., vi, mods = ~ spray_management, method = &quot;ML&quot;, random = list( ~ spray_management | trial, ~ 1 | id), struct = &quot;CS&quot;, control = list(optimizer = &quot;optim&quot;), data = PM_MB_dat ) anova(PM_mv, PM_mv_cs) ## ## df AIC BIC AICc logLik LRT pval QE ## Full 27 -45.4350 36.5628 -33.4350 49.7175 10263.2645 ## Reduced 9 -40.2381 -12.9055 -38.9881 29.1191 41.1968 0.0014 10263.2645 The test shows that the ‘Full’, more complicated model PM_mv, is a better fit and therefore we should keep the unstructured variance-covariance matrix. The first table in the PM_mv output shows tau^2 (between trial variance) of each moderator random effects and the number of occurrences for each treatment in the analysis. This effectively shows the heterogeneity between experiments for these particular treatments. The tau^2 also gives us the heterogeneity between trials and indicates Recommended_plus showed the highest heterogeneity between experiments followed by Late_plus, Late then Recommended, with Early and the no-spray control showing the least heterogeneity. The second table is in two parts (left and right). The left part, rho, is the correlation of variation between the specified treatments. All comparisons were acceptable except for a comparison between Early and Late_plus, 0.000 rho. Early and Late_plus treatments never occurred within the same trial, which is indicated by the right side of the table (hence the warning). In this result we can see that the Early treatment is not significantly different to the intercept, which in this case is the mean of the no spray control. However the other treatments are significantly different from the no-spray control (intercept). The \\(Q_M\\) omnibus test of moderators, shows the moderators significantly influence the model (\\(Q_M =\\) 37.7143516 \\(,df =\\) 5, P &lt; 0.0001) and we can reject the null hypothesis (\\(H_0 : \\beta_1 = \\beta_2 = \\beta_3 =\\beta_4 = 0\\)) that there is no difference between the moderators (Viechtbauer 2010). The analysis shows there is still a significant amount of residual heterogeneity (\\(Q_E =\\) 1.026326410^{4} \\(,df=\\) 149, P &lt; 0.0001 ) not captured by the spray management moderator indicating other possible moderators which might influence grain yield. Lets present the meta-analysis results for the moderator variables in a forest style plot. First lets create a table of the results. # obtain number of treatments included in each moderator variable k5 &lt;- as.data.frame(table(PM_MB_dat$trial, PM_MB_dat$spray_management)) %&gt;% filter(Freq != 0) %&gt;% group_by(Var2) %&gt;% summarise(n()) %&gt;% pull() ## `summarise()` ungrouping output (override with `.groups` argument) # create data.frame results_mv &lt;- data.frame( N = PM_mv$g.levels.k, k = k5, Effect = round(PM_mv$b, 4), se = round(PM_mv$se, 4), CI_lower = round(PM_mv$ci.lb, 4), CI_upper = round(PM_mv$ci.ub, 4), z_val = round(PM_mv$zval, 4), p_val = reportP(PM_mv$pval, AsNumeric = TRUE) ) # adjust estimates to show absolute means results_mv &lt;- results_mv[2:6, ] %&gt;% mutate(Effect = Effect + results_mv$Effect[1]) %&gt;% mutate(CI_lower = CI_lower + results_mv$CI_lower[1]) %&gt;% mutate(CI_upper = CI_upper + results_mv$CI_upper[1]) %&gt;% bind_rows(results_mv[1, ]) %&gt;% mutate(index = c(2:6, 1)) %&gt;% arrange(index) # rename colnames to give table headings colnames(results_mv)[c(1:4, 6:9)] &lt;- c(&quot;Treatment&quot;, &quot;$N$&quot;, &quot;$k$&quot;, &quot;$\\\\mu$&quot;, &quot;$CI_{L}$&quot;, &quot;$CI_{U}$&quot;, &quot;$Z$&quot;, &quot;$P$&quot;) # provide rownames for each moderator variable row.names(results_mv) &lt;- c( &quot;Intercept / No Spray control&quot;, &quot;$Early_{single}$&quot;, &quot;$Recommended_{single}$&quot;, &quot;$Recommended_{plus}$&quot;, &quot;$Late_{single}$&quot;, &quot;$Late_{plus}$&quot; ) kable(results_mv[, 2:9], align = &quot;lcccccccc&quot;, booktabs = TRUE, caption = &quot;Table ##: Estimated mean mungbean yields for each spray schedule treatment used for mitigating yield losses to powdery mildew in mungbean crops grown in eastern Australia. Yield estimates were calculated from the network meta-analysis of data obtained from grey literature reports. Z and P values indicate statistical significance in comparison to the intercept.&quot;) (#tab:metafor_results)Table ##: Estimated mean mungbean yields for each spray schedule treatment used for mitigating yield losses to powdery mildew in mungbean crops grown in eastern Australia. Yield estimates were calculated from the network meta-analysis of data obtained from grey literature reports. Z and P values indicate statistical significance in comparison to the intercept. \\(N\\) \\(k\\) \\(\\mu\\) se \\(CI_{L}\\) \\(CI_{U}\\) \\(Z\\) \\(P\\) Intercept / No Spray control 38 23 1.0832 0.0975 0.8921 1.2742 11.1138 0.0001 \\(Early_{single}\\) 13 7 1.0985 0.0439 0.8213 1.3755 0.3479 0.7279 \\(Recommended_{single}\\) 27 19 1.2293 0.0338 0.9720 1.4865 4.3279 0.0001 \\(Recommended_{plus}\\) 40 17 1.2811 0.0549 0.9824 1.5797 3.6045 0.0003 \\(Late_{single}\\) 17 11 1.2264 0.0447 0.9476 1.5051 3.2006 0.0014 \\(Late_{plus}\\) 19 6 1.2219 0.0590 0.9150 1.5286 2.3483 0.0189 Let’s view these comparisons in a plot. results_mv %&gt;% filter(Treatment != &quot;control&quot;) %&gt;% mutate(Treatment = factor(Treatment, levels = rev( c( &quot;Early&quot;, &quot;Recommended&quot;, &quot;Recommended_plus&quot;, &quot;Late&quot;, &quot;Late_plus&quot; ) ))) %&gt;% ggplot(aes(Treatment, `$\\\\mu$`)) + geom_hline( yintercept = seq(-0.05, 0.3, by = 0.05), color = usq_cols(&quot;usq charcoal&quot;), linetype = 3 ) + geom_hline(yintercept = 0) + geom_point(aes(size = 1 / se), shape = 15) + geom_linerange(aes(ymin = `$CI_{L}$`, ymax = `$CI_{U}$`)) + coord_flip() + #ggtitle(&quot;Mean spray schedule effect sizes\\nand 95% confidence intervals&quot;)+ ylab(expression(paste( &quot;Mean yield difference to control (t ha&quot; ^ -1, &quot;)&quot;, sep = &quot;&quot; ))) + scale_x_discrete( &quot;Moderator variable&quot;, labels = c( expression(&quot;Late&quot;[&quot;plus&quot;]), expression(&quot;Late&quot;[&quot;single&quot;]), expression(&quot;Recommended&quot;[&quot;plus&quot;]), expression(&quot;Recommended&quot;[&quot;single&quot;]), expression(&quot;Early&quot;[&quot;single&quot;]) ) ) ggsave(&quot;paper/figures/Fig2_means_difference.png&quot;, height = 3, dpi = 500) ## Saving 7 x 3 in image Lets investigate the treatment contrasts source(&quot;R/simple_summary.R&quot;) #function to provide a table that includes the treatment names in the contrasts summary(glht(PM_mv, linfct = cbind(contrMat(rep( 1, 6 ), type = &quot;Tukey&quot;))), test = adjusted(&quot;none&quot;)) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Fit: rma.mv(yi = grain_yield.t.ha., V = vi, mods = ~spray_management, ## random = list(~spray_management | trial, ~1 | id), struct = &quot;UN&quot;, ## data = PM_MB_dat, method = &quot;ML&quot;, control = list(optimizer = &quot;optim&quot;)) ## ## Linear Hypotheses: ## Estimate Std. Error z value Pr(&gt;|z|) ## 2 - 1 == 0 -1.067884 0.111219 -9.602 &lt; 2e-16 *** ## 3 - 1 == 0 -0.937043 0.091435 -10.248 &lt; 2e-16 *** ## 4 - 1 == 0 -0.885258 0.082966 -10.670 &lt; 2e-16 *** ## 5 - 1 == 0 -0.939954 0.088695 -10.598 &lt; 2e-16 *** ## 6 - 1 == 0 -0.944488 0.084543 -11.172 &lt; 2e-16 *** ## 3 - 2 == 0 0.130840 0.029595 4.421 9.82e-06 *** ## 4 - 2 == 0 0.182626 0.049062 3.722 0.000197 *** ## 5 - 2 == 0 0.127929 0.046545 2.749 0.005987 ** ## 6 - 2 == 0 0.123396 0.061874 1.994 0.046118 * ## 4 - 3 == 0 0.051786 0.034597 1.497 0.134442 ## 5 - 3 == 0 -0.002911 0.033156 -0.088 0.930040 ## 6 - 3 == 0 -0.007445 0.048779 -0.153 0.878695 ## 5 - 4 == 0 -0.054697 0.038298 -1.428 0.153234 ## 6 - 4 == 0 -0.059230 0.046740 -1.267 0.205075 ## 6 - 5 == 0 -0.004534 0.047810 -0.095 0.924449 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- none method) contrast_Ssum &lt;- simple_summary(summary(glht(PM_mv, linfct = cbind( contrMat(rep(1, 6), type = &quot;Tukey&quot;) )), test = adjusted(&quot;none&quot;))) contrast_Ssum ## contrast coefficients StdErr Zvalue ## 2 - 1 Early - control -1.067883878 0.11121900 -9.60163195 ## 3 - 1 Recommended - control -0.937043442 0.09143526 -10.24816306 ## 4 - 1 Recommended_plus - control -0.885257784 0.08296552 -10.67018862 ## 5 - 1 Late - control -0.939954385 0.08869470 -10.59763836 ## 6 - 1 Late_plus - control -0.944488274 0.08454316 -11.17166929 ## 3 - 2 Recommended - Early 0.130840436 0.02959526 4.42099260 ## 4 - 2 Recommended_plus - Early 0.182626094 0.04906230 3.72233051 ## 5 - 2 Late - Early 0.127929493 0.04654515 2.74850331 ## 6 - 2 Late_plus - Early 0.123395604 0.06187368 1.99431484 ## 4 - 3 Recommended_plus - Recommended 0.051785658 0.03459726 1.49681406 ## 5 - 3 Late - Recommended -0.002910943 0.03315643 -0.08779424 ## 6 - 3 Late_plus - Recommended -0.007444832 0.04877908 -0.15262348 ## 5 - 4 Late - Recommended_plus -0.054696601 0.03829759 -1.42819939 ## 6 - 4 Late_plus - Recommended_plus -0.059230490 0.04674030 -1.26722524 ## 6 - 5 Late_plus - Late -0.004533889 0.04781022 -0.09483096 ## pvals sig ## 2 - 1 0.000000e+00 *** ## 3 - 1 0.000000e+00 *** ## 4 - 1 0.000000e+00 *** ## 5 - 1 0.000000e+00 *** ## 6 - 1 0.000000e+00 *** ## 3 - 2 9.824854e-06 *** ## 4 - 2 1.973924e-04 *** ## 5 - 2 5.986803e-03 ** ## 6 - 2 4.611766e-02 * ## 4 - 3 1.344416e-01 ## 5 - 3 9.300402e-01 ## 6 - 3 8.786952e-01 ## 5 - 4 1.532345e-01 ## 6 - 4 2.050748e-01 ## 6 - 5 9.244491e-01 These contrasts can be viewed in a plot par(mar = c(5, 13, 4, 2) + 0.1) plot(glht(PM_mv, linfct = cbind(contrMat(rep( 1, 6 ), type = &quot;Tukey&quot;))), yaxt = &#39;n&#39;) axis( 2, at = seq_along(contrast_Ssum$contrast), labels = rev(contrast_Ssum$contrast), las = 2, cex.axis = 0.8 ) 5.1.1 Profile plots Let’s inspect the profile plots to ensure the model is not over-fitted. We expect to see the estimate align with the peak of the curve. Also that the shape of the line is a curve. Caution! this will take some time to run. 5.1.2 Forest plot of trial treatment effect per trial Lets look at the trial variability in this model with a forest plot 5.2 netmeta analysis We can use the netmeta package to give a graphical representation of the pairwise comparisons. Let’s analyse the data again using a different statistical approach to see if our outcome with the metafor package was robust. The netmeta package uses a frequentist approach to the analysis and focuses on the pairwise comparisons between treatments. datPM3 &lt;- PM_MB_dat %&gt;% group_by(trial, spray_management, n) %&gt;% summarize(yi_mean = mean(grain_yield.t.ha.), vi_mean = mean(vi)) %&gt;% ungroup() ## `summarise()` regrouping output by &#39;trial&#39;, &#39;spray_management&#39; (override with `.groups` argument) PM_con &lt;- pairwise( treat = spray_management, n = n, mean = yi_mean, sd = sqrt(vi_mean), studlab = trial, data = datPM3, sm = &quot;MD&quot; ) net_con &lt;- netmeta(TE, seTE, treat1, treat2, studlab, data = PM_con, sm = &quot;MD&quot;) summary(net_con) ## Number of studies: k = 23 ## Number of treatments: n = 6 ## Number of pairwise comparisons: m = 126 ## Number of designs: d = 7 ## ## Fixed effects model ## ## Treatment estimate (sm = &#39;MD&#39;): ## control Early Late Late_plus Recommended Recommended_plus ## control . -0.0489 -0.0738 -0.1726 -0.0696 -0.1256 ## Early 0.0489 . -0.0249 -0.1236 -0.0206 -0.0766 ## Late 0.0738 0.0249 . -0.0988 0.0042 -0.0518 ## Late_plus 0.1726 0.1236 0.0988 . 0.1030 0.0470 ## Recommended 0.0696 0.0206 -0.0042 -0.1030 . -0.0560 ## Recommended_plus 0.1256 0.0766 0.0518 -0.0470 0.0560 . ## ## Lower 95%-confidence limit: ## control Early Late Late_plus Recommended Recommended_plus ## control . -0.1273 -0.1103 -0.2274 -0.1050 -0.1668 ## Early -0.0295 . -0.1057 -0.2156 -0.1019 -0.1599 ## Late 0.0372 -0.0560 . -0.1521 -0.0304 -0.0916 ## Late_plus 0.1178 0.0317 0.0455 . 0.0474 -0.0080 ## Recommended 0.0341 -0.0606 -0.0388 -0.1586 . -0.0966 ## Recommended_plus 0.0843 -0.0066 0.0120 -0.1020 0.0154 . ## ## Upper 95%-confidence limit: ## control Early Late Late_plus Recommended Recommended_plus ## control . 0.0295 -0.0372 -0.1178 -0.0341 -0.0843 ## Early 0.1273 . 0.0560 -0.0317 0.0606 0.0066 ## Late 0.1103 0.1057 . -0.0455 0.0388 -0.0120 ## Late_plus 0.2274 0.2156 0.1521 . 0.1586 0.1020 ## Recommended 0.1050 0.1019 0.0304 -0.0474 . -0.0154 ## Recommended_plus 0.1668 0.1599 0.0916 0.0080 0.0966 . ## ## Random effects model ## ## Treatment estimate (sm = &#39;MD&#39;): ## control Early Late Late_plus Recommended Recommended_plus ## control . -0.0514 -0.1312 -0.1943 -0.0953 -0.1501 ## Early 0.0514 . -0.0798 -0.1429 -0.0440 -0.0987 ## Late 0.1312 0.0798 . -0.0631 0.0359 -0.0189 ## Late_plus 0.1943 0.1429 0.0631 . 0.0990 0.0442 ## Recommended 0.0953 0.0440 -0.0359 -0.0990 . -0.0548 ## Recommended_plus 0.1501 0.0987 0.0189 -0.0442 0.0548 . ## ## Lower 95%-confidence limit: ## control Early Late Late_plus Recommended Recommended_plus ## control . -0.1647 -0.2138 -0.3064 -0.1634 -0.2231 ## Early -0.0619 . -0.2029 -0.2945 -0.1627 -0.2189 ## Late 0.0486 -0.0432 . -0.1828 -0.0493 -0.1058 ## Late_plus 0.0822 -0.0086 -0.0566 . -0.0181 -0.0741 ## Recommended 0.0273 -0.0748 -0.1210 -0.2160 . -0.1296 ## Recommended_plus 0.0771 -0.0215 -0.0680 -0.1625 -0.0201 . ## ## Upper 95%-confidence limit: ## control Early Late Late_plus Recommended Recommended_plus ## control . 0.0619 -0.0486 -0.0822 -0.0273 -0.0771 ## Early 0.1647 . 0.0432 0.0086 0.0748 0.0215 ## Late 0.2138 0.2029 . 0.0566 0.1210 0.0680 ## Late_plus 0.3064 0.2945 0.1828 . 0.2160 0.1625 ## Recommended 0.1634 0.1627 0.0493 0.0181 . 0.0201 ## Recommended_plus 0.2231 0.2189 0.1058 0.0741 0.1296 . ## ## Quantifying heterogeneity / inconsistency: ## tau^2 = 0.0120; tau = 0.1095; I^2 = 60.8% [47.6%; 70.7%] ## ## Tests of heterogeneity (within designs) and inconsistency (between designs): ## Q d.f. p-value ## Total 140.45 55 &lt; 0.0001 ## Within designs 93.96 44 &lt; 0.0001 ## Between designs 46.49 11 &lt; 0.0001 Now let’s visualise this as a forest plot. forest( net_con, reference.group = 1, rightcols = c(&quot;effect&quot;, &quot;ci&quot;, &quot;Pscore&quot;), rightlabs = &quot;P-Score&quot;, small.values = &quot;bad&quot; ) The netmeta analysis suggests the spray schedule commencing early are no different to any other treatment including the no spray control. It estimates the mean is very similar to the recommended treatments. The Recommended_plus and Late_plus treatments show higher mean estimates, however are not significantly different from the Early estimate. netgraph( net_con, plastic = FALSE, col = usq_cols(&quot;support orange&quot;), thickness = &quot;number.of.studies&quot;, points = FALSE, col.points = usq_cols(&quot;usq charcoal&quot;), cex.points = 1, number.of.studies = TRUE, cex.number.of.studies = 1, col.number.of.studies = &quot;black&quot;, bg.number.of.studies = usq_cols(&quot;support orange&quot;), multiarm = FALSE, col.multiarm = usq_cols(&quot;support turquiose&quot;), pos.number.of.studies = 0.4 ) netleague(net_con) ## League table (fixed effects model): ## ## control -0.1047 [-0.1936; -0.0157] ## -0.0489 [-0.1273; 0.0295] Early ## -0.0738 [-0.1103; -0.0372] -0.0249 [-0.1057; 0.0560] ## -0.1726 [-0.2274; -0.1178] -0.1236 [-0.2156; -0.0317] ## -0.0696 [-0.1050; -0.0341] -0.0206 [-0.1019; 0.0606] ## -0.1256 [-0.1668; -0.0843] -0.0766 [-0.1599; 0.0066] ## ## -0.0674 [-0.1122; -0.0226] -0.2666 [-0.3469; -0.1862] ## -0.1503 [-0.2707; -0.0299] . ## Late -0.0684 [-0.1392; 0.0024] ## -0.0988 [-0.1521; -0.0455] Late_plus ## 0.0042 [-0.0304; 0.0388] 0.1030 [ 0.0474; 0.1586] ## -0.0518 [-0.0916; -0.0120] 0.0470 [-0.0080; 0.1020] ## ## -0.0615 [-0.0980; -0.0251] -0.1243 [-0.1680; -0.0807] ## -0.0778 [-0.2109; 0.0554] -0.1506 [-0.2839; -0.0172] ## 0.0041 [-0.0350; 0.0432] -0.0473 [-0.0944; -0.0002] ## 0.1602 [ 0.0643; 0.2561] -0.0018 [-0.0742; 0.0706] ## Recommended -0.0433 [-0.0856; -0.0010] ## -0.0560 [-0.0966; -0.0154] Recommended_plus ## ## League table (random effects model): ## ## control -0.0858 [-0.2149; 0.0433] ## -0.0514 [-0.1647; 0.0619] Early ## -0.1312 [-0.2138; -0.0486] -0.0798 [-0.2029; 0.0432] ## -0.1943 [-0.3064; -0.0822] -0.1429 [-0.2945; 0.0086] ## -0.0953 [-0.1634; -0.0273] -0.0440 [-0.1627; 0.0748] ## -0.1501 [-0.2231; -0.0771] -0.0987 [-0.2189; 0.0215] ## ## -0.1334 [-0.2262; -0.0406] -0.2425 [-0.3756; -0.1093] ## -0.1196 [-0.2756; 0.0364] . ## Late -0.0441 [-0.1914; 0.1032] ## -0.0631 [-0.1828; 0.0566] Late_plus ## 0.0359 [-0.0493; 0.1210] 0.0990 [-0.0181; 0.2160] ## -0.0189 [-0.1058; 0.0680] 0.0442 [-0.0741; 0.1625] ## ## -0.0948 [-0.1642; -0.0253] -0.1449 [-0.2206; -0.0691] ## -0.0850 [-0.2475; 0.0775] -0.1621 [-0.3237; -0.0004] ## 0.0368 [-0.0581; 0.1318] -0.0510 [-0.1467; 0.0446] ## 0.1455 [-0.0163; 0.3073] 0.0047 [-0.1563; 0.1658] ## Recommended -0.0541 [-0.1303; 0.0221] ## -0.0548 [-0.1296; 0.0201] Recommended_plus decomp.design(net_con) ## Q statistics to assess homogeneity / consistency ## ## Q df p-value ## Total 140.45 55 &lt; 0.0001 ## Within designs 93.96 44 &lt; 0.0001 ## Between designs 46.49 11 &lt; 0.0001 ## ## Design-specific decomposition of within-designs Q statistic ## ## Design Q df p-value ## control:Late_plus 0.70 2 0.7036 ## control:Recommended 0.10 1 0.7469 ## control:Early:Late:Recommended:Recommended_plus 28.07 20 0.1077 ## control:Late:Late_plus:Recommended:Recommended_plus 18.73 8 0.0164 ## control:Late:Recommended:Recommended_plus 0.66 3 0.8830 ## control:Recommended:Recommended_plus 45.70 10 &lt; 0.0001 ## ## Between-designs Q statistic after detaching of single designs ## ## Detached design Q df p-value ## control:Early 42.19 10 &lt; 0.0001 ## control:Late_plus 45.30 10 &lt; 0.0001 ## control:Recommended 45.51 10 &lt; 0.0001 ## control:Early:Late:Recommended:Recommended_plus 34.79 7 &lt; 0.0001 ## control:Late:Late_plus:Recommended:Recommended_plus 21.47 7 0.0031 ## control:Late:Recommended:Recommended_plus 23.37 8 0.0029 ## control:Recommended:Recommended_plus 45.22 9 &lt; 0.0001 ## ## Q statistic to assess consistency under the assumption of ## a full design-by-treatment interaction random effects model ## ## Q df p-value tau.within tau2.within ## Between designs 11.15 11 0.4309 0.1063 0.0113 netsplit(net_con) ## Separate indirect from direct evidence (SIDE) using back-calculation method ## ## Fixed effects model: ## ## comparison k prop nma direct indir. Diff z p-value ## control:Early 7 0.78 -0.0489 -0.1047 0.1463 -0.2510 -2.61 0.0091 ## control:Late 11 0.67 -0.0738 -0.0674 -0.0865 0.0192 0.48 0.6278 ## control:Late_plus 6 0.47 -0.1726 -0.2666 -0.0908 -0.1758 -3.14 0.0017 ## control:Recommended 19 0.94 -0.0696 -0.0615 -0.1991 0.1375 1.78 0.0745 ## control:Recommended_plus 17 0.89 -0.1256 -0.1243 -0.1358 0.0115 0.17 0.8666 ## Early:Late 6 0.45 -0.0249 -0.1503 0.0782 -0.2285 -2.76 0.0058 ## Early:Late_plus 0 0 -0.1236 . -0.1236 . . . ## Early:Recommended 6 0.37 -0.0206 -0.0778 0.0133 -0.0911 -1.06 0.2882 ## Early:Recommended_plus 6 0.39 -0.0766 -0.1506 -0.0295 -0.1210 -1.39 0.1645 ## Late:Late_plus 3 0.57 -0.0988 -0.0684 -0.1384 0.0700 1.28 0.2018 ## Late:Recommended 11 0.78 0.0042 0.0041 0.0047 -0.0006 -0.01 0.9895 ## Late:Recommended_plus 11 0.71 -0.0518 -0.0473 -0.0630 0.0157 0.35 0.7268 ## Late_plus:Recommended 3 0.34 0.1030 0.1602 0.0741 0.0861 1.43 0.1516 ## Late_plus:Recommended_plus 3 0.58 0.0470 -0.0018 0.1137 -0.1155 -2.03 0.0421 ## Recommended:Recommended_plus 17 0.92 -0.0560 -0.0433 -0.2017 0.1584 2.08 0.0376 ## ## Random effects model: ## ## comparison k prop nma direct indir. Diff z p-value ## control:Early 7 0.77 -0.0514 -0.0858 0.0640 -0.1498 -1.09 0.2757 ## control:Late 11 0.79 -0.1312 -0.1334 -0.1228 -0.0106 -0.10 0.9192 ## control:Late_plus 6 0.71 -0.1943 -0.2425 -0.0770 -0.1654 -1.31 0.1888 ## control:Recommended 19 0.96 -0.0953 -0.0948 -0.1089 0.0141 0.08 0.9351 ## control:Recommended_plus 17 0.93 -0.1501 -0.1449 -0.2187 0.0739 0.51 0.6102 ## Early:Late 6 0.62 -0.0798 -0.1196 -0.0142 -0.1054 -0.81 0.4159 ## Early:Late_plus 0 0 -0.1429 . -0.1429 . . . ## Early:Recommended 6 0.53 -0.0440 -0.0850 0.0030 -0.0880 -0.72 0.4688 ## Early:Recommended_plus 6 0.55 -0.0987 -0.1621 -0.0204 -0.1417 -1.15 0.2507 ## Late:Late_plus 3 0.66 -0.0631 -0.0441 -0.1001 0.0560 0.43 0.6642 ## Late:Recommended 11 0.80 0.0359 0.0368 0.0318 0.0050 0.05 0.9633 ## Late:Recommended_plus 11 0.83 -0.0189 -0.0510 0.1329 -0.1839 -1.58 0.1151 ## Late_plus:Recommended 3 0.52 0.0990 0.1455 0.0479 0.0976 0.82 0.4140 ## Late_plus:Recommended_plus 3 0.54 0.0442 0.0047 0.0904 -0.0857 -0.71 0.4790 ## Recommended:Recommended_plus 17 0.96 -0.0548 -0.0541 -0.0731 0.0190 0.09 0.9264 ## ## Legend: ## comparison - Treatment comparison ## k - Number of studies providing direct evidence ## prop - Direct evidence proportion ## nma - Estimated treatment effect (MD) in network meta-analysis ## direct - Estimated treatment effect (MD) derived from direct evidence ## indir. - Estimated treatment effect (MD) derived from indirect evidence ## Diff - Difference between direct and indirect treatment estimates ## z - z-value of test for disagreement (direct versus indirect) ## p-value - p-value of test for disagreement (direct versus indirect) nm1 &lt;- netmeasures(net_con) plot( nm1$meanpath, nm1$minpar, pch = &quot;&quot;, xlab = &quot;Mean path length&quot;, ylab = &quot;Minimal parallelism&quot; ) text(nm1$meanpath, nm1$minpar, names(nm1$meanpath), cex = 0.8) save(efficacy, PM_MB_dat, PM_mv, contrast_Ssum, file = here(&quot;cache/Meta-analysisData.Rdata&quot;)) "]
]
