[
["index.html", "A meta-analysis of powdery mildew yield loss mitigation strategies in Australian mungbean 1 Home 1.1 Contents 1.2 Other research questions, which are not the focus of this study 1.3 Possible sources of variation in this analysis.", " A meta-analysis of powdery mildew yield loss mitigation strategies in Australian mungbean Paul Melloy, Emerson Del Ponte and Adam H. Sparks 10 August, 2020 1 Home This research compendium details the statistical analysis and methods of a meta-analysis of fungicide efficacy trials for controlling powdery mildew in mungbean. The meta-analysis’s main aim is to determine: When is the optimum time to spray fungicide to limit the effect of powdery mildew on mungbean yields? 1.1 Contents This compendium is broken down into seven sections: [Details of the experiments, which were included in the analysis][Studies considered in meta-analysis] [Preliminary data exploration which investigates possible variables that could influence the meta-analysis][Preliminary Analysis] [Fungicides][Fungicides] [Mungbean cultivar][Mungbean cultivars] [Row spacing][Row spacing] [Rainfall][Yield vs in-season rain] [When conditions become suitable for powdery mildew infection][Season range and first incidence] [Preparation of data for the meta-analysis][Prepare data for meta-analysis] [Meta-analysis of the effect of fungicide spray schedule on yield loss][Meta-analysis] [Meta-analysis of the effect of fungicide spray schedule on disease severity and yield loss][AUPDC meta-analysis] [Manuscript Wireframe][Manuscript wire frame] [Manuscript: A meta-analysis of fungicide use in mungbean to control for yield loss due to powdery mildew.][Manuscript] 1.2 Other research questions, which are not the focus of this study How has the first sign of powdery mildew changed between the seasons and experimental sites? Is there an ideal planting time, or fungicide management strategy, which could make use of powdery mildew defoliation during pod maturation resulting in an increased yield? Do infections that occur before flowering increase the probable yield loss? 1.3 Possible sources of variation in this analysis. Variability among host genotypes. The probable influence of season might be influenced by host genotype. This is because newer varieties were adopted into experimental trials as they were released. Between 2001 and 2015 mungbean genotype changed from Green Diamond, Berken, Crystal to Jade. Jade was the only cultivar used between 2015 and 2019. Estimations of plant maturity stages over each growing season. These estimations might able to be computed using APSIM. "],
["studies-considered-in-meta-analysis.html", "2 Studies considered in meta-analysis 2.1 Summary of trials 2.2 Powdery mildew rating scales 2.3 Experiment locations", " 2 Studies considered in meta-analysis This meta-analysis uses data collected by a number of researchers from the Department of Agriculture and Primary Industries and the University of Southern Queensland. It is worth noting in particular Professor Malcolm Riley’s and Dr. Sue Thompson’s effort in establishing and coordinating early field trials between 2010 and 2016. Studies were conducted in the following locations and years and were considered for inclusion in this analysis. 2001 Bongeen #1 Bongeen #2 2002 Hermitage #1 Hermitage #2 Kingaroy 2004 Redvale 2010 Hermitage Kingaroy 2011 Hermitage Kingaroy 2012 Gatton Kingaroy 2013 Premer Millmerran Marys Mount Goolhi 2015 Hermitage Dalby - Site abandoned due to insufficient/late disease infection Emerald 2016 Hermitage Kingaroy Emerald 2017 Missen Flats (Fogerty’s farm) Hermitage 2018 Wellcamp 2019 Hermitage 2.1 Summary of trials (#tab:data_summary)Description of Experiments Year Location Replicates per treatments Planting date First sign of disease Fungicide treatments 2001 Bongeen_1 5 2001-02-11 2001-03-16 7 2002 Bongeen_2 3 NA 2002-02-07 12 2002 Hermitage 3 - 6 2002-01-29 2002-03-19 13 2002 Hermitage 3 - 6 2002-02-12 2002-04-04 13 2002 Kingaroy 8 2002-02-12 2002-04-05 3 2002 Redvale 7 2004-02-21 2004-03-23 3 2010 Hermitage 3 2010-01-22 2010-03-18 15 2010 Kingaroy 3 2010-01-29 2010-03-26 15 2011 Hermitage 3 - 6 2011-01-24 2011-03-28 12 2011 Kingaroy 6 2011-02-02 2011-03-22 20 2012 Gatton 3 2012-02-20 2012-04-02 15 2012 Kingaroy 3 2012-02-03 2012-03-12 15 2013 Premer 3 2012-12-28 2013-02-28 11 2013 Marys Mount 3 - 4 2012-12-24 2013-03-16 11 2013 Goolhi 4 2013-01-23 2013-03-25 11 2013 Millmerran 4 2013-01-12 2013-03-13 11 2015 Hermitage 5 2015-01-19 2015-03-16 6 2015 Dalby 5 2015-01-06 2015-03-02 1 2016 Hermitage 4 2016-02-03 2016-03-08 7 2016 Kingaroy 4 2016-02-11 2016-03-09 7 2016 Emerald 4 2016-02-12 2016-03-17 7 2017 Hermitage 3 2017-02-13 2017-03-24 54 2017 Missen Flats 3 2017-01-27 2017-03-07 54 2018 Wellcamp 3 2018-02-13 2018-03-21 24 2019 Hermitage 6 2018-02-04 2018-04-12 4 2019 Hermitage 5 - 6 2018-02-18 2018-04-12 4 2.2 Powdery mildew rating scales 2001 - 2004 trials Trial data were obtained from a non-published manuscript. 2.2.1 1 - 5 powdery mildew rating scale Ratings for powdery mildew were on a 1 - 5 rating scale where 1 - No sign of disease 2 - 1 - 30 % diseased leaf area 3 - 31 - 65 % diseased leaf area 4 - 66 - 99 % diseased leaf area and 5 - Complete defoliation Comparing these trials which have not used the 1 - 9 rating scale will be converted using a percentage change. 2013 Field trials Trials from 2013 were all conducted by the Northern Growers Alliance (NGA). The raw data were obtained from Lawrie Price. NGA data were formatted to be compliant with the 1 - 9 rating scale used in all other experiments. Detailed code for the conversion can be found in the following vignette 191115_PMMB_DataWrangling_PM.Rmd. 2.2.2 1 - 9 powdery mildew rating scale 1 - No powdery mildew colonies observed on any plant 2 - Small colonies in lower 1/3 of canopy, up to 75 % of plants affected 3 - Colonies in lower 1/2 of canopy, &gt;75 % of plants affected 4 - Colonies in lower 2/3 of canopy, up to 7 5% of plants affected 5 - Colonies in lower 2/3 of canopy, &gt;75 % of plants affected 6 - Colonies in lower 2/3 of canopy, 100 % of plants affected 7 - Colonies in lower 2/3 of canopy of 10 0% of plants, some plants with colonies also in top 1/3 of canopy 8 - Colonies to top of plant with &gt;75 % of plants affected 9 - Colonies to top of plant with 100 % of plants affected and heavy leaf drop 2.3 Experiment locations The following map displays experiment locations which were considered for inclusion in this meta-analysis. "],
["import-and-format-data.html", "3 Import and Format Data 3.1 Non-wrangled trials 3.2 Import Libraries 3.3 Functions 3.4 Data wrangling for each trial", " 3 Import and Format Data 3.1 Non-wrangled trials Data from the three follow trials were input manually from either PDF or word files. - Gatton 2012 - Kingaroy 2012 - Emerald 2016 3.2 Import Libraries library(openxlsx) library(readxl) library(tidyr) library(dplyr) library(data.table) library(agricolae) library(here) source(here(&quot;R/import_data.R&quot;)) PM_MB_means &lt;- import_data() 3.3 Functions fold_data &lt;- function(new_DataFrame, template_DataFrame) { # This function formats a dataframe to have the same column order as a template data.frame # If columns are missing from the new_DataFrame that are in the template_DataFrame, it creates them # with NA values. # Columns in the new_DataFrame, which are not in the template_DataFrame are appended to the right-hand-side # of the new_DataFrame # Using this function assists in joining the two data.frames together so columns are in the same order for (i in colnames(new_DataFrame)) { if (i == colnames(new_DataFrame)[1]) { x1 &lt;- vector() } cnames1 &lt;- as.character(colnames(new_DataFrame)) cnames2 &lt;- as.character(colnames(template_DataFrame)) x1 &lt;- c(x1, match(i, cnames2, nomatch = NA)) # MAke a index vector for the location of new_DataFrame col names in template_DataFrame } new_DataFrame &lt;- as.data.frame(new_DataFrame) new_DataFrame[,cnames2[!(cnames2 %in% cnames1)]] &lt;- NA # adding column names to new_DataFrame which are in the template_DataFrame new_DataFrame &lt;- new_DataFrame[, c(cnames2, cnames1[is.na(x1)])] # adding columns to new_DataFrame not in template_DataFrame # arranges column names to new_DataFrame not in template_DataFrame return(new_DataFrame) } source(here(&quot;R/copy_class.R&quot;)) source(here(&quot;R/replace_data.R&quot;)) 3.4 Data wrangling for each trial 3.4.1 Hermitage 2010 Herm_10 &lt;- as.data.frame(read_xls(here( &quot;data/2010 PMmung hermitage RAW field book.xls&quot; ), sheet = &quot;For analysis&quot;), stringsAsFactors == FALSE) Herm_10 &lt;- Herm_10 %&gt;% mutate( trade_name = case_when( `Schedule!` == &quot;U/S&quot; ~ NA_character_, `Schedule!` == &quot;FirstsignC&quot; ~ &quot; &quot;, TRUE ~ &quot;Kendon&quot; ) ) %&gt;% mutate( fungicide = case_when( `Schedule!` == &quot;U/S&quot; ~ &quot;control&quot;, `Schedule!` == &quot;FirstsignC&quot; ~ &quot;carbendazim&quot;, TRUE ~ &quot;sulphur&quot; ) ) %&gt;% mutate(dose_ai.ha = case_when( `Schedule!` == &quot;U/S&quot; ~ 0, `Schedule!` == &quot;FirstsignC&quot; ~ 250, TRUE ~ 2400 )) %&gt;% mutate( fungicide_application_1 = case_when( `Schedule!` == &quot;Full Sp&quot; ~ as.Date(&quot;2010-02-19&quot;, format = &quot;%Y-%m-%d&quot;), `Schedule!` == &quot;Early Sp&quot; ~ as.Date(&quot;2010-02-19&quot;, format = &quot;%Y-%m-%d&quot;), `Schedule!` == &quot;FirstsignC&quot; ~ as.Date(&quot;2010-03-18&quot;, format = &quot;%Y-%m-%d&quot;), `Schedule!` == &quot;FirstsignS&quot; ~ as.Date(&quot;2010-03-18&quot;, format = &quot;%Y-%m-%d&quot;), `Schedule!` == &quot;U/S&quot; ~ as.Date(NA), TRUE ~ as.Date(NA) ) ) %&gt;% mutate( fungicide_application_2 = case_when( `Schedule!` == &quot;Full Sp&quot; ~ as.Date(&quot;2010-02-26&quot;, format = &quot;%Y-%m-%d&quot;), `Schedule!` == &quot;Early Sp&quot; ~ as.Date(&quot;2010-02-26&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA) ) ) %&gt;% mutate(fungicide_application_3 = case_when( `Schedule!` == &quot;Full Sp&quot; ~ as.Date(&quot;2010-03-05&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA) )) %&gt;% mutate(fungicide_application_4 = case_when( `Schedule!` == &quot;Full Sp&quot; ~ as.Date(&quot;2010-03-11&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA) )) %&gt;% mutate(fungicide_application_5 = case_when( `Schedule!` == &quot;Full Sp&quot; ~ as.Date(&quot;2010-03-18&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA) )) %&gt;% mutate(fungicide_application_6 = case_when( `Schedule!` == &quot;Full Sp&quot; ~ as.Date(&quot;2010-03-25&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA) )) %&gt;% mutate(fungicide_application_7 = case_when( `Schedule!` == &quot;Full Sp&quot; ~ as.Date(&quot;2010-03-07&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA) )) %&gt;% mutate( total_fungicide = case_when( `Schedule!` == &quot;Full Sp&quot; ~ 7, `Schedule!` == &quot;Early Sp&quot; ~ 2, `Schedule!` == &quot;FirstsignC&quot; ~ 1, `Schedule!` == &quot;FirstsignS&quot; ~ 1, `Schedule!` == &quot;U/S&quot; ~ 0, TRUE ~ 9999 ) ) Herm_10_dat &lt;- data.frame( trial_ref = &quot;mung0910/01&quot;, year = &quot;2010&quot;, location = &quot;Hermitage&quot;, host_genotype = Herm_10$`Cultivar!`, trial_design = &quot;RB&quot;, plot_length = Herm_10$`Length (m)`, plot_width = 4, plant_density = NA, row_spacing = 0.25, replicate = Herm_10$`Rep!`, planting_date = as.Date(&quot;2010-01-22&quot;), emergence_date = NA, flowering_date = NA, pod_fill_date = NA, mid_late_pod_fill = NA, first_sign_disease = as.Date(&quot;2010-03-18&quot;), trade_name = Herm_10$trade_name, fungicide_ai = Herm_10$fungicide, dose_ai.ha = Herm_10$dose_ai.ha, n_treatment = Herm_10$`Treat!`, fungicide_application_1 = Herm_10$fungicide_application_1, fungicide_application_2 = Herm_10$fungicide_application_2, fungicide_application_3 = Herm_10$fungicide_application_3, fungicide_application_4 = Herm_10$fungicide_application_4, fungicide_application_5 = Herm_10$fungicide_application_5, fungicide_application_6 = Herm_10$fungicide_application_6, fungicide_application_7 = Herm_10$fungicide_application_7, total_fungicide = Herm_10$total_fungicide, harvest_date = as.Date(&quot;2010-05-14&quot;), final_assessment = as.Date(&quot;2010-04-20&quot;), PM_final_severity = Herm_10$P.M.13wap, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = Herm_10$`Kg/ha` / 1000, stringsAsFactors = FALSE ) 3.4.1.1 AUDPC curve library(ggplot2) Herm_10_dat &lt;- cbind( Herm_10_dat, AUDPC = apply( data.frame(zero = 0, Herm_10[, c(&quot;P.M.9wap&quot;, &quot;P.M.11wap&quot;, &quot;P.M.13wap&quot;)] - 1), 1, FUN = audpc, dates = c((Herm_10_dat$first_sign_disease[1] - 7) - Herm_10_dat$planting_date[1], 9 * 7, 11 * 7, 13 * 7 ) ), AUDPS = apply( data.frame(zero = 0, Herm_10[, c(&quot;P.M.9wap&quot;, &quot;P.M.11wap&quot;, &quot;P.M.13wap&quot;)] - 1), 1, FUN = audps, dates = c((Herm_10_dat$first_sign_disease[1] - 7) - Herm_10_dat$planting_date[1], 9 * 7, 11 * 7, 13 * 7 ) ) ) Herm_10$PM_zero &lt;- 1 Herm_plot &lt;- melt( Herm_10, id.vars = c( &quot;Description!&quot;, &quot;Treat!&quot;, &quot;Rep!&quot;, &quot;Cultivar!&quot;, &quot;fungicide&quot;, &quot;total_fungicide&quot; ), measure.vars = c(&quot;PM_zero&quot;, &quot;P.M.9wap&quot;, &quot;P.M.11wap&quot;, &quot;P.M.13wap&quot;) ) ## Warning in melt(Herm_10, id.vars = c(&quot;Description!&quot;, &quot;Treat!&quot;, &quot;Rep!&quot;, ## &quot;Cultivar!&quot;, : The melt generic in data.table has been passed a data.frame ## and will attempt to redirect to the relevant reshape2 method; please note that ## reshape2 is deprecated, and this redirection is now deprecated as well. To ## continue using melt methods from reshape2 while both libraries are attached, ## e.g. melt.list, you can prepend the namespace like reshape2::melt(Herm_10). In ## the next version, this warning will become an error. Herm_plot &lt;- Herm_plot %&gt;% mutate( T_var = case_when( variable == &quot;PM_zero&quot; ~ as.numeric((Herm_10_dat$first_sign_disease[1] - 7) - Herm_10_dat$planting_date[1] ), variable == &quot;P.M.9wap&quot; ~ 9 * 7, variable == &quot;P.M.11wap&quot; ~ 11 * 7, variable == &quot;P.M.13wap&quot; ~ 13 * 7 ) ) Herm_plot$`Treat!` &lt;- as.factor(Herm_plot$`Treat!`) Herm_plot %&gt;% ggplot(aes( x = T_var, y = value, color = `Treat!`, shape = `Treat!` )) + geom_jitter(width = 1) + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at 47.785 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 29.215 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 7.3625e-017 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 796.09 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## 47.785 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 29.215 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 7.3625e-017 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 796.09 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at 47.785 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 29.215 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 7.3625e-017 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 796.09 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## 47.785 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 29.215 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 7.3625e-017 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 796.09 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at 47.785 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 29.215 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 7.3625e-017 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 796.09 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## 47.785 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 29.215 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 7.3625e-017 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 796.09 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at 47.785 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 29.215 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 7.3625e-017 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 796.09 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## 47.785 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 29.215 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 7.3625e-017 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 796.09 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at 47.785 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 29.215 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 7.3625e-017 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 796.09 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## 47.785 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 29.215 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 7.3625e-017 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 796.09 3.4.1.2 Treatment means Herm_10_m &lt;- Herm_10_dat %&gt;% group_by(trial_ref, year, location, host_genotype, trial_design, trade_name,fungicide_ai,dose_ai.ha,n_treatment) %&gt;% summarise(plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(replicate), planting_date = unique(planting_date), emergence_date = NA, flowering_date = NA, pod_fill_date = NA, mid_late_pod_fill = NA, first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), fungicide_application_4 = unique(fungicide_application_4), fungicide_application_5 = unique(fungicide_application_5), fungicide_application_6 = unique(fungicide_application_6), fungicide_application_6 = unique(fungicide_application_7), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), D_error_type = &quot;stdev&quot;, raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ host_genotype + factor(n_treatment), data = Herm_10_dat))[2,3], Y_Msquare = anova(lm(grain_yield.t.ha. ~ host_genotype + factor(n_treatment), data = Herm_10_dat))[2,3] ) ## `summarise()` regrouping output by &#39;trial_ref&#39;, &#39;year&#39;, &#39;location&#39;, &#39;host_genotype&#39;, &#39;trial_design&#39;, &#39;trade_name&#39;, &#39;fungicide_ai&#39;, &#39;dose_ai.ha&#39; (override with `.groups` argument) Herm_tentmp &lt;- Herm_10_dat %&gt;% group_by(host_genotype,n_treatment)%&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) ## `summarise()` regrouping output by &#39;host_genotype&#39; (override with `.groups` argument) Herm_10_m[order(Herm_10_m$n_treatment),&quot;disease_error&quot;] &lt;- Herm_tentmp[order(Herm_tentmp$n_treatment),&quot;disease_error&quot;] Herm_10_m[order(Herm_10_m$n_treatment),&quot;yield_error&quot;] &lt;- Herm_tentmp[order(Herm_tentmp$n_treatment),&quot;yield_error&quot;] Herm_10_m &lt;- fold_data(Herm_10_m, PM_MB_means) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Herm_10_m, new_data_column = c(&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## ## Row number/s from template data replaced: c(52, 59, 61, 65, 66) ## total replacements = 5/15 #ignore_columns = c(6,17,30:ncol(Herm_10_m)) write.csv( as.data.frame(Herm_10_m), here(&quot;cache/2010 PMmung Hermitage means.csv&quot;), row.names = FALSE ) 3.4.2 Hermitage 2011 3.4.2.1 Define treatments Herm_11 &lt;- as.data.frame(read_xls( here(&quot;data/pmhermratings2011.xls&quot;), sheet = &quot;Analyses factor&quot; ), stringsAsFactors = FALSE) Herm_11 &lt;- Herm_11 %&gt;% mutate(trade_name = case_when(`Treatment!` == &quot;1 spray AMI-X&quot; ~ &quot;Amistar Xtra&quot;, `Treatment!` == &quot;3 spray AMI-X&quot; ~ &quot;Amistar Xtra&quot;, `Treatment!` == &quot;1 spray SULPHUR&quot; ~ &quot;Kendon&quot;, `Treatment!` == &quot;3 spray SULPHUR&quot; ~ &quot;Kendon&quot;, `Treatment!` == &quot;1 spray FOLICUR&quot; ~ &quot;Folicur&quot;, TRUE ~ &quot;control&quot;))%&gt;% mutate(fungicide_ai = case_when(`Treatment!` == &quot;1 spray AMI-X&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, `Treatment!` == &quot;3 spray AMI-X&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, `Treatment!` == &quot;1 spray SULPHUR&quot; ~ &quot;sulphur&quot;, `Treatment!` == &quot;3 spray SULPHUR&quot; ~ &quot;sulphur&quot;, `Treatment!` == &quot;1 spray FOLICUR&quot; ~ &quot;tebuconazole&quot;, TRUE ~ &quot;control&quot;))%&gt;% mutate(dose_ai.ha = case_when(`Treatment!` == &quot;1 spray AMI-X&quot; ~ 120, `Treatment!` == &quot;3 spray AMI-X&quot; ~ 120, `Treatment!` == &quot;1 spray SULPHUR&quot; ~ 3000, `Treatment!` == &quot;3 spray SULPHUR&quot; ~ 3000, `Treatment!` == &quot;1 spray FOLICUR&quot; ~ 62.35, TRUE ~ 0))%&gt;% mutate(fungicide_application_1 = case_when(`Treatment!` == &quot;1 spray AMI-X&quot; ~ as.Date(&quot;2011-03-28&quot;, format = &quot;%Y-%m-%d&quot;), `Treatment!` == &quot;3 spray AMI-X&quot; ~ as.Date(&quot;2011-02-28&quot;, format = &quot;%Y-%m-%d&quot;), `Treatment!` == &quot;1 spray SULPHUR&quot; ~ as.Date(&quot;2011-03-28&quot;, format = &quot;%Y-%m-%d&quot;), `Treatment!` == &quot;3 spray SULPHUR&quot; ~ as.Date(&quot;2011-02-28&quot;, format = &quot;%Y-%m-%d&quot;), `Treatment!` == &quot;1 spray FOLICUR&quot; ~ as.Date(&quot;2011-03-28&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(`Treatment!` == &quot;3 spray AMI-X&quot; ~ as.Date(&quot;2011-03-14&quot;, format = &quot;%Y-%m-%d&quot;), `Treatment!` == &quot;3 spray SULPHUR&quot; ~ as.Date(&quot;2011-03-14&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(`Treatment!` == &quot;3 spray AMI-X&quot; ~ as.Date(&quot;2011-03-14&quot;, format = &quot;%Y-%m-%d&quot;), `Treatment!` == &quot;3 spray SULPHUR&quot; ~ as.Date(&quot;2011-03-14&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(total_fungicide = case_when(`Treatment!` == &quot;1 spray AMI-X&quot; ~ 1, `Treatment!` == &quot;3 spray AMI-X&quot; ~ 3, `Treatment!` == &quot;1 spray SULPHUR&quot; ~ 1, `Treatment!` == &quot;3 spray SULPHUR&quot; ~ 3, `Treatment!` == &quot;1 spray FOLICUR&quot; ~ 1, TRUE ~ 0)) 3.4.2.2 Input trial data Herm_11_dat &lt;- data.frame(trial_ref = &quot;mung1011/01&quot;, year = &quot;2011&quot;, location = &quot;Hermitage&quot;, host_genotype = Herm_11$`Cultivar!`, trial_design = &quot;RCB&quot;, plot_length = 11, plot_width = 4, plant_density = NA, row_spacing = 0.75, replicate = Herm_11$`Rep!`, planting_date = as.Date(&quot;2011-01-24&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = NA, flowering_date = as.Date(&quot;2011-03-22&quot;, format = &quot;%Y-%m-%d&quot;), pod_fill_date = NA, mid_late_pod_fill = NA, first_sign_disease = as.Date(&quot;2011-03-28&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(Herm_11$trade_name), fungicide_ai = Herm_11$fungicide_ai, dose_ai.ha = Herm_11$dose_ai.ha, n_treatment = Herm_11$Tr, fungicide_application_1 = Herm_11$fungicide_application_1, fungicide_application_2 = Herm_11$fungicide_application_2, fungicide_application_3 = Herm_11$fungicide_application_3, total_fungicide = Herm_11$total_fungicide, harvest_date = as.Date(&quot;2011-04-25&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2011-04-11&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = Herm_11$`P.M. 11 w.a.p.`, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = Herm_11$`Yld Kg/ha`, stringsAsFactors = FALSE) 3.4.2.3 AUDPC curve Herm_11_dat &lt;- cbind(Herm_11_dat, AUDPC = apply(data.frame(zero = rep(0,42), wap11 = Herm_11[,c(&quot;P.M. 11 w.a.p.&quot;)]-1),1, FUN = audpc, dates = c((as.Date(&quot;2011-03-28&quot;, format = &quot;%Y-%m-%d&quot;)-7)- as.Date(&quot;2011-01-24&quot;, format = &quot;%Y-%m-%d&quot;), 77) ), AUDPS = apply(data.frame(zero = rep(0,42), wap11 = Herm_11[,c(&quot;P.M. 11 w.a.p.&quot;)]-1), 1, FUN = audps, dates = c((as.Date(&quot;2011-03-28&quot;, format = &quot;%Y-%m-%d&quot;)-7)- as.Date(&quot;2011-01-24&quot;, format = &quot;%Y-%m-%d&quot;), 77) ) ) Herm_11$PM_zero &lt;- 1 Herm11_plot &lt;- melt(Herm_11, id.vars = c(&quot;Treatment!&quot;, &quot;Cultivar!&quot;,&quot;Tr&quot;,&quot;Rep!&quot;,&quot;fungicide_ai&quot;,&quot;total_fungicide&quot;), measure.vars = c(&quot;PM_zero&quot;,&quot;P.M. 11 w.a.p.&quot;)) Herm11_plot &lt;- Herm11_plot %&gt;% mutate(T_var = case_when(variable == &quot;PM_zero&quot; ~ as.numeric((Herm_11_dat$first_sign_disease[1]-7) - Herm_11_dat$planting_date[1]), variable == &quot;P.M. 11 w.a.p.&quot; ~ 11*7)) Herm11_plot$`Treatment!` &lt;- as.factor(Herm11_plot$`Treatment!`) Herm11_plot %&gt;% ggplot(aes(x = T_var, y = value, color = `Treatment!`, shape = `Treatment!`))+ geom_jitter(width = .5, height = 0.05)+ geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; 3.4.2.4 Treatment means Herm_11_dat[Herm_11_dat$n_treatment == 5, &quot;n_treatment&quot;] &lt;- 1 Herm_11_dat[Herm_11_dat$n_treatment == 12, &quot;n_treatment&quot;] &lt;- 8 Herm_11_m &lt;- Herm_11_dat %&gt;% group_by(trial_ref, year, location, host_genotype, trial_design, trade_name,fungicide_ai,dose_ai.ha,n_treatment) %&gt;% summarise(plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(replicate), planting_date = unique(planting_date), emergence_date = NA, flowering_date = unique(flowering_date), pod_fill_date = NA, mid_late_pod_fill = NA, first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha./1000, na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha./1000, na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ host_genotype + factor(n_treatment), data = Herm_11_dat[Herm_11_dat$fungicide_ai == &quot;tebuconazole&quot; | Herm_11_dat$fungicide_ai == &quot;control&quot; ,]))[2,3], Y_Msquare = anova(lm(grain_yield.t.ha./1000 ~ factor(n_treatment) + host_genotype, data = Herm_11_dat[Herm_11_dat$fungicide_ai == &quot;tebuconazole&quot; | Herm_11_dat$fungicide_ai == &quot;control&quot; ,]))[1,3] ) ## `summarise()` regrouping output by &#39;trial_ref&#39;, &#39;year&#39;, &#39;location&#39;, &#39;host_genotype&#39;, &#39;trial_design&#39;, &#39;trade_name&#39;, &#39;fungicide_ai&#39;, &#39;dose_ai.ha&#39; (override with `.groups` argument) Herm_tmp &lt;- Herm_11_dat %&gt;% group_by(host_genotype,n_treatment)%&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha./1000, na.rm = TRUE)) ## `summarise()` regrouping output by &#39;host_genotype&#39; (override with `.groups` argument) Herm_11_m[order(Herm_11_m$n_treatment),&quot;disease_error&quot;] &lt;- Herm_tmp[order(Herm_tmp$n_treatment),&quot;disease_error&quot;] Herm_11_m[order(Herm_11_m$n_treatment),&quot;yield_error&quot;] &lt;- Herm_tmp[order(Herm_tmp$n_treatment),&quot;yield_error&quot;] Herm_11_m &lt;- fold_data(Herm_11_m, PM_MB_means) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Herm_11_m, new_data_column = c(&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## No data changed 0/12 write.csv( as.data.frame(Herm_11_m), here(&quot;cache/2011 PMmung Herm means.csv&quot;), row.names = FALSE ) 3.4.3 Kingaroy 2011 King_11 &lt;- as.data.frame(read_xls( here(&quot;data/pmKing ratings2011.xls&quot;), sheet = &quot;analyses&quot; ), stringsAsFactors = FALSE) ## New names: ## * `` -&gt; ...11 tmp1 &lt;- do.call(rbind.data.frame, strsplit(King_11$`Treatment!`, &quot; &quot;)) colnames(tmp1) &lt;- c(&quot;cultivar&quot; , &quot;spray_n&quot;, &quot;spray&quot;, &quot;fungicide&quot;) King_11 &lt;- cbind(tmp1, King_11) King_11$spray_n &lt;- as.numeric(as.character(King_11$spray_n)) 3.4.3.1 Define treatment data King_11 &lt;- King_11 %&gt;% mutate(trade_name = case_when(fungicide == &quot;AMIS-X&quot; ~ &quot;Amistar Xtra&quot;, fungicide == &quot;SULPHUR&quot; ~ &quot;Kendon&quot;, fungicide == &quot;FOLICUR&quot; ~ &quot;Folicur&quot;, TRUE ~ &quot;control&quot;))%&gt;% mutate(fungicide_ai = case_when(fungicide == &quot;AMIS-X&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, fungicide == &quot;SULPHUR&quot; ~ &quot;sulphur&quot;, fungicide == &quot;FOLICUR&quot; ~ &quot;tebuconazole&quot;, TRUE ~ &quot;control&quot;))%&gt;% mutate(dose_ai.ha = case_when(fungicide == &quot;AMIS-X&quot; ~ 120, fungicide == &quot;SULPHUR&quot; ~ 3000, fungicide == &quot;FOLICUR&quot; ~ 62.35, TRUE ~ 0))%&gt;% mutate(fungicide_application_1 = case_when(spray_n == 1 ~ as.Date(&quot;2011-03-23&quot;, format = &quot;%Y-%m-%d&quot;), spray_n == 2 ~ as.Date(&quot;2011-03-23&quot;, format = &quot;%Y-%m-%d&quot;), spray_n == 3 ~ as.Date(&quot;2011-03-09&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(spray_n == 2 ~ as.Date(&quot;2011-04-13&quot;, format = &quot;%Y-%m-%d&quot;), spray_n == 3 ~ as.Date(&quot;2011-03-30&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(spray_n == 3 ~ as.Date(&quot;2011-04-12&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA))) 3.4.3.2 Input trial data King_11_dat &lt;- data.frame(trial_ref = &quot;mung1011/02&quot;, year = &quot;2011&quot;, location = &quot;Kingaroy&quot;, host_genotype = King_11$cultivar, trial_design = &quot;RCB&quot;, plot_length = 11, plot_width = 4, plant_density = NA, row_spacing = 0.75, replicate = King_11$`rep!`, planting_date = as.Date(&quot;2011-02-02&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = NA, flowering_date = NA, pod_fill_date = NA, mid_late_pod_fill = NA, first_sign_disease = as.Date(&quot;2011-03-22&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(King_11$trade_name), fungicide_ai = King_11$fungicide_ai, dose_ai.ha = King_11$dose_ai.ha, n_treatment = King_11$`trt!`, fungicide_application_1 = King_11$fungicide_application_1, fungicide_application_2 = King_11$fungicide_application_2, fungicide_application_3 = King_11$fungicide_application_3, total_fungicide = King_11$spray_n, harvest_date = as.Date(NA), final_assessment = as.Date(&quot;2011-05-11&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = King_11$`14 w.a.p.`, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(King_11$`Yld kg ha`), stringsAsFactors = FALSE) ## Warning in data.frame(trial_ref = &quot;mung1011/02&quot;, year = &quot;2011&quot;, location = ## &quot;Kingaroy&quot;, : NAs introduced by coercion 3.4.3.3 AUDPC curve library(ggplot2) King_11_dat &lt;- cbind(King_11_dat, AUDPC = apply(data.frame(zero = 0, King_11[,c(&quot;9 w.a.p.&quot;,&quot;11 w.a.p.&quot;,&quot;12 w.a.p.&quot;,&quot;14 w.a.p.&quot;)]-1), 1, FUN = audpc, dates = c((King_11_dat$first_sign_disease[1]-7)- King_11_dat$planting_date[1], 9*7,11*7,12*7,14*7) ), AUDPS = apply(data.frame(zero = 0, King_11[,c(&quot;9 w.a.p.&quot;,&quot;11 w.a.p.&quot;,&quot;12 w.a.p.&quot;,&quot;14 w.a.p.&quot;)]-1), 1, FUN = audps, dates = c((King_11_dat$first_sign_disease[1]-7)- King_11_dat$planting_date[1], 9*7,11*7,12*7,14*7) ) ) King_11$PM_zero &lt;- 1 King11_plot &lt;- reshape2::melt(King_11, id.vars = c(&quot;Treatment!&quot;,&quot;cultivar&quot;,&quot;rep!&quot;,&quot;spray_n&quot;,&quot;fungicide&quot;), measure.vars = c(&quot;PM_zero&quot;,&quot;9 w.a.p.&quot;,&quot;11 w.a.p.&quot;,&quot;12 w.a.p.&quot;,&quot;14 w.a.p.&quot;)) King11_plot &lt;- King11_plot %&gt;% mutate(T_var = case_when(variable == &quot;PM_zero&quot; ~ as.numeric((King_11_dat$first_sign_disease[1]-7) - King_11_dat$planting_date[1]), variable == &quot;9 w.a.p.&quot; ~ 9*7, variable == &quot;11 w.a.p.&quot; ~ 11*7, variable == &quot;12 w.a.p.&quot; ~ 12*7, variable == &quot;14 w.a.p.&quot; ~ 14 *7) ) King11_plot$Treat &lt;- paste0(King11_plot$fungicide,King11_plot$spray_n) King11_plot %&gt;% ggplot(aes(x = T_var, y = value, color = Treat, shape = Treat))+ geom_jitter(width = 0.7, height = 0.07)+ geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 3.4.3.4 Treatment means King_11_m &lt;- King_11_dat %&gt;% group_by(host_genotype, fungicide_ai,n_treatment) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), trade_name = unique(trade_name), location = unique(location), trial_design = unique(trial_design), dose_ai.ha = unique(dose_ai.ha), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(replicate), planting_date = unique(planting_date), emergence_date = NA, flowering_date = unique(flowering_date), pod_fill_date = NA, mid_late_pod_fill = NA, first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), #disease_error = sd(PM_final_severity, na.rm = TRUE), # this is commented because it never worked for some reason. D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE)/1000, raw_graded = NA, #yield_error = sd(grain_yield.t.ha./1000, na.rm = TRUE), # this is commented because it never worked for some reason. Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ host_genotype + factor(n_treatment), data = King_11_dat[King_11_dat$fungicide_ai == &quot;tebuconazole&quot; | King_11_dat$fungicide_ai == &quot;control&quot; ,]))[2,3], Y_Msquare = anova(lm(grain_yield.t.ha./1000 ~ factor(n_treatment) + host_genotype, data = King_11_dat[King_11_dat$fungicide_ai == &quot;tebuconazole&quot; | King_11_dat$fungicide_ai == &quot;control&quot; ,]))[1,3]) ## `summarise()` regrouping output by &#39;host_genotype&#39;, &#39;fungicide_ai&#39; (override with `.groups` argument) # For some wierd reason standard deviations are comming back NA in the code above # Because of n_treatment being converted to a factor I need to wrangle carefully here King_tmp &lt;- King_11_dat %&gt;% group_by(host_genotype, fungicide_ai,n_treatment) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha./1000, na.rm = TRUE)) ## `summarise()` regrouping output by &#39;host_genotype&#39;, &#39;fungicide_ai&#39; (override with `.groups` argument) King_11_m &lt;- left_join(King_11_m,King_tmp) ## Joining, by = c(&quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;n_treatment&quot;) King_11_m &lt;- fold_data(King_11_m, PM_MB_means) King_11_m &lt;- copy_class(PM_MB_means,King_11_m) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = King_11_m, new_data_column = c(&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## ## Row number/s from template data replaced: c(96, 101, 102, 104, 106, 108, 109, 112, 113) ## total replacements = 9/20 write.csv( King_11_m, here(&quot;cache/2011 PMmung Kingaroy means.csv&quot;),row.names = FALSE ) 3.4.4 Goolhi 2013 3.4.4.1 Convert disease scores for(D_assessment in c(&quot;16 DAT1&quot;, &quot;33DAT1&quot;)){ # Import final disease survey Goolhi.13 &lt;- as.data.frame( read_xlsx( path = here(&quot;data/AM1305 Fungicides for powdery mildew in mungbean - Goolhi.xlsx&quot;), sheet = D_assessment, range = &quot;A15:AG75&quot;, col_names = TRUE ) ) Goolhi.13 &lt;- Goolhi.13[order(Goolhi.13[,1],Goolhi.13[,2],Goolhi.13[,3],Goolhi.13[,4]),] # Replace empty cells / NAs with zeros for (i in 7:33) { Goolhi.13[is.na(Goolhi.13[, i]), i] &lt;- 0 } # This table gives the column references for each respective # location in the canopy # Calculate incidence # Sites 1 2 3 # low canopy c(7:9, 16:18, 25:27) # mid canopy c(10:12, 19:21, 28:30) # upp canopy c(13:15, 22:24, 31:33) incidence1 &lt;- vector(mode = &quot;numeric&quot;, length = length(Goolhi.13[, 1])) # Convert disease survey data to 1-9 Incidence rating scale for (i in seq_along(incidence1)) { # when incidence = 1 if (all(Goolhi.13[i, 7:33] == 0)) { incidence1[i] &lt;- 1 next() } # when incidence = 2 if (all(Goolhi.13[i, c(10:15, 19:24, 28, 33)] == 0) &amp;&amp; (sum(Goolhi.13[i, c(7:9, 16:18, 25:27)] &gt; 0) / length(Goolhi.13[i, c(7:9, 16:18, 25:27)])) &lt;= 0.75) { incidence1[i] &lt;- 2 next() } # when incidence = 3 if (all(Goolhi.13[i, c(13:15, 22:24, 31:33)] == 0) &amp;&amp; sum(Goolhi.13[i, c(10:12, 19:21, 28:30)] != 0) &lt;= 3 &amp;&amp; (sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] &gt; 0) / length(Goolhi.13[i, c(7:12, 16:21, 25:30)])) &gt; 0.75) { incidence1[i] &lt;- 3 } else{ # if it is in the lower half of the canopy and in less than 75% of plants then incidence = 2.5 if (all(Goolhi.13[i, c(13:15, 22:24, 31:33)] == 0) &amp;&amp; sum(Goolhi.13[i, c(10:12, 19:21, 28:30)] != 0) &lt;= 3 &amp;&amp; (sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] &gt; 0) / length(Goolhi.13[i, c(7:12, 16:21, 25:30)])) &lt;= 0.75) { incidence1[i] &lt;- 2.5 next() } } # when incidence = 4 if (all(Goolhi.13[i, c(13:15, 22:24, 31:33)] == 0) &amp;&amp; sum(Goolhi.13[i, c(10:12, 19:21, 28:30)] != 0) &gt; 3 &amp;&amp; (sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] &gt; 0) / length(Goolhi.13[i, c(7:12, 16:21, 25:30)])) &lt;= 0.75) { incidence1[i] &lt;- 4 next() } # when incidence = 5 if (all(Goolhi.13[i, c(13:15, 22:24, 31:33)] == 0) &amp;&amp; sum(Goolhi.13[i, c(10:12, 19:21, 28:30)] != 0) &gt; 3 &amp;&amp; (sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] &gt; 0) / length(Goolhi.13[i, c(7:12, 16:21, 25:30)])) &gt; 0.75 &amp;&amp; any(Goolhi.13[i, c(7:12, 16:21, 25:30)] == 0)) { incidence1[i] &lt;- 5 next() } # when incidence = 6 if (all(Goolhi.13[i, c(13:15, 22:24, 31:33)] == 0) &amp;&amp; all(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0)) { incidence1[i] &lt;- 6 next() } # when incidence = 7 if (sum(Goolhi.13[i, c(13:15, 22:24, 31:33)] != 0) &lt;= 3 &amp;&amp; all(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0)) { incidence1[i] &lt;- 7 next() } # when incidence = 8 if ((sum(Goolhi.13[i, c(13:15, 22:24, 31:33)] != 0) &gt; 3 | sum(Goolhi.13[i, c(13:15, 22:24, 31:33)]) &lt;= 200) &amp;&amp; all(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0) &amp;&amp; (sum(Goolhi.13[i, 7:33] &gt; 0) / length(Goolhi.13[i, 7:33]) &gt; 0.75) &amp;&amp; sum(Goolhi.13[i, 7:33]) &lt;= 2000) { incidence1[i] &lt;- 8 next() } # when incidence = 9 if (sum(Goolhi.13[i, c(13:15, 22:24, 31:33)] != 0) &gt; 3 &amp;&amp; all(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0) &amp;&amp; (sum(Goolhi.13[i, 7:33] &gt; 0) / length(Goolhi.13[i, 7:33]) &gt; 0.75) &amp;&amp; sum(Goolhi.13[i, 7:33]) &gt; 2000) { incidence1[i] &lt;- 9 next() } # if not in the lower canopy but small colonies in mid and upper canopy if (all(Goolhi.13[i, c(7:9, 16:18, 25:27)] == 0) &amp;&amp; (sum(Goolhi.13[i, c(10:15, 19:24, 28, 33)] &gt; 0) / length(Goolhi.13[i, 7:33]) &lt;= 0.5)) { incidence1[i] &lt;- 2.5 next() } # incidence = 7.5 if (sum(Goolhi.13[i, c(13:15, 22:24, 31:33)] != 0) &gt; 3 &amp;&amp; sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0) &gt; 10 &amp;&amp; any(Goolhi.13[i, c(7:12, 16:21, 25:30)] == 0) &amp;&amp; (sum(Goolhi.13[i, 7:33] &gt; 0) / length(Goolhi.13[i, 7:33]) &gt; 0.7) &amp;&amp; sum(Goolhi.13[i, 7:33]) &lt;= 2000) { incidence1[i] &lt;- 7.5 next() } # incidence = 6.5 if (sum(Goolhi.13[i, c(13:15, 22:24, 31:33)] != 0) &gt; 3 &amp;&amp; sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0) &lt;= 12 &amp;&amp; sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0) &gt;= 10 &amp;&amp; (sum(Goolhi.13[i, 7:33] &gt; 0) / length(Goolhi.13[i, 7:33]) &lt;= 0.75) &amp;&amp; sum(Goolhi.13[i, 7:33]) &lt;= 2000) { incidence1[i] &lt;- 6.5 next() } # incidence = 4.5 if (sum(Goolhi.13[i, c(13:15, 22:24, 31:33)] != 0) &gt; 3 &amp;&amp; sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0) &lt; 10 &amp;&amp; sum(Goolhi.13[i, c(7:12, 16:21, 25:30)] != 0) &gt; 5 &amp;&amp; (sum(Goolhi.13[i, 7:33] &gt; 0) / length(Goolhi.13[i, 7:33]) &lt;= 0.75) &amp;&amp; sum(Goolhi.13[i, 7:33]) &lt;= 2000) { incidence1[i] &lt;- 4.5 next() } else{ # If none of the conditions are met give the incidence zero incidence1[i] &lt;- 0 } } # check data to make sure there are no zeros incidence1 length(Goolhi.13[incidence1 == 0, 1]) Goolhi.13[incidence1 == 0, ] hist(incidence1) # Re-format data-frame if(D_assessment == &quot;16 DAT1&quot;){ Goolhi.13D &lt;- Goolhi.13[,c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;)] Goolhi.13D$Inc_16D &lt;- incidence1 } if(D_assessment == &quot;33DAT1&quot;){ Goolhi.13D$Inc_33D &lt;- incidence1 } } ## New names: ## * `` -&gt; ...6 ## * `1` -&gt; `1...7` ## * `2` -&gt; `2...8` ## * `3` -&gt; `3...9` ## * `1` -&gt; `1...10` ## * ... ## New names: ## * `` -&gt; ...6 ## * `1` -&gt; `1...7` ## * `2` -&gt; `2...8` ## * `3` -&gt; `3...9` ## * `1` -&gt; `1...10` ## * ... #_____________________ # Read in Harvest data Goolhi.13Y &lt;- as.data.frame( read_xlsx( path = here(&quot;data/AM1305 Fungicides for powdery mildew in mungbean - Goolhi.xlsx&quot;), sheet = &quot;Yield&quot;, range = &quot;A15:F75&quot;, col_names = TRUE ) ) Goolhi.13Y &lt;- Goolhi.13Y[order(Goolhi.13Y[,1],Goolhi.13Y[,2],Goolhi.13Y[,3],Goolhi.13Y[,4]),] # Join disease and Yield data Goolhi_13 &lt;- left_join(Goolhi.13D, Goolhi.13Y) ## Joining, by = c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;) 3.4.4.2 Define treatment data Goolhi_13 &lt;- Goolhi_13 %&gt;% mutate(trade_name = case_when(Treat == &quot;1&quot; ~ &quot;control&quot;, Treat == &quot;2&quot; ~ &quot;Spin-flo&quot;, Treat == &quot;3&quot; ~ &quot;Tilt&quot;, Treat == &quot;4&quot; ~ &quot;Amistar Xtra&quot;, Treat == &quot;5&quot; ~ &quot;Amistar Xtra + adj&quot;, Treat == &quot;6&quot; ~ &quot;Cabrio&quot;, Treat == &quot;7&quot; ~ &quot;Spin-flo&quot;, Treat == &quot;8&quot; ~ &quot;Tilt&quot;, Treat == &quot;9&quot; ~ &quot;Amistar Xtra + adj&quot;, Treat == &quot;10&quot; ~ &quot;Cabrio&quot;, Treat == &quot;11&quot; ~ &quot;Tilt&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(fungicide_ai = case_when(Treat == &quot;1&quot; ~ &quot;control&quot;, Treat == &quot;2&quot; ~ &quot;carbendazim&quot;, Treat == &quot;3&quot; ~ &quot;propiconazole&quot;, Treat == &quot;4&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;5&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;6&quot; ~ &quot;pyraclostrobin&quot;, Treat == &quot;7&quot; ~ &quot;carbendazim&quot;, Treat == &quot;8&quot; ~ &quot;propiconazole&quot;, Treat == &quot;9&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;10&quot; ~ &quot;pyraclostrobin&quot;, Treat == &quot;11&quot; ~ &quot;propiconazole&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(dose_ai.ha = case_when(Treat == &quot;1&quot; ~ 0, Treat == &quot;2&quot; ~ 250, Treat == &quot;3&quot; ~ 62.5, Treat == &quot;4&quot; ~ 40, Treat == &quot;5&quot; ~ 40, Treat == &quot;6&quot; ~ 125, Treat == &quot;7&quot; ~ 250, Treat == &quot;8&quot; ~ 62.5, Treat == &quot;9&quot; ~ 40, Treat == &quot;10&quot; ~ 125, Treat == &quot;11&quot; ~ 62.5, TRUE ~ 0))%&gt;% mutate(fungicide_application_1 = case_when(Treat == &quot;1&quot; ~ as.Date(NA), Treat == &quot;2&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;3&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;4&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;5&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;6&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;7&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;8&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;9&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;10&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;11&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Treat == &quot;7&quot; ~ as.Date(&quot;2013-04-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;8&quot; ~ as.Date(&quot;2013-04-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;9&quot; ~ as.Date(&quot;2013-04-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;10&quot; ~ as.Date(&quot;2013-04-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;11&quot; ~ as.Date(&quot;2013-04-13&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(Treat == &quot;11&quot; ~ as.Date(&quot;2013-04-27&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Treat == &quot;1&quot; ~ 0, Treat == &quot;7&quot; ~ 2, Treat == &quot;8&quot; ~ 2, Treat == &quot;9&quot; ~ 2, Treat == &quot;10&quot; ~ 2, Treat == &quot;11&quot; ~ 3, TRUE ~ 1)) 3.4.4.3 Input trial data Goolhi_13_dat &lt;- data.frame(trial_ref = &quot;AM1305&quot;, year = &quot;2013&quot;, location = &quot;Goolhi&quot;, host_genotype = &quot;Crystal&quot;, trial_design = &quot;RB&quot;, plot_length = 12, plot_width = 4, plant_density = NA, row_spacing = 0.33, replicate = Goolhi_13$Rep, planting_date = as.Date(&quot;2013-01-23&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = NA, flowering_date = as.Date(&quot;2013-04-04&quot;, format = &quot;%Y-%m-%d&quot;), pod_fill_date = as.Date(&quot;2013-04-18&quot;, format = &quot;%Y-%m-%d&quot;), mid_late_pod_fill = NA, first_sign_disease = as.Date(&quot;2013-03-25&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(Goolhi_13$trade_name), fungicide_ai = Goolhi_13$fungicide_ai, dose_ai.ha = Goolhi_13$dose_ai.ha, n_treatment = Goolhi_13$Treat, fungicide_application_1 = Goolhi_13$fungicide_application_1, fungicide_application_2 = Goolhi_13$fungicide_application_2, fungicide_application_3 = Goolhi_13$fungicide_application_3, total_fungicide = Goolhi_13$spray_n, harvest_date = as.Date(&quot;2013-06-20&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2013-04-30&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = Goolhi_13$Inc_33D, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Goolhi_13$`Yield Kg/ha`)/1000 ) 3.4.4.4 AUDPC curve Goolhi_13_dat &lt;- cbind(Goolhi_13_dat, AUDPC = apply(data.frame(zero = 0, Goolhi_13[,c(&quot;Inc_16D&quot;,&quot;Inc_33D&quot;)]-1), 1, FUN = audpc, dates = c(1,16,33) ), AUDPS = apply(data.frame(zero = 0, Goolhi_13[,c(&quot;Inc_16D&quot;,&quot;Inc_33D&quot;)]-1), 1, FUN = audps, dates = c(1,16,33) ) ) 3.4.4.5 Calculating the treatment means Goolhi_13_m &lt;- Goolhi_13_dat %&gt;% group_by(trial_ref, year, location, host_genotype, trial_design, trade_name,fungicide_ai,dose_ai.ha,n_treatment) %&gt;% summarise(plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(replicate), planting_date = unique(planting_date), emergence_date = NA, flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), #disease_error = sd(PM_final_severity, na.rm = TRUE), # Commented because were not being calculated and included in the summary function D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, #yield_error = sd(grain_yield.t.ha., na.rm = TRUE), # Commented because were not being calculated and included in the summary function Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ factor(n_treatment), data = Goolhi_13_dat[Goolhi_13_dat$fungicide_ai == &quot;propiconazole&quot; | Goolhi_13_dat$fungicide_ai == &quot;control&quot; ,]))[1,3], Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment), data = Goolhi_13_dat[Goolhi_13_dat$fungicide_ai == &quot;propiconazole&quot; | Goolhi_13_dat$fungicide_ai == &quot;control&quot; ,]))[1,3] ) ## `summarise()` regrouping output by &#39;trial_ref&#39;, &#39;year&#39;, &#39;location&#39;, &#39;host_genotype&#39;, &#39;trial_design&#39;, &#39;trade_name&#39;, &#39;fungicide_ai&#39;, &#39;dose_ai.ha&#39; (override with `.groups` argument) # For some wierd reason standard deviations are comming back NA in the code above # Because of n_treatment being converted to a factor I need to wrangle carefully here Goolhi_tmp &lt;- Goolhi_13_dat %&gt;% group_by(n_treatment) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) ## `summarise()` ungrouping output (override with `.groups` argument) Goolhi_13_m &lt;- left_join(Goolhi_13_m, Goolhi_tmp) ## Joining, by = &quot;n_treatment&quot; Goolhi_13_m &lt;- fold_data(Goolhi_13_m, PM_MB_means) Goolhi_13_m &lt;- Goolhi_13_m[Goolhi_13_m$trade_name != &quot;other&quot;,] # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Goolhi_13_m, new_data_column = c(&quot;planting_date&quot;,&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## No data changed 0/11 write.csv( Goolhi_13_m, here(&quot;cache/AM1305_Goolhi_means.csv&quot;),row.names = FALSE ) 3.4.5 Mary’s Mount 2013 3.4.5.1 Convert disease scores for(D_assess in c(&quot;18 DAT1 18-3-2013&quot;,&quot;19 DAT1 19-3-2013&quot;)){ # Import disease survey MarysM.13D &lt;- as.data.frame( read_xlsx( path = here(&quot;data/AM1304 Fungicides for powdery mildew in mungbean - Marys Mount.xlsx&quot;), sheet = D_assess, range = &quot;A14:DC72&quot;, col_names = TRUE ) ) colnames(MarysM.13D)[1:4] &lt;- c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;) MarysM.13D &lt;- MarysM.13D[order(MarysM.13D[,1],MarysM.13D[,2],MarysM.13D[,3],MarysM.13D[,4]),] if(D_assess == &quot;18 DAT1 18-3-2013&quot;){ col_ref &lt;- 33:57 col_ref2 &lt;- 7:31 } if(D_assess == &quot;19 DAT1 19-3-2013&quot;){ col_ref &lt;- 58:107 col_ref2 &lt;- 7:56 } # Replace empty cells / NAs with zeros for (i in c(col_ref2,col_ref)) { MarysM.13D[is.na(MarysM.13D[, i]), i] &lt;- 0 } incidence2 &lt;- vector(mode = &quot;numeric&quot;, length = length(MarysM.13D[, 1])) # Convert disease survey data to 1-9 Incidence rating scale for (i in seq_along(incidence2)) { # incidence = 1 if (all(MarysM.13D[i, col_ref] == 0)) { incidence2[i] &lt;- 1 next() } # incidence = 2 if (sum(MarysM.13D[i, col_ref] == 2) == 0 &amp;&amp; sum(MarysM.13D[i, col_ref] == 1) == 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] == 3) / length(MarysM.13D[i, col_ref])) &lt;= 0.75) { incidence2[i] &lt;- 2 next() } # incidence = 3 if (sum(MarysM.13D[i, col_ref] == 1) == 0 &amp;&amp; sum(MarysM.13D[i, col_ref] == 2) &lt;= 8 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &gt; 0.75) { incidence2[i] &lt;- 3 } else{ # if it is in the lower half of the canopy and in less than 75% of plants then incidence = 2.5 if (sum(MarysM.13D[i, col_ref] == 1) == 0 &amp;&amp; sum(MarysM.13D[i, col_ref] == 2) &lt;= 8 &amp;&amp; sum(MarysM.13D[i, col_ref] == 3) &gt; 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &lt;= 0.75) { incidence2[i] &lt;- 2.5 next() } } # incidence = 4 if (sum(MarysM.13D[i, col_ref] == 1) == 0 &amp;&amp; sum(MarysM.13D[i, col_ref] == 2) &gt; 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &lt;= 0.75) { incidence2[i] &lt;- 4 next() } # incidence = 5 if (sum(MarysM.13D[i, col_ref] == 1) == 0 &amp;&amp; sum(MarysM.13D[i, col_ref] == 2) &gt; 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &gt; 0.75) { incidence2[i] &lt;- 5 next() } # incidence = 6 if (sum(MarysM.13D[i, col_ref] == 1) == 0 &amp;&amp; sum(MarysM.13D[i, col_ref] &gt;= 2) &gt; 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &gt; 0.95) { incidence2[i] &lt;- 6 next() } # incidence = 7 if (sum(MarysM.13D[i, col_ref] == 1) &lt;= 8 &amp;&amp; sum(MarysM.13D[i, col_ref] &gt;= 2) &gt; 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &gt; 0.95) { incidence2[i] &lt;- 7 next() } # incidence = 8 if (sum(MarysM.13D[i, col_ref] &gt;= 1) &gt; 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &gt; 0.75) { incidence2[i] &lt;- 8 next() } # incidence = 9 if (sum(MarysM.13D[i, col_ref] &gt;= 1) &gt; 0 &amp;&amp; sum(MarysM.13D[i, col_ref2] &gt;= (10 * 5 * 100 * 0.75)) &amp;&amp; # ten leaves from 5 sample sites with a maximum % leaf area infected with PM of 100% * 0.75 as a threshold for leaf drop (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &gt; 0.75) { incidence2[i] &lt;- 9 next() } # if there are few (&lt; 10%) leaves with very small infections in all parts of the canopy OR # if there is a stray colony on a upper leaf in addition to all lower if (sum(MarysM.13D[i, col_ref] == 3) &gt;= 1 &amp;&amp; sum(MarysM.13D[i, col_ref] == 1) &lt;= 2 &amp;&amp; sum(MarysM.13D[i, col_ref] == 2) &lt;= 2 &amp;&amp; sum(MarysM.13D[i, col_ref2]) &lt;= 150) { incidence2[i] &lt;- 2.5 next() } # incidence = 7.5 In the upper canopy with less than 75% plants infected if (sum(MarysM.13D[i, col_ref] == 3) &gt; 0 &amp;&amp; sum(MarysM.13D[i, col_ref] == 2) &gt; 0 &amp;&amp; sum(MarysM.13D[i, col_ref] == 1) &gt; 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref]) &lt;= 0.75) &amp;&amp; sum(MarysM.13D[i, col_ref2]) &gt;= 2000) { incidence2[i] &lt;- 7.5 next() } # # incidence = 6.5 if (sum(MarysM.13D[i, col_ref] == 1) &gt; 3 &amp;&amp; sum(MarysM.13D[i, col_ref] &gt;= 2) &gt; 0 &amp;&amp; sum(MarysM.13D[i, col_ref2] &lt;= 500) &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref]) &gt;= 0.65)) { incidence2[i] &lt;- 6.5 next() } # # # incidence = 4.5 If PM is in the the lower and mid-canopy in less than 75% of plants and one or two in the upper canopy if (sum(MarysM.13D[i, col_ref] == 1) &lt;= 3 &amp;&amp; sum(MarysM.13D[i, col_ref] &gt;= 2) &gt; 0 &amp;&amp; (sum(MarysM.13D[i, col_ref] &gt; 0) / length(MarysM.13D[i, col_ref])) &lt;= 0.75) { incidence2[i] &lt;- 4.5 next() } else{ # If none of the conditions are met give the incidence zero incidence2[i] &lt;- 0 } }# End of incidence2 loop if(any(incidence2 == 0)){ warning(&quot;Code caluculated incidence on &#39;0&#39; which is off the incidence scale&quot;) } # Re-format data-frame if(D_assess == &quot;18 DAT1 18-3-2013&quot;){ MarysM.13D.1 &lt;- MarysM.13D[,c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;)] MarysM.13D.1$Inc_18D &lt;- incidence2 } if(D_assess == &quot;19 DAT1 19-3-2013&quot;){ MarysM.13D.1$Inc_19D &lt;- incidence2 } } #end of loop on disease observations ## New names: ## * Treat -&gt; Treat...1 ## * Rep -&gt; Rep...2 ## * Run -&gt; Run...3 ## * Plot -&gt; Plot...4 ## * `` -&gt; ...6 ## * ... ## New names: ## * `` -&gt; ...6 ## * `1` -&gt; `1...7` ## * `2` -&gt; `2...8` ## * `3` -&gt; `3...9` ## * `4` -&gt; `4...10` ## * ... write.csv( MarysM.13D.1, here(&quot;cache/AM1304-MaryMount-Disease_means.csv&quot;), row.names = FALSE ) # read in yield and format MarysM.13Y &lt;- as.data.frame( read_xlsx( path = here(&quot;data/AM1304 Fungicides for powdery mildew in mungbean - Marys Mount.xlsx&quot;), sheet = &quot;42 DAT1 Yield&quot;, range = &quot;A14:F58&quot;, col_names = TRUE ) ) MarysM.13Y$Treat &lt;- as.character(MarysM.13Y$Treat) MarysM.13Y$Rep &lt;- as.character(MarysM.13Y$Rep) MarysM.13Y &lt;- MarysM.13Y[order(MarysM.13Y[,1],MarysM.13Y[,2],MarysM.13Y[,3],MarysM.13Y[,4]),] MarysM_13 &lt;- left_join(MarysM.13D.1,MarysM.13Y) ## Joining, by = c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;) 3.4.5.2 Define treatment data MarysM_13 &lt;- MarysM_13 %&gt;% mutate(trade_name = case_when(Treat == &quot;1&quot; ~ &quot;control&quot;, Treat == &quot;2&quot; ~ &quot;Spin-flo&quot;, Treat == &quot;3&quot; ~ &quot;Tilt&quot;, Treat == &quot;4&quot; ~ &quot;Amistar Xtra&quot;, Treat == &quot;5&quot; ~ &quot;Amistar Xtra + adj&quot;, Treat == &quot;6&quot; ~ &quot;Cabrio&quot;, Treat == &quot;7&quot; ~ &quot;Spin-flo&quot;, Treat == &quot;8&quot; ~ &quot;Tilt&quot;, Treat == &quot;9&quot; ~ &quot;Amistar Xtra + adj&quot;, Treat == &quot;10&quot; ~ &quot;Cabrio&quot;, Treat == &quot;11&quot; ~ &quot;Tilt&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(fungicide_ai = case_when(Treat == &quot;1&quot; ~ &quot;control&quot;, Treat == &quot;2&quot; ~ &quot;carbendazim&quot;, Treat == &quot;3&quot; ~ &quot;propiconazole&quot;, Treat == &quot;4&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;5&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;6&quot; ~ &quot;pyraclostrobin&quot;, Treat == &quot;7&quot; ~ &quot;carbendazim&quot;, Treat == &quot;8&quot; ~ &quot;propiconazole&quot;, Treat == &quot;9&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;10&quot; ~ &quot;pyraclostrobin&quot;, Treat == &quot;11&quot; ~ &quot;propiconazole&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(dose_ai.ha = case_when(Treat == &quot;1&quot; ~ 0, Treat == &quot;2&quot; ~ 250, Treat == &quot;3&quot; ~ 62.5, Treat == &quot;4&quot; ~ 40, Treat == &quot;5&quot; ~ 40, Treat == &quot;6&quot; ~ 125, Treat == &quot;7&quot; ~ 250, Treat == &quot;8&quot; ~ 62.5, Treat == &quot;9&quot; ~ 40, Treat == &quot;10&quot; ~ 125, Treat == &quot;11&quot; ~ 62.5, TRUE ~ 0))%&gt;% mutate(fungicide_application_1 = case_when(Treat == &quot;1&quot; ~ as.Date(NA), Treat == &quot;2&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;3&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;4&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;5&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;6&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;7&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;8&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;9&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;10&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;11&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Treat == &quot;7&quot; ~ as.Date(&quot;2013-03-18&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;8&quot; ~ as.Date(&quot;2013-03-18&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;9&quot; ~ as.Date(&quot;2013-03-18&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;10&quot; ~ as.Date(&quot;2013-03-18&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;11&quot; ~ as.Date(&quot;2013-03-18&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(Treat == &quot;11&quot; ~ as.Date(&quot;2013-04-02&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Treat == &quot;1&quot; ~ 0, Treat == &quot;2&quot; ~ 1, Treat == &quot;3&quot; ~ 1, Treat == &quot;4&quot; ~ 1, Treat == &quot;5&quot; ~ 1, Treat == &quot;6&quot; ~ 1, Treat == &quot;7&quot; ~ 2, Treat == &quot;8&quot; ~ 2, Treat == &quot;9&quot; ~ 2, Treat == &quot;10&quot; ~ 2, Treat == &quot;11&quot; ~ 2, # third spray not applied ? TRUE ~ 0)) 3.4.5.3 Input trial data MarysM_13_dat &lt;- data.frame(trial_ref = &quot;AM1304&quot;, year = &quot;2013&quot;, location = &quot;Marys Mount&quot;, host_genotype = &quot;Crystal&quot;, trial_design = &quot;RCB&quot;, plot_length = 12, plot_width = 4, plant_density = NA, row_spacing = 1, replicate = MarysM_13$Rep, planting_date = as.Date(&quot;2012-12-24&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = NA, flowering_date = NA, pod_fill_date = as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), mid_late_pod_fill = NA, first_sign_disease = as.Date(&quot;2013-03-16&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(MarysM_13$trade_name), fungicide_ai = MarysM_13$fungicide_ai, dose_ai.ha = MarysM_13$dose_ai.ha, n_treatment = MarysM_13$Treat, fungicide_application_1 = MarysM_13$fungicide_application_1, fungicide_application_2 = MarysM_13$fungicide_application_2, fungicide_application_3 = MarysM_13$fungicide_application_3, total_fungicide = MarysM_13$spray_n, harvest_date = as.Date(&quot;2013-04-11&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2013-03-26&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = MarysM_13$Inc_19D, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(MarysM_13$`Yield Kg/ha`)/1000 ) 3.4.5.4 AUDPC curve MarysM_13_dat &lt;- cbind(MarysM_13_dat, AUDPC = apply(data.frame(zero = 0, MarysM_13[,c(&quot;Inc_18D&quot;,&quot;Inc_19D&quot;)]-1), 1, FUN = audpc, dates = c(1,12,12+19) ), AUDPS = apply(data.frame(zero = 0, MarysM_13[,c(&quot;Inc_18D&quot;,&quot;Inc_19D&quot;)]-1), 1, FUN = audps, dates = c(1,12,12+19) ) ) 3.4.5.5 Calculating the treatment means MarysM_13_m &lt;- MarysM_13_dat %&gt;% group_by(n_treatment) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), location = unique(location), host_genotype = unique(host_genotype), trial_design = unique(trial_design), trade_name = unique(trade_name), fungicide_ai = unique(fungicide_ai), dose_ai.ha = unique(dose_ai.ha), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = NA, flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), # this not calculating sd and returning NAs? D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ factor(n_treatment), data = MarysM_13_dat[MarysM_13_dat$fungicide_ai == &quot;propiconazole&quot; | MarysM_13_dat$fungicide_ai == &quot;control&quot; ,]))[1,3], Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment), data = MarysM_13_dat[MarysM_13_dat$fungicide_ai == &quot;propiconazole&quot; | MarysM_13_dat$fungicide_ai == &quot;control&quot; ,]))[1,3] ) ## Warning in mask$eval_all_summarise(quo): NAs introduced by coercion ## Warning in mask$eval_all_summarise(quo): NAs introduced by coercion ## `summarise()` ungrouping output (override with `.groups` argument) # For some wierd reason standard deviations are comming back NA in the code above # Because of n_treatment being converted to a factor I need to wrangle carefully here Mary_tmp &lt;- MarysM_13_dat %&gt;% group_by(n_treatment) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) ## `summarise()` ungrouping output (override with `.groups` argument) # Remive the existing yield_error columns and replace with new ones MarysM_13_m &lt;- left_join(MarysM_13_m[,colnames(MarysM_13_m)[c(-29,-33)]], Mary_tmp) ## Joining, by = &quot;n_treatment&quot; # Remove other plots not in experiment MarysM_13_m &lt;- MarysM_13_m[MarysM_13_m$trade_name != &quot;other&quot;,] MarysM_13_m$n_treatment &lt;- as.numeric(as.character(MarysM_13_m$n_treatment)) MarysM_13_m &lt;- fold_data(MarysM_13_m, PM_MB_means) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = MarysM_13_m, new_data_column = c(&quot;planting_date&quot;,&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## No data changed 0/11 write.csv( MarysM_13_m[order(as.numeric(MarysM_13_m$n_treatment)),], here(&quot;cache/AM1304-MarysMount_means.csv&quot;), row.names = FALSE ) 3.4.6 Premer 2013 3.4.6.1 Convert disease scores for(D_assess in c(&quot;19 DAT1 19-3-2013&quot;,&quot;31 DAT1 31-3-2013&quot;)){ # Import final disease survey Premer.13D &lt;- as.data.frame( read_xlsx( path = here(&quot;data/AM1303 Fungicides for powdery mildew in mungbean - Premer.xlsx&quot;), sheet = D_assess, range = &quot;A14:DC64&quot;, col_names = TRUE ) ) colnames(Premer.13D)[1:4] &lt;- c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;) Premer.13D &lt;- Premer.13D[order(Premer.13D[,1],Premer.13D[,2],Premer.13D[,3],Premer.13D[,4]),] # remove Plots not surveyed for (i in seq_along(Premer.13D[, 1])) { if (i == 1) { plotsRecorded &lt;- vector(length = length(Premer.13D[, 1])) } plotsRecorded[i] &lt;- all(is.na(Premer.13D[i, 7:56])) } # remove Plots not surveyed Premer.13D &lt;- Premer.13D[!plotsRecorded, ] incidence3 &lt;- vector(mode = &quot;numeric&quot;, length = length(Premer.13D[, 1])) # Convert disease survey data to 1-9 Incidence rating scale for (i in seq_along(incidence3)) { # incidence = 1 if (all(Premer.13D[i, 58:107] == 0)) { incidence3[i] &lt;- 1 next() } # incidence = 2 if (sum(Premer.13D[i, 58:107] == 2, na.rm = TRUE) == 0 &amp;&amp; sum(Premer.13D[i, 58:107] == 1, na.rm = TRUE) == 0 &amp;&amp; (sum(Premer.13D[i, 58:107] == 3, na.rm = TRUE) / length(Premer.13D[i, 58:107])) &lt;= 0.75) { incidence3[i] &lt;- 2 next() } # incidence = 3 if (sum(Premer.13D[i, 58:107] == 1, na.rm = TRUE) == 0 &amp;&amp; sum(Premer.13D[i, 58:107] == 2, na.rm = TRUE) &lt;= 8 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0, na.rm = TRUE) / length(Premer.13D[i, 58:107])) &gt; 0.75) { incidence3[i] &lt;- 3 } else{ # if it is in the lower half of the canopy and in less than 75% of plants then incidence = 2.5 if (sum(Premer.13D[i, 58:107] == 1, na.rm = TRUE) == 0 &amp;&amp; sum(Premer.13D[i, 58:107] == 2, na.rm = TRUE) &lt;= 8 &amp;&amp; sum(Premer.13D[i, 58:107] == 3, na.rm = TRUE) &gt; 0 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0, na.rm = TRUE) / length(Premer.13D[i, 58:107])) &lt;= 0.75) { incidence3[i] &lt;- 2.5 next() } } # incidence = 4 if (sum(Premer.13D[i, 58:107] == 1, na.rm = TRUE) == 0 &amp;&amp; sum(Premer.13D[i, 58:107] == 2, na.rm = TRUE) &gt; 0 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0, na.rm = TRUE) / length(Premer.13D[i, 58:107])) &lt;= 0.75) { incidence3[i] &lt;- 4 next() } # incidence = 5 if (sum(Premer.13D[i, 58:107] == 1, na.rm = TRUE) == 0 &amp;&amp; sum(Premer.13D[i, 58:107] == 2, na.rm = TRUE) &gt; 0 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0, na.rm = TRUE) / length(Premer.13D[i, 58:107])) &gt; 0.75) { incidence3[i] &lt;- 5 next() } # incidence = 6 if (sum(Premer.13D[i, 58:107] == 1, na.rm = TRUE) == 0 &amp;&amp; sum(Premer.13D[i, 58:107] &gt;= 2, na.rm = TRUE) &gt; 0 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0, na.rm = TRUE) / length(Premer.13D[i, 58:107])) &gt; 0.95) { incidence3[i] &lt;- 6 next() } # incidence = 7 if (sum(Premer.13D[i, 58:107] == 1, na.rm = TRUE) &lt;= 8 &amp;&amp; sum(Premer.13D[i, 58:107] &gt;= 2, na.rm = TRUE) &gt; 0 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0, na.rm = TRUE) / length(Premer.13D[i, 58:107])) &gt; 0.95) { incidence3[i] &lt;- 7 next() } # incidence = 8 if (sum(Premer.13D[i, 58:107] &gt;= 1, na.rm = TRUE) &gt; 0 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0, na.rm = TRUE) / length(Premer.13D[i, 58:107])) &gt; 0.75) { incidence3[i] &lt;- 8 next() } # incidence = 9 if (sum(Premer.13D[i, 58:107] &gt;= 1) &gt; 0 &amp;&amp; sum(Premer.13D[i, 7:56] &gt;= (10 * 5 * 100 * 0.75)) &amp;&amp; # ten leaves from 5 sample sites with a maximum % leaf area infected with PM of 100% * 0.75 as a threshold for leaf drop (sum(Premer.13D[i, 58:107] &gt; 0) / length(Premer.13D[i, 58:107])) &gt; 0.75) { incidence3[i] &lt;- 9 next() } # if there are few (&lt; 10%) leaves with very small infections in all parts of the canopy OR # if there is a stray colony on a upper leaf in addition to all lower if (sum(Premer.13D[i, 58:107] == 3) &gt;= 1 &amp;&amp; sum(Premer.13D[i, 58:107] == 1) &lt;= 2 &amp;&amp; sum(Premer.13D[i, 58:107] == 2) &lt;= 2 &amp;&amp; sum(Premer.13D[i, 7:56]) &lt;= 150) { incidence3[i] &lt;- 2.5 next() } # incidence = 7.5 In the upper canopy with less than 75% plants infected if (sum(Premer.13D[i, 58:107] == 3) &gt;= 0 &amp;&amp; sum(Premer.13D[i, 58:107] == 2) &gt; 0 &amp;&amp; sum(Premer.13D[i, 58:107] == 1) &gt; 0 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0) / length(Premer.13D[i, 58:107]) &lt;= 0.75) &amp;&amp; sum(Premer.13D[i, 7:56]) &gt;= 150) { incidence3[i] &lt;- 7.5 next() } # # incidence = 6.5 if (sum(Premer.13D[i, 58:107] == 1) &gt; 3 &amp;&amp; sum(Premer.13D[i, 58:107] &gt;= 2) &gt; 0 &amp;&amp; sum(Premer.13D[i, 7:56] &lt;= 500) &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0) / length(Premer.13D[i, 58:107]) &gt;= 0.65)) { incidence3[i] &lt;- 6.5 next() } # # # incidence = 4.5 If PM is in the the lower and mid-canopy in less than 75% of plants and one or two in the upper canopy if (sum(Premer.13D[i, 58:107] == 1) &lt;= 3 &amp;&amp; sum(Premer.13D[i, 58:107] &gt;= 2) &gt; 0 &amp;&amp; (sum(Premer.13D[i, 58:107] &gt; 0) / length(Premer.13D[i, 58:107])) &lt;= 0.75) { incidence3[i] &lt;- 4.5 next() } else{ # If none of the conditions are met give the incidence zero incidence3[i] &lt;- 0 } }# end incidence loop if(any(incidence3 == 0)){ warning(&quot;Code caluculated incidence on &#39;0&#39; which is off the incidence scale&quot;)} # Re-format data-frame if(D_assess == &quot;19 DAT1 19-3-2013&quot;){ Premer.13D.1 &lt;- Premer.13D[,c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;)] Premer.13D.1$Inc_19D &lt;- incidence3} if(D_assess == &quot;31 DAT1 31-3-2013&quot;){ Premer.13D.2 &lt;- Premer.13D[,c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;)] Premer.13D.2$Inc_31D &lt;- incidence3} }# end disease assessment loop ## New names: ## * `` -&gt; ...6 ## * `1` -&gt; `1...7` ## * `2` -&gt; `2...8` ## * `3` -&gt; `3...9` ## * `4` -&gt; `4...10` ## * ... ## New names: ## * `` -&gt; ...5 ## * `` -&gt; ...6 ## * `1` -&gt; `1...7` ## * `2` -&gt; `2...8` ## * `3` -&gt; `3...9` ## * ... # The 19 Days after T1 only assessed the first 6 treatments # Therefore it will be dropped Premer.13D &lt;- Premer.13D.2 # read in yield and format Premer.13Y &lt;- as.data.frame( read_xlsx( path = here(&quot;data/AM1303 Fungicides for powdery mildew in mungbean - Premer.xlsx&quot;), sheet = &quot;Yield 18-4-2013&quot;, range = &quot;A14:F58&quot;, col_names = TRUE ) ) Premer.13Y$Treat &lt;- as.character(Premer.13Y$Treat) Premer_13 &lt;- left_join(Premer.13D,Premer.13Y) ## Joining, by = c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;) 3.4.6.2 Define treatment data Premer_13 &lt;- Premer_13 %&gt;% mutate(trade_name = case_when(Treat == &quot;1&quot; ~ &quot;control&quot;, Treat == &quot;2&quot; ~ &quot;Spin-flo&quot;, Treat == &quot;3&quot; ~ &quot;Tilt&quot;, Treat == &quot;4&quot; ~ &quot;Amistar Xtra&quot;, Treat == &quot;5&quot; ~ &quot;Amistar Xtra + adj&quot;, Treat == &quot;6&quot; ~ &quot;Cabrio&quot;, Treat == &quot;7&quot; ~ &quot;Spin-flo&quot;, Treat == &quot;8&quot; ~ &quot;Tilt&quot;, Treat == &quot;9&quot; ~ &quot;Amistar Xtra + adj&quot;, Treat == &quot;10&quot; ~ &quot;Cabrio&quot;, Treat == &quot;11&quot; ~ &quot;Tilt&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(fungicide_ai = case_when(Treat == &quot;1&quot; ~ &quot;control&quot;, Treat == &quot;2&quot; ~ &quot;carbendazim&quot;, Treat == &quot;3&quot; ~ &quot;propiconazole&quot;, Treat == &quot;4&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;5&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;6&quot; ~ &quot;pyraclostrobin&quot;, Treat == &quot;7&quot; ~ &quot;carbendazim&quot;, Treat == &quot;8&quot; ~ &quot;propiconazole&quot;, Treat == &quot;9&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;10&quot; ~ &quot;pyraclostrobin&quot;, Treat == &quot;11&quot; ~ &quot;propiconazole&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(dose_ai.ha = case_when(Treat == &quot;1&quot; ~ 0, Treat == &quot;2&quot; ~ 250, Treat == &quot;3&quot; ~ 62.5, Treat == &quot;4&quot; ~ 40, Treat == &quot;5&quot; ~ 40, Treat == &quot;6&quot; ~ 125, Treat == &quot;7&quot; ~ 250, Treat == &quot;8&quot; ~ 62.5, Treat == &quot;9&quot; ~ 40, Treat == &quot;10&quot; ~ 125, Treat == &quot;11&quot; ~ 62.5, TRUE ~ 0))%&gt;% mutate(fungicide_application_1 = case_when(Treat == &quot;1&quot; ~ as.Date(NA), Treat == &quot;2&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;3&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;4&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;5&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;6&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;7&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;8&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;9&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;10&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;11&quot; ~ as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Treat == &quot;7&quot; ~ as.Date(&quot;2013-03-19&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;8&quot; ~ as.Date(&quot;2013-03-19&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;9&quot; ~ as.Date(&quot;2013-03-19&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;10&quot; ~ as.Date(&quot;2013-03-19&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;11&quot; ~ as.Date(&quot;2013-03-19&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(Treat == &quot;11&quot; ~ as.Date(&quot;2013-03-31&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Treat == &quot;1&quot; ~ 0, Treat == &quot;2&quot; ~ 1, Treat == &quot;3&quot; ~ 1, Treat == &quot;4&quot; ~ 1, Treat == &quot;5&quot; ~ 1, Treat == &quot;6&quot; ~ 1, Treat == &quot;7&quot; ~ 2, Treat == &quot;8&quot; ~ 2, Treat == &quot;9&quot; ~ 2, Treat == &quot;10&quot; ~ 2, Treat == &quot;11&quot; ~ 3, TRUE ~ 0)) 3.4.6.3 Input trial data Premer_13_dat &lt;- data.frame(trial_ref = &quot;AM1303&quot;, year = &quot;2013&quot;, location = &quot;Premer&quot;, host_genotype = &quot;Crystal&quot;, trial_design = &quot;RCB&quot;, plot_length = 12, plot_width = 4, plant_density = as.Date(NA), row_spacing = as.Date(NA), replicate = Premer_13$Rep, planting_date = as.Date(&quot;2012-12-28&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = as.Date(NA), flowering_date = as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), pod_fill_date = as.Date(NA), mid_late_pod_fill = as.Date(NA), first_sign_disease = as.Date(&quot;2013-02-28&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(Premer_13$trade_name), fungicide_ai = Premer_13$fungicide_ai, dose_ai.ha = Premer_13$dose_ai.ha, n_treatment = Premer_13$Treat, fungicide_application_1 = Premer_13$fungicide_application_1, fungicide_application_2 = Premer_13$fungicide_application_2, fungicide_application_3 = Premer_13$fungicide_application_3, total_fungicide = Premer_13$spray_n, harvest_date = as.Date(&quot;2013-04-18&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2013-03-31&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = Premer_13$Inc_31D, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Premer_13$`Yield kg/ha`)/1000 ) 3.4.6.4 AUDPC curve Premer_13_dat &lt;- cbind(Premer_13_dat, AUDPC = apply(data.frame(zero = 0, Premer_13[,c(&quot;Inc_31D&quot;)]-1),# -1 to the data because zero disease = 1 on rating scale// Dates are based off days from first sign 1, FUN = audpc, dates = c((Premer_13_dat$first_sign_disease[1]-7)- as.Date(&quot;2013-01-28&quot;, format = &quot;%Y-%m-%d&quot;), 12+19) ), AUDPS = apply(data.frame(zero = 0, Premer_13[,c(&quot;Inc_31D&quot;)]-1), 1, FUN = audps, dates = c((Premer_13_dat$first_sign_disease[1]-7)- as.Date(&quot;2013-01-28&quot;, format = &quot;%Y-%m-%d&quot;), 12+19) ) ) 3.4.6.5 Calculating the treatment means Premer_13_m &lt;- Premer_13_dat %&gt;% group_by(n_treatment) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), location = unique(location), host_genotype = unique(host_genotype), trial_design = unique(trial_design), trade_name = unique(trade_name), fungicide_ai = unique(fungicide_ai), dose_ai.ha = unique(dose_ai.ha), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = NA, flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), # Produces NAs and needs to be reproduced again below D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ factor(n_treatment), data = Premer_13_dat[Premer_13_dat$fungicide_ai == &quot;propiconazole&quot; | Premer_13_dat$fungicide_ai == &quot;control&quot; ,]))[1,3], Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment), data = Premer_13_dat[Premer_13_dat$fungicide_ai == &quot;propiconazole&quot; | Premer_13_dat$fungicide_ai == &quot;control&quot; ,]))[1,3] ) ## `summarise()` ungrouping output (override with `.groups` argument) # For some wierd reason standard deviations are comming back NA in the code above # Because of n_treatment being converted to a factor I need to wrangle carefully here Prem_tmp &lt;- Premer_13_dat %&gt;% group_by(n_treatment) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) ## `summarise()` ungrouping output (override with `.groups` argument) # Remive the existing yield_error columns and replace with new ones Premer_13_m &lt;- left_join(Premer_13_m[,colnames(Premer_13_m)[c(-29,-33)]], Prem_tmp) ## Joining, by = &quot;n_treatment&quot; # Remove other plots not in experiment Premer_13_m &lt;- Premer_13_m[Premer_13_m$trade_name != &quot;other&quot;,] Premer_13_m$n_treatment &lt;- as.numeric(as.character(Premer_13_m$n_treatment)) Premer_13_m &lt;- fold_data(Premer_13_m, PM_MB_means) ########################## # For some wierd reason standard deviations are comming back NA in the code above Premer_13_m[,c(&quot;disease_error&quot;,&quot;yield_error&quot;)] &lt;- Premer_13_dat %&gt;% group_by(n_treatment) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) %&gt;% select(c(&quot;disease_error&quot;,&quot;yield_error&quot;)) ## `summarise()` ungrouping output (override with `.groups` argument) Premer_13_m &lt;- fold_data(Premer_13_m, PM_MB_means) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Premer_13_m, new_data_column = c(&quot;planting_date&quot;,&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## No data changed 0/11 write.csv( Premer_13_m, here(&quot;cache/AM1303-Premer-Disease_means.csv&quot;),row.names = FALSE ) 3.4.7 Millmerran 2013 3.4.7.1 Convert disease scores for(D_assess in c(&quot;Assessment Sheet 5.4.2013&quot;,&quot;Assessment Sheet 24.4.2013&quot;)){ # Import final disease survey Millm_13D &lt;- as.data.frame( read_xlsx( path = here(&quot;data/BB1305 Fungicides for powdery mildew in mungbean - Millmerran.xlsx&quot;), sheet = D_assess, range = &quot;A12:AH56&quot;, col_names = TRUE ) ) colnames(Millm_13D)[1:4] &lt;- c(&quot;Run&quot;, &quot;Plot&quot;, &quot;Treat&quot;, &quot;Rep&quot;) Millm_13D &lt;- Millm_13D[order(Millm_13D[,1],Millm_13D[,2],Millm_13D[,3],Millm_13D[,4]),] sum(is.na(Millm_13D[, 5:34])) # replace NAs with zero Plots not surveyed for (i in 5:34) { for (j in seq_along(Millm_13D[, i])) { if (is.na(Millm_13D[j, i])) { Millm_13D[j, i] &lt;- 0 } } } incidence4 &lt;- vector(mode = &quot;numeric&quot;, length = length(Millm_13D[, 1])) # column index table for incidence ratings # Calculate incidence # Sites # low canopy c(5:13) # mid canopy c(15:23) # upp canopy c(25:33) # Convert disease survey data to 1-9 Incidence rating scale for (i in seq_along(incidence4)) { # incidence = 1 if (all(Millm_13D[i, c(5:13, 15:23, 25:33)] == 0)) { incidence4[i] &lt;- 1 next() } # incidence = 2 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; all(Millm_13D[i, 15:23] == 0) &amp;&amp; all(Millm_13D[i, 25:33] == 0) &amp;&amp; (sum(Millm_13D[i, c(5:13)] &gt; 0) / length(Millm_13D[i, c(5:13)])) &lt;= 0.75) { incidence4[i] &lt;- 2 next() } # incidence = 3 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &lt;= 3 &amp;&amp; sum(Millm_13D[i, 25:33] == 0) == 0 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23)])) &gt;= 0.75) { incidence4[i] &lt;- 3 } else{ # if it is in the lower half of the canopy and in less than 75% of plants then incidence = 2.5 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &lt;= 3 &amp;&amp; sum(Millm_13D[i, 25:33] == 0) == 0 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23)])) &lt;= 0.75) { incidence4[i] &lt;- 2.5 next() } } # incidence = 4 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &gt;= 1 &amp;&amp; all(Millm_13D[i, 25:33] == 0) &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23)])) &lt;= 0.75) { incidence4[i] &lt;- 4 next() } # incidence = 5 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &gt;= 1 &amp;&amp; all(Millm_13D[i, 25:33] == 0) &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23)])) &gt;= 0.75) { incidence4[i] &lt;- 5 next() } # incidence = 6 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &gt;= 1 &amp;&amp; all(Millm_13D[i, 25:33] == 0) &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23)])) &gt;= 0.90) { incidence4[i] &lt;- 6 next() } # incidence = 7 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 25:33] != 0) &lt;= 3 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23)])) &gt;= 0.90) { incidence4[i] &lt;- 7 next() } # incidence = 8 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 25:33] != 0) &gt;= 1 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23, 25:33)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23, 25:33)])) &gt;= 0.75) { incidence4[i] &lt;- 8 next() } # incidence = 9 if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 25:33] != 0) &gt;= 1 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23, 25:33)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23, 25:33)])) &gt;= 0.75 &amp;&amp; sum(Millm_13D[i, c(5:13, 15:23, 25:33)]) &gt; (9 * 3 * 100) * 0.75) { incidence4[i] &lt;- 9 next() } # if there are few (&lt; 10%) leaves with very small infections in all parts of the canopy OR # if there is a stray colony on a upper leaf in addition to all lower if (sum(Millm_13D[i, 15:23] != 0) &lt;= 3 &amp;&amp; sum(Millm_13D[i, 25:33] != 0) &lt;= 3 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23, 25:33)]) / length(Millm_13D[i, c(5:13, 15:23, 25:33)]) / 100) &lt;= 0.1) { incidence4[i] &lt;- 2.5 next() } # incidence = 7.5 In the upper canopy with less than 75% plants infected if (sum(Millm_13D[i, 5:13] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 15:23] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 25:33] != 0) &gt;= 3 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23, 25:33)] &gt; 0) / length(Millm_13D[i, c(5:13, 15:23, 25:33)])) &lt;= 0.75) { incidence4[i] &lt;- 7.5 next() } # if there are few more colonies(&lt; 10%) leaves with very small infections in all parts of the canopy OR # if there is a stray colony on a upper leaf in addition to all lower if (sum(Millm_13D[i, 15:23] != 0) &lt;= 6 &amp;&amp; sum(Millm_13D[i, 25:33] != 0) &lt;= 3 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23, 25:33)]) / length(Millm_13D[i, c(5:13, 15:23, 25:33)]) / 100) &lt;= 0.1) { incidence4[i] &lt;- 3.5 next() } if (sum(Millm_13D[i, 15:23] != 0) &gt;= 1 &amp;&amp; sum(Millm_13D[i, 25:33] != 0) &lt;= 3 &amp;&amp; (sum(Millm_13D[i, c(5:13, 15:23, 25:33)]) / length(Millm_13D[i, c(5:13, 15:23, 25:33)]) / 100) &lt;= 0.5) { incidence4[i] &lt;- 6.5 next() } else{ # If none of the conditions are met give the incidence zero incidence4[i] &lt;- 0 } } # end incidence loop if(any(incidence4 == 0)){ warning(&quot;Code caluculated incidence on &#39;0&#39; which is off the incidence scale&quot;)} # Re-format data-frame if(D_assess == &quot;Assessment Sheet 5.4.2013&quot;){ Millm_13D.1 &lt;- Millm_13D[,c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;)] Millm_13D.1$Inc_23D &lt;- incidence4} if(D_assess == &quot;Assessment Sheet 24.4.2013&quot;){ Millm_13D.2 &lt;- Millm_13D[,c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;)] Millm_13D.2$Inc_42D &lt;- incidence4} }# end disease assessment loop ## New names: ## * `1` -&gt; `1...5` ## * `2` -&gt; `2...6` ## * `3` -&gt; `3...7` ## * `4` -&gt; `4...8` ## * `5` -&gt; `5...9` ## * ... ## New names: ## * `1` -&gt; `1...5` ## * `2` -&gt; `2...6` ## * `3` -&gt; `3...7` ## * `4` -&gt; `4...8` ## * `5` -&gt; `5...9` ## * ... # The 19 Days after T1 only assessed the first 6 treatments # Therefore it will be dropped Millm_13D &lt;- left_join(Millm_13D.1, Millm_13D.2) ## Joining, by = c(&quot;Treat&quot;, &quot;Rep&quot;, &quot;Run&quot;, &quot;Plot&quot;) # read in yield and format Millm.13Y &lt;- as.data.frame( read_xlsx( path = here(&quot;data/BB1305 Fungicides for powdery mildew in mungbean - Millmerran.xlsx&quot;), sheet = &quot;Harvest Sheet 6.5.2013&quot;, range = &quot;A11:F55&quot;, col_names = TRUE ) ) Millm.13Y$Treatment &lt;- as.character(Millm.13Y$Treatment) Millm.13Y$Treat &lt;- as.double(Millm.13Y$Treat) colnames(Millm.13Y)[1:4] &lt;- c(&quot;Run&quot;, &quot;Plot&quot;,&quot;TreatY&quot;, &quot;Rep&quot;) Millm_13 &lt;- left_join(Millm_13D, Millm.13Y, by = c(&quot;Run&quot;, &quot;Plot&quot;,&quot;Treat&quot;, &quot;Rep&quot;)) 3.4.7.2 Define treatment data Millm_13 &lt;- Millm_13 %&gt;% mutate(trade_name = case_when(Treat == &quot;1&quot; ~ &quot;control&quot;, Treat == &quot;2&quot; ~ &quot;Spin-flo&quot;, Treat == &quot;3&quot; ~ &quot;Tilt&quot;, Treat == &quot;4&quot; ~ &quot;Amistar Xtra&quot;, Treat == &quot;5&quot; ~ &quot;Amistar Xtra + adj&quot;, Treat == &quot;6&quot; ~ &quot;Cabrio&quot;, Treat == &quot;7&quot; ~ &quot;Spin-flo&quot;, Treat == &quot;8&quot; ~ &quot;Tilt&quot;, Treat == &quot;9&quot; ~ &quot;Amistar Xtra + adj&quot;, Treat == &quot;10&quot; ~ &quot;Cabrio&quot;, Treat == &quot;11&quot; ~ &quot;Tilt&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(fungicide_ai = case_when(Treat == &quot;1&quot; ~ &quot;control&quot;, Treat == &quot;2&quot; ~ &quot;carbendazim&quot;, Treat == &quot;3&quot; ~ &quot;propiconazole&quot;, Treat == &quot;4&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;5&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;6&quot; ~ &quot;pyraclostrobin&quot;, Treat == &quot;7&quot; ~ &quot;carbendazim&quot;, Treat == &quot;8&quot; ~ &quot;propiconazole&quot;, Treat == &quot;9&quot; ~ &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, Treat == &quot;10&quot; ~ &quot;pyraclostrobin&quot;, Treat == &quot;11&quot; ~ &quot;propiconazole&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(dose_ai.ha = case_when(Treat == &quot;1&quot; ~ 0, Treat == &quot;2&quot; ~ 250, Treat == &quot;3&quot; ~ 62.5, Treat == &quot;4&quot; ~ 40, Treat == &quot;5&quot; ~ 40, Treat == &quot;6&quot; ~ 125, Treat == &quot;7&quot; ~ 250, Treat == &quot;8&quot; ~ 62.5, Treat == &quot;9&quot; ~ 40, Treat == &quot;10&quot; ~ 125, Treat == &quot;11&quot; ~ 62.5, TRUE ~ 0))%&gt;% mutate(fungicide_application_1 = case_when(Treat == &quot;1&quot; ~ as.Date(NA), Treat == &quot;2&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;3&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;4&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;5&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;6&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;7&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;8&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;9&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;10&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;11&quot; ~ as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Treat == &quot;7&quot; ~ as.Date(&quot;2013-03-21&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;8&quot; ~ as.Date(&quot;2013-03-21&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;9&quot; ~ as.Date(&quot;2013-03-21&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;10&quot; ~ as.Date(&quot;2013-03-21&quot;, format = &quot;%Y-%m-%d&quot;), Treat == &quot;11&quot; ~ as.Date(&quot;2013-03-21&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(Treat == &quot;11&quot; ~ as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Treat == &quot;1&quot; ~ 0, Treat == &quot;2&quot; ~ 1, Treat == &quot;3&quot; ~ 1, Treat == &quot;4&quot; ~ 1, Treat == &quot;5&quot; ~ 1, Treat == &quot;6&quot; ~ 1, Treat == &quot;7&quot; ~ 2, Treat == &quot;8&quot; ~ 2, Treat == &quot;9&quot; ~ 2, Treat == &quot;10&quot; ~ 2, Treat == &quot;11&quot; ~ 3, TRUE ~ 0)) 3.4.7.3 Input trial data Millm_13_dat &lt;- data.frame(trial_ref = &quot;BB1305&quot;, year = &quot;2013&quot;, location = &quot;Millmerran&quot;, host_genotype = &quot;Crystal&quot;, trial_design = &quot;RCB&quot;, plot_length = 12, plot_width = 4, plant_density = as.Date(NA), row_spacing = 1/3, replicate = Millm_13$Rep, planting_date = as.Date(&quot;2013-01-12&quot;, format = &quot;%Y-%m-%d&quot;), # Lawrie prices guess for planting date emergence_date = as.Date(NA), flowering_date = as.Date(NA), pod_fill_date = as.Date(&quot;2013-03-21&quot;, format = &quot;%Y-%m-%d&quot;), mid_late_pod_fill = as.Date(&quot;2013-03-28&quot;, format = &quot;%Y-%m-%d&quot;), first_sign_disease = as.Date(&quot;2013-03-13&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(Millm_13$trade_name), fungicide_ai = Millm_13$fungicide_ai, dose_ai.ha = Millm_13$dose_ai.ha, n_treatment = Millm_13$Treat, fungicide_application_1 = Millm_13$fungicide_application_1, fungicide_application_2 = Millm_13$fungicide_application_2, fungicide_application_3 = Millm_13$fungicide_application_3, total_fungicide = Millm_13$spray_n, harvest_date = as.Date(&quot;2013-05-06&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2013-04-24&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = Millm_13$Inc_42D, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Millm_13$`kg/Ha`)/1000, stringsAsFactors = FALSE) 3.4.7.4 AUDPC curve Millm_13_dat &lt;- cbind(Millm_13_dat, AUDPC = apply(data.frame(zero = 0, Millm_13[,c(&quot;Inc_23D&quot;,&quot;Inc_42D&quot;)]-1), 1, FUN = audpc, dates = c(1,23,42) ), AUDPS = apply(data.frame(zero = 0, Millm_13[,c(&quot;Inc_23D&quot;,&quot;Inc_42D&quot;)]-1), 1, FUN = audps, dates = c(1,23,42) ) ) 3.4.7.5 Calculating the treatment means Millm_13_m &lt;- Millm_13_dat %&gt;% group_by(trial_ref, year, location, host_genotype, trial_design, trade_name,fungicide_ai,dose_ai.ha,n_treatment) %&gt;% summarise(plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = NA, flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), # Createds NAs and need repeating below D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ factor(n_treatment), data = Millm_13_dat[Millm_13_dat$fungicide_ai == &quot;propiconazole&quot; | Millm_13_dat$fungicide_ai == &quot;control&quot; ,]))[1,3], Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment), data = Millm_13_dat[Millm_13_dat$fungicide_ai == &quot;propiconazole&quot; | Millm_13_dat$fungicide_ai == &quot;control&quot; ,]))[1,3] ) ## `summarise()` regrouping output by &#39;trial_ref&#39;, &#39;year&#39;, &#39;location&#39;, &#39;host_genotype&#39;, &#39;trial_design&#39;, &#39;trade_name&#39;, &#39;fungicide_ai&#39;, &#39;dose_ai.ha&#39; (override with `.groups` argument) # For some wierd reason standard deviations are comming back NA in the code above # Because of n_treatment being converted to a factor I need to wrangle carefully here Millm_tmp &lt;- Millm_13_dat %&gt;% group_by(n_treatment) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) ## `summarise()` ungrouping output (override with `.groups` argument) # Remive the existing yield_error columns and replace with new ones Millm_13_m &lt;- left_join(Millm_13_m[,colnames(Millm_13_m)[c(-29,-33)]], Millm_tmp) ## Joining, by = &quot;n_treatment&quot; # Remove other plots not in experiment Millm_13_m &lt;- Millm_13_m[Millm_13_m$trade_name != &quot;other&quot;,] Millm_13_m$n_treatment &lt;- as.numeric(as.character(Millm_13_m$n_treatment)) Millm_13_m &lt;- fold_data(Millm_13_m, PM_MB_means) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Millm_13_m, new_data_column = c(&quot;planting_date&quot;,&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## No data changed 0/11 write.csv( Millm_13_m[order(as.numeric(Millm_13_m$n_treatment)),], here(&quot;cache/BB1305_Millmerran_means.csv&quot;), row.names = FALSE ) 3.4.8 Hermitage 2015 Herm_15 &lt;- read.xlsx( here(&quot;data/Mugbean powdery mildew 2014-15 inc results v2.xlsx&quot;), sheet = &quot;HRS yield data&quot;, startRow = 4, colNames = TRUE, detectDates = TRUE )[1:30, 1:9] Herm_15$Year &lt;- 2015 Herm_15$location &lt;- &quot;Hermitage&quot; # Disease incidence assessments through the 2016 season Herm_15.DR &lt;- read.xlsx( here(&quot;data/Mugbean powdery mildew 2014-15 inc results v2.xlsx&quot;), sheet = &quot;HRS ratings &amp; graphs&quot;, startRow = 5, colNames = TRUE )[1:30, 1:8] Herm_15$Plot.Length &lt;- as.numeric(Herm_15$Plot.Length) Herm_15$Plot.Weight &lt;- as.numeric(Herm_15$Plot.Weight) Herm_15$Plot.weight &lt;- as.numeric(Herm_15$Plot.weight) Herm_15$`Plot.Yield.(kg/ha)` &lt;- as.numeric(Herm_15$`Plot.Yield.(kg/ha)`) Herm_15$`Plot.Yield.(t/ha)` &lt;- as.numeric(Herm_15$`Plot.Yield.(t/ha)`) # Rename the plot column and remove lines without data colnames(Herm_15)[3] &lt;- &quot;Plot&quot; Herm_15.DR &lt;- Herm_15.DR[!is.na(Herm_15.DR$Treatment),] # rename the disease assesment columns # For comparing between trials I am forcing the assumption # that the disease did not exist prior to it being spotted in the trial. # Therefore day0 observes zero disease and day1 is first sign colnames(Herm_15.DR)[4:8] &lt;- c(&quot;day0&quot;, &quot;day1&quot;, &quot;day8&quot;, &quot;day15&quot;,&quot;day22&quot;) Herm_15.DR$day0 &lt;- as.numeric(Herm_15.DR$day0) Herm_15.DR$day1 &lt;- as.numeric(Herm_15.DR$day1) Herm_15.DR$day8 &lt;- as.numeric(Herm_15.DR$day8) Herm_15.DR$day15 &lt;- as.numeric(Herm_15.DR$day15) Herm_15.DR$day22 &lt;- as.numeric(Herm_15.DR$day22) # Merge yield and disease data Herm_15 &lt;- left_join(Herm_15.DR, Herm_15) ## Joining, by = c(&quot;Plot&quot;, &quot;Treatment&quot;) 3.4.8.1 Define treatment data Herm_15_dat &lt;- Herm_15 %&gt;% mutate(n_treatment = case_when(Treatment == &quot;1st sign +1&quot; ~ 4, Treatment == &quot;control&quot; ~ 1, Treatment == &quot;1st sign&quot; ~ 3, Treatment == &quot;1/3C + 1&quot; ~ 6, Treatment == &quot;5wks+2&quot; ~ 2, Treatment == &quot;1/3C&quot; ~ 5, TRUE ~ 9998))%&gt;% mutate(trade_name = case_when(Treatment == &quot;control&quot; ~ &quot;control&quot;, TRUE ~ &quot;Folicur&quot;))%&gt;% mutate(fungicide_ai = case_when(Treatment == &quot;control&quot; ~ &quot;control&quot;, TRUE ~ &quot;tebuconazole&quot;))%&gt;% mutate(dose_ai.ha = case_when(Treatment == &quot;control&quot; ~ 0, TRUE ~ 62.35))%&gt;% mutate(fungicide_application_1 = case_when(Treatment == &quot;1st sign +1&quot; ~ as.Date(&quot;2015-03-17&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;control&quot; ~ as.Date(NA), Treatment == &quot;1st sign&quot; ~ as.Date(&quot;2015-03-17&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;1/3C + 1&quot; ~ as.Date(&quot;2015-03-23&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;5wks+2&quot; ~ as.Date(&quot;2015-03-02&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;1/3C&quot; ~ as.Date(&quot;2015-03-24&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Treatment == &quot;1st sign +1&quot; ~ as.Date(&quot;2015-03-31&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;control&quot; ~ as.Date(NA), Treatment == &quot;1/3C + 1&quot; ~ as.Date(&quot;2015-04-07&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;5wks+2&quot; ~ as.Date(&quot;2015-03-17&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(Treatment == &quot;5wks+2&quot; ~ as.Date(&quot;2015-03-31&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Treatment == &quot;1st sign +1&quot; ~ 2, Treatment == &quot;control&quot; ~ 0, Treatment == &quot;1st sign&quot; ~ 1, Treatment == &quot;1/3C + 1&quot; ~ 2, Treatment == &quot;5wks+2&quot; ~ 3, Treatment == &quot;1/3C&quot; ~ 1, TRUE ~ 9999)) 3.4.8.2 Input trial data Herm_15_dat &lt;- data.frame(trial_ref = &quot;mung1415/01&quot;, year = &quot;2015&quot;, location = &quot;Hermitage&quot;, host_genotype = &quot;Jade&quot;, trial_design = &quot;RCB&quot;, plot_length = 12, plot_width = 4, plant_density = NA, row_spacing = 0.75, replicate = Herm_15_dat$Rep, planting_date = as.Date(&quot;2015-01-19&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = as.Date(&quot;2015-01-24&quot;, format = &quot;%Y-%m-%d&quot;), flowering_date = as.Date(NA), pod_fill_date = as.Date(NA), mid_late_pod_fill = as.Date(NA), first_sign_disease = as.Date(&quot;2015-03-16&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(Herm_15_dat$trade_name), fungicide_ai = Herm_15_dat$fungicide_ai, dose_ai.ha = Herm_15_dat$dose_ai.ha, n_treatment = as.numeric(Herm_15_dat$n_treatment), fungicide_application_1 = Herm_15_dat$fungicide_application_1, fungicide_application_2 = Herm_15_dat$fungicide_application_2, fungicide_application_3 = Herm_15_dat$fungicide_application_3, total_fungicide = Herm_15_dat$spray_n, harvest_date = as.Date(&quot;2015-04-20&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2015-04-06&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = Herm_15_dat$day22, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Herm_15_dat$`Plot.Yield.(t/ha)`), AUDPC = apply(Herm_15_dat[,c(&quot;day0&quot;, &quot;day1&quot;, &quot;day8&quot;, &quot;day15&quot;,&quot;day22&quot;)]-1,1, FUN = audpc, dates = c(0,1,8,15,22)), # -1 to the data because zero disease = 1 on rating scale// Dates are based off days from first sign AUDPS = apply(Herm_15_dat[,c(&quot;day0&quot;, &quot;day1&quot;, &quot;day8&quot;, &quot;day15&quot;,&quot;day22&quot;)]-1,1, FUN = audps, dates = c(0,1,8,15,22)), stringsAsFactors = FALSE) 3.4.8.3 Calculating treatment means Herm_15_m &lt;- Herm_15_dat %&gt;% group_by(host_genotype, n_treatment) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), location = unique(location), trial_design = unique(trial_design), trade_name = unique(trade_name), fungicide_ai = unique(fungicide_ai), dose_ai.ha = unique(dose_ai.ha), trial_ref = unique(trial_ref), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = unique(emergence_date), flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), # generates NAs and needs repeating below D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ factor(n_treatment), data = Herm_15_dat))[1,3], Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment), data = Herm_15_dat))[1,3] ) ## `summarise()` regrouping output by &#39;host_genotype&#39; (override with `.groups` argument) # For some wierd reason standard deviations are comming back NA in the code above Herm_15_m[,c(&quot;disease_error&quot;,&quot;yield_error&quot;)] &lt;- Herm_15_dat %&gt;% group_by(n_treatment) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) %&gt;% select(c(&quot;disease_error&quot;,&quot;yield_error&quot;)) ## `summarise()` ungrouping output (override with `.groups` argument) Herm_15_m &lt;- fold_data(Herm_15_m, PM_MB_means) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Herm_15_m, new_data_column = c(&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## No data changed 0/6 write.csv( Herm_15_m, here(&quot;cache/Herm_15_means.csv&quot;),row.names = FALSE ) 3.4.9 Hermitage 2016 Disease data for Hermitage 2016 only exists as a mean of treatments within the 2016 Mungbean PM trials summary.xlsx file. # Yield data from 2016 Hermitage trial with final disease severity Herm_16 &lt;- read.xlsx( here(&quot;data/Yeild Data 2016 Kingaroy Hermitage (PaulM adjusted).xlsx&quot;), sheet = &quot;Hermitage&quot;, startRow = 1, colNames = TRUE )[1:28, 1:9] Herm_16$Year &lt;- 2016 Herm_16$location &lt;- &quot;Hermitage&quot; Herm_16$Plot &lt;- as.numeric(unlist(strsplit( Herm_16$Plot, &quot;P&quot;))[ seq(from = 2, to = 56, by = 2)]) 3.4.9.1 Define treatment data Herm_16_dat &lt;- Herm_16 %&gt;% mutate(trade_name = case_when(Treatment == &quot;1&quot; ~ &quot;control&quot;, TRUE ~ &quot;Folicur&quot;))%&gt;% mutate(fungicide_ai = case_when(Treatment == &quot;1&quot; ~ &quot;control&quot;, TRUE ~ &quot;tebuconazole&quot;))%&gt;% mutate(dose_ai.ha = case_when(Treatment == &quot;1&quot; ~ 0, TRUE ~ 62.35))%&gt;% mutate(fungicide_application_1 = case_when(Treatment == &quot;1&quot; ~ as.Date(NA), Treatment == &quot;2&quot; ~ as.Date(&quot;2016-03-17&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;3&quot; ~ as.Date(&quot;2016-03-17&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;4&quot; ~ as.Date(&quot;2016-03-17&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;5&quot; ~ as.Date(&quot;2016-03-8&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;6&quot; ~ as.Date(&quot;2016-03-8&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;7&quot; ~ as.Date(&quot;2016-03-17&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Treatment == &quot;1&quot; ~ as.Date(NA), Treatment == &quot;3&quot; ~ as.Date(&quot;2016-03-30&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;4&quot; ~ as.Date(&quot;2016-03-30&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;6&quot; ~ as.Date(&quot;2016-03-22&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;7&quot; ~ as.Date(&quot;2016-03-30&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(Treatment == &quot;4&quot; ~ as.Date(&quot;2016-04-13&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Treatment == &quot;1&quot; ~ 0, Treatment == &quot;2&quot; ~ 1, Treatment == &quot;3&quot; ~ 2, Treatment == &quot;4&quot; ~ 3, Treatment == &quot;5&quot; ~ 1, Treatment == &quot;6&quot; ~ 2, Treatment == &quot;7&quot; ~ 2, TRUE ~ 9999)) 3.4.9.2 Input trial data Herm_16_dat &lt;- data.frame(trial_ref = &quot;mung1516/01&quot;, year = &quot;2016&quot;, location = &quot;Hermitage&quot;, host_genotype = &quot;Jade&quot;, trial_design = &quot;RCB&quot;, plot_length = 12, plot_width = 4, plant_density = NA, row_spacing = 0.75, replicate = Herm_16_dat$rep, planting_date = as.Date(&quot;2016-02-03&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = as.Date(&quot;2016-02-12&quot;, format = &quot;%Y-%m-%d&quot;), flowering_date = as.Date(NA), pod_fill_date = as.Date(NA), mid_late_pod_fill = as.Date(&quot;2016-04-15&quot;, format = &quot;%Y-%m-%d&quot;), first_sign_disease = as.Date(&quot;2016-03-08&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(Herm_16_dat$trade_name), fungicide_ai = Herm_16_dat$fungicide_ai, dose_ai.ha = Herm_16_dat$dose_ai.ha, n_treatment = as.numeric(Herm_16_dat$Treatment), fungicide_application_1 = Herm_16_dat$fungicide_application_1, fungicide_application_2 = Herm_16_dat$fungicide_application_2, fungicide_application_3 = Herm_16_dat$fungicide_application_3, total_fungicide = Herm_16_dat$spray_n, harvest_date = as.Date(&quot;2016-05-06&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2016-04-15&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = NA, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Herm_16_dat$`Raw.Adjusted.Yeild./.ha`), stringsAsFactors = FALSE) 3.4.9.3 Calculating treatment means Herm_16_m &lt;- Herm_16_dat %&gt;% group_by(host_genotype, n_treatment) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), location = unique(location), trial_design = unique(trial_design), trade_name = unique(trade_name), fungicide_ai = unique(fungicide_ai), dose_ai.ha = unique(dose_ai.ha), trial_ref = unique(trial_ref), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = unique(emergence_date), flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), rating_scale = unique(rating_scale), grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = &quot;Yes&quot;, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment), data = Herm_16_dat))[1,3] ) ## `summarise()` regrouping output by &#39;host_genotype&#39; (override with `.groups` argument) # For some wierd reason standard deviations are comming back NA in the code above Herm_16_m[,&quot;yield_error&quot;] &lt;- Herm_16_dat %&gt;% group_by(n_treatment) %&gt;% summarise(yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) %&gt;% select(c(&quot;yield_error&quot;)) ## `summarise()` ungrouping output (override with `.groups` argument) 3.4.9.4 Mean disease incidence data Herm_16.DR &lt;- read.xlsx( here(&quot;data/2016 Mungbean PM trials summary.xlsx&quot;), sheet = &quot;Hermitage_2016&quot;, startRow = 5, colNames = TRUE ) names(Herm_16.DR)[1:6] &lt;- c(&quot;Treatment&quot;, &quot;dae24&quot;,&quot;dae38&quot;,&quot;dae48&quot;,&quot;dae63&quot;,&quot;Final_Yield_tHa&quot;) Herm_16.DR &lt;- Herm_16.DR %&gt;% mutate(n_treatment = case_when(Treatment == &quot;5wk + 2s (3s)&quot; ~ 4, Treatment == &quot;5wk+1 (2s)&quot; ~ 3, Treatment == &quot;1/3+1 (2s)&quot; ~ 7, Treatment == &quot;1st sign (1s)&quot; ~ 5, Treatment == &quot;5wk (1s)&quot; ~ 2, Treatment == &quot;1st sign+1 (2s)&quot; ~ 6, Treatment == &quot;Unsprayed&quot; ~ 1, TRUE ~ 9999)) Herm_16_m &lt;- left_join(Herm_16_m,Herm_16.DR) ## Joining, by = &quot;n_treatment&quot; # dae24 recorded no incidence Herm_16_m$AUDPC_m &lt;- apply(Herm_16_m[,c(&quot;dae24&quot;, &quot;dae38&quot;, &quot;dae48&quot;, &quot;dae63&quot;)]-1,1, FUN = audpc, dates = c(9,13,23,38)) Herm_16_m$AUDPS_m &lt;- apply(Herm_16_m[,c(&quot;dae24&quot;, &quot;dae38&quot;, &quot;dae48&quot;, &quot;dae63&quot;)]-1,1, FUN = audps, dates = c(9,13,23,38)) Herm_16_m$AUDPC_sd &lt;- NA Herm_16_m$AUDPS_sd &lt;- NA Herm_16_m$PM_final_severity &lt;- Herm_16_m$dae63 Herm_16_m$Inc_Ms &lt;- anova(lm(AUDPC_m ~ factor(n_treatment), data = Herm_16_m))[1,3] #ANOVA F-tests on an essentially perfect fit are unreliable ## Warning in anova.lm(lm(AUDPC_m ~ factor(n_treatment), data = Herm_16_m)): ANOVA ## F-tests on an essentially perfect fit are unreliable 3.4.9.5 Tidy and save data Herm_16_m &lt;- fold_data(Herm_16_m, PM_MB_means) Herm_16_m &lt;- Herm_16_m[,!colnames(Herm_16_m) %in% c(&#39;Treatment&#39;,&quot;dae24&quot;,&quot;dae38&quot;,&quot;dae48&quot;,&quot;dae63&quot;,&quot;Final_Yield_tHa&quot;)] #final Yields from disease data different to yield data set # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Herm_16_m, new_data_column = c(&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## No data changed 0/7 write.csv( Herm_16_m, here(&quot;cache/Herm_16_means.csv&quot;),row.names = FALSE ) 3.4.10 Kingaroy 2016 Disease data for Kingaroy 2016 only exists as a mean of treatments within the 2016 Mungbean PM trials summary.xlsx file. # Yield data from 2016 Hermitage trial with final disease severity King_16 &lt;- read.xlsx( here(&quot;data/Yeild Data 2016 Kingaroy Hermitage (PaulM adjusted).xlsx&quot;), sheet = &quot;Kingaroy&quot;, startRow = 1, colNames = TRUE )[1:28, 1:9] # Create Year and location variables King_16$Year &lt;- 2016 King_16$location &lt;- &quot;Kingaroy&quot; # Convert plot values to numeric and remove &quot;P&quot; prefix King_16$Plot &lt;- as.numeric(unlist(strsplit( King_16$Plot, &quot;P&quot;))[ seq(from = 2, to = 56, by = 2)]) 3.4.10.1 Define treatment data King_16_dat &lt;- King_16 %&gt;% mutate(trade_name = case_when(Treatment == &quot;1&quot; ~ &quot;control&quot;, TRUE ~ &quot;Folicur&quot;))%&gt;% mutate(fungicide_ai = case_when(Treatment == &quot;1&quot; ~ &quot;control&quot;, TRUE ~ &quot;tebuconazole&quot;))%&gt;% mutate(dose_ai.ha = case_when(Treatment == &quot;1&quot; ~ 0, TRUE ~ 62.35))%&gt;% mutate(fungicide_application_1 = case_when(Treatment == &quot;1&quot; ~ as.Date(NA), Treatment == &quot;2&quot; ~ as.Date(&quot;2016-03-22&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;3&quot; ~ as.Date(&quot;2016-03-22&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;4&quot; ~ as.Date(&quot;2016-03-22&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;5&quot; ~ as.Date(&quot;2016-03-09&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;6&quot; ~ as.Date(&quot;2016-03-09&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;7&quot; ~ as.Date(&quot;2016-03-22&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Treatment == &quot;1&quot; ~ as.Date(NA), Treatment == &quot;3&quot; ~ as.Date(&quot;2016-04-05&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;4&quot; ~ as.Date(&quot;2016-04-05&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;6&quot; ~ as.Date(&quot;2016-03-22&quot;, format = &quot;%Y-%m-%d&quot;), Treatment == &quot;7&quot; ~ as.Date(&quot;2016-04-05&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_3 = case_when(Treatment == &quot;4&quot; ~ as.Date(&quot;2016-04-19&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Treatment == &quot;1&quot; ~ 0, Treatment == &quot;2&quot; ~ 1, Treatment == &quot;3&quot; ~ 2, Treatment == &quot;4&quot; ~ 3, Treatment == &quot;5&quot; ~ 1, Treatment == &quot;6&quot; ~ 2, Treatment == &quot;7&quot; ~ 2, TRUE ~ 9999)) 3.4.10.2 Input trial data King_16_dat &lt;- data.frame(trial_ref = &quot;mung1516/02&quot;, year = &quot;2016&quot;, location = &quot;Kingaroy&quot;, host_genotype = &quot;Jade&quot;, trial_design = &quot;RCB&quot;, plot_length = 12, plot_width = 4, plant_density = NA, row_spacing = 0.75, replicate = King_16_dat$rep, planting_date = as.Date(&quot;2016-02-11&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = as.Date(&quot;2016-02-19&quot;, format = &quot;%Y-%m-%d&quot;), flowering_date = as.Date(NA), pod_fill_date = as.Date(&quot;2016-04-05&quot;, format = &quot;%Y-%m-%d&quot;), mid_late_pod_fill = as.Date(NA), first_sign_disease = as.Date(&quot;2016-03-09&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(King_16_dat$trade_name), fungicide_ai = King_16_dat$fungicide_ai, dose_ai.ha = King_16_dat$dose_ai.ha, n_treatment = as.numeric(King_16_dat$Treatment), fungicide_application_1 = King_16_dat$fungicide_application_1, fungicide_application_2 = King_16_dat$fungicide_application_2, fungicide_application_3 = King_16_dat$fungicide_application_3, total_fungicide = King_16_dat$spray_n, harvest_date = as.Date(&quot;2016-05-10&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2016-04-19&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = NA, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(King_16_dat$`Raw.Adjusted.Yeild./.ha`), stringsAsFactors = FALSE) 3.4.10.3 Calculating treatment means King_16_m &lt;- King_16_dat %&gt;% group_by(host_genotype, n_treatment) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), location = unique(location), trial_design = unique(trial_design), trade_name = unique(trade_name), fungicide_ai = unique(fungicide_ai), dose_ai.ha = unique(dose_ai.ha), trial_ref = unique(trial_ref), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = unique(plant_density), row_spacing = unique(row_spacing), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = unique(emergence_date), flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), fungicide_application_3 = unique(fungicide_application_3), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), rating_scale = unique(rating_scale), grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = &quot;Yes&quot;, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), # Calculation returned as NA, repeated below Y_error_type = &quot;stdev&quot;, Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment), data = King_16_dat))[1,3] ) ## `summarise()` regrouping output by &#39;host_genotype&#39; (override with `.groups` argument) # For some wierd reason standard deviations are comming back NA in the code above King_16_m[,&quot;yield_error&quot;] &lt;- King_16_dat %&gt;% group_by(n_treatment) %&gt;% summarise(yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) %&gt;% select(c(&quot;yield_error&quot;)) ## `summarise()` ungrouping output (override with `.groups` argument) 3.4.10.4 Mean Disease incidence assessments through the 2016 season King_16.DR &lt;- read.xlsx( here(&quot;data/2016 Mungbean PM trials summary.xlsx&quot;), sheet = &quot;Kingaroy_2016&quot;, startRow = 5, colNames = TRUE ) # Rename columns colnames(King_16.DR)[1:6] &lt;- c(&quot;Treatment&quot;, &quot;dae20&quot;,&quot;dae34&quot;,&quot;dae46&quot;,&quot;PM_final_severity&quot;,&quot;Final_Yield_tHa&quot;) # Define Treatments King_16.DR &lt;- King_16.DR %&gt;% mutate(n_treatment = case_when(Treatment == &quot;4wk+2 (3s)&quot; ~ 4, Treatment == &quot;4wk+1 (2s)&quot; ~ 3, Treatment == &quot;1/3+1 (2s)&quot; ~ 7, Treatment == &quot;1st sign (1s)&quot; ~ 5, Treatment == &quot;4wk (1s)&quot; ~ 2, Treatment == &quot;1st sign+1 (2s)&quot; ~ 6, Treatment == &quot;Unsprayed&quot; ~ 1, TRUE ~ 9999)) # Join disease assesment data with grain yield data King_16_m &lt;- left_join(King_16_m,King_16.DR) ## Joining, by = &quot;n_treatment&quot; # Calculate AUDPC King_16_m$AUDPC_m &lt;- apply(King_16_m[,c(&quot;dae20&quot;, &quot;dae34&quot;, &quot;dae46&quot;, &quot;PM_final_severity&quot;)]-1,1, FUN = audps, dates = c(20,34,46,60)) King_16_m$AUDPS_m &lt;- apply(King_16_m[,c(&quot;dae20&quot;, &quot;dae34&quot;, &quot;dae46&quot;, &quot;PM_final_severity&quot;)]-1,1, FUN = audps, dates = c(20,34,46,60)) # Create AUDPC/S standard deviation columns # defined as NA because we only had treatment mean data # for this experiment King_16_m$AUDPS_sd &lt;- NA King_16_m$AUDPC_sd &lt;- NA # Calculate disease mean squares King_16_m$Inc_Ms &lt;- anova(lm(AUDPC_m ~ factor(n_treatment), data = King_16_m))[1,3] #ANOVA F-tests on an essentially perfect fit are unreliable ## Warning in anova.lm(lm(AUDPC_m ~ factor(n_treatment), data = King_16_m)): ANOVA ## F-tests on an essentially perfect fit are unreliable 3.4.10.5 Tidy and save data King_16_m &lt;- fold_data(King_16_m, PM_MB_means) King_16_m &lt;- King_16_m[,!colnames(King_16_m) %in% c(&#39;Treatment&#39;,&quot;dae20&quot;,&quot;dae34&quot;,&quot;dae46&quot;,&quot;Final_Yield_tHa&quot;)] # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = King_16_m, new_data_column = c(&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## No data changed 0/7 write.csv( King_16_m, here(&quot;cache/King_16_means.csv&quot;), row.names = FALSE ) 3.4.11 Missen Flats 2017 # ____________________________________________________________ # _____________ Missen Flats (Fogarty&#39;s) 2017 ____________ Fogerty_17 &lt;- read.xlsx( here(&quot;data/Fogerty Work File 2017 (Autosaved).xlsx&quot;), sheet = &quot;Data&quot;, startRow = 3, colNames = TRUE, detectDates = TRUE )[, 1:43] # Columns to keep Fogerty_17 &lt;- Fogerty_17[, c(&#39;Plot&#39;, &#39;Rep&#39;, &#39;Row&#39;, &#39;Column&#39;, &#39;Chem.Trt&#39;, &#39;Chemical&#39;, &#39;Row.Spacing.(m)&#39;, &#39;Treatment.No&#39;, &#39;Treatment&#39;, &#39;Population.plsnts/ha&#39;, &#39;2017-03-07&#39;, &#39;2017-03-19&#39;, &#39;2017-03-24&#39;, &#39;2017-04-02&#39;, &#39;2017-04-10&#39;, &#39;2017-04-18&#39;, &#39;Yield.t/ha&#39;, &#39;Grain.Moisture.%&#39;, &#39;Temp.moisture.Taken&#39;, &#39;100.grain.wt.Grams&#39;)] # could also use gsub to remove Ts in the treatment variable Fogerty_17$Treatment.No &lt;- as.numeric(unlist(strsplit( Fogerty_17$Treatment.No, &quot;T&quot;))[ seq(from = 2, to = 324, by = 2)]) 3.4.11.1 Define treatment data Fogerty_17_dat &lt;- Fogerty_17 %&gt;% mutate(trade_name = case_when(Chem.Trt == 1 ~ &quot;Folicur&quot;, Chem.Trt == 2 ~ &quot;Throttle&quot;, Chem.Trt == 3 ~ &quot;Custodia&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(fungicide_ai = as.character(case_when(Chem.Trt == 1 ~ &quot;tebuconazole&quot;, Chem.Trt == 2 ~ &quot;propiconazole&quot;, Chem.Trt == 3 ~ &quot;200 g/L tebuconazole + 120 g/L azoxystrobin&quot;, TRUE ~ &quot;other&quot;)))%&gt;% mutate(dose_ai.ha = case_when(Chem.Trt == 1 ~ 62, Chem.Trt == 2 ~ 125, Chem.Trt == 3 ~ 60, TRUE ~ NA_real_))%&gt;% mutate(fungicide_application_1 = case_when(Treatment.No == 1 ~ as.Date(NA), Treatment.No == 2 ~ as.Date(&quot;2017-02-22&quot;, format = &quot;%Y-%m-%d&quot;), Treatment.No == 3 ~ as.Date(&quot;2017-03-08&quot;, format = &quot;%Y-%m-%d&quot;), Treatment.No == 4 ~ as.Date(&quot;2017-03-08&quot;, format = &quot;%Y-%m-%d&quot;), Treatment.No == 5 ~ as.Date(&quot;2017-03-19&quot;, format = &quot;%Y-%m-%d&quot;), Treatment.No == 6 ~ as.Date(&quot;2017-03-08&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Treatment.No == 4 ~ as.Date(&quot;2017-03-24&quot;, format = &quot;%Y-%m-%d&quot;), Treatment.No == 6 ~ as.Date(&quot;2017-04-02&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Treatment.No == 1 ~ 0, Treatment.No == 4 ~ 2, Treatment.No == 6 ~ 2, TRUE ~ 1)) 3.4.11.2 Input trial data # Remove zeros because of recording errors (some people recorded zero for no incidence when it should be 1) Fogerty_17_dat[Fogerty_17_dat$`2017-03-07` == 0 ,c(&quot;2017-03-07&quot;)] &lt;- 1 Fogerty_17_dat &lt;- data.frame(trial_ref = &quot;mung1617/02&quot;, year = &quot;2017&quot;, location = &quot;Missen Flats&quot;, host_genotype = &quot;Jade&quot;, trial_design = &quot;RCB&quot;, plot_length = 10, plot_width = 2, plant_density = Fogerty_17_dat$`Population.plsnts/ha`, row_spacing = Fogerty_17_dat$`Row.Spacing.(m)`, replicate = Fogerty_17_dat$Rep, planting_date = as.Date(&quot;2017-01-27&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = as.Date(&quot;2017-02-01&quot;, format = &quot;%Y-%m-%d&quot;), flowering_date = as.Date(NA), pod_fill_date = as.Date(NA), mid_late_pod_fill = as.Date(NA), first_sign_disease = as.Date(&quot;2017-03-07&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.character(Fogerty_17_dat$trade_name), fungicide_ai = as.character(Fogerty_17_dat$fungicide_ai), dose_ai.ha = Fogerty_17_dat$dose_ai.ha, n_treatment = as.numeric(Fogerty_17_dat$Treatment.No), fungicide_application_1 = Fogerty_17_dat$fungicide_application_1, fungicide_application_2 = Fogerty_17_dat$fungicide_application_2, total_fungicide = Fogerty_17_dat$spray_n, harvest_date = as.Date(&quot;2017-05-11&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2017-04-18&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = Fogerty_17_dat$`2017-04-18`, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Fogerty_17_dat$`Yield.t/ha`), AUDPC = apply(Fogerty_17_dat[,c(&quot;2017-03-07&quot;, &quot;2017-03-19&quot;, &quot;2017-03-24&quot;, &quot;2017-04-02&quot;,&quot;2017-04-10&quot;,&quot;2017-04-18&quot;)]-1,1, FUN = audpc, dates = c(1,12,17,26,34,42)), # -1 to the data because zero disease = 1 on rating scale// Dates are based off days from first sign AUDPS = apply(Fogerty_17_dat[,c(&quot;2017-03-07&quot;, &quot;2017-03-19&quot;, &quot;2017-03-24&quot;, &quot;2017-04-02&quot;,&quot;2017-04-10&quot;,&quot;2017-04-18&quot;)]-1,1, FUN = audps, dates = c(1,12,17,26,34,42)), stringsAsFactors = FALSE) 3.4.11.3 Calculating treatment means Fogerty_17_m &lt;- Fogerty_17_dat %&gt;% group_by(n_treatment, row_spacing, fungicide_ai) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), location = unique(location), host_genotype = unique(host_genotype), trial_design = unique(trial_design), trade_name = unique(trade_name), dose_ai.ha = unique(dose_ai.ha), trial_ref = unique(trial_ref), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = mean(plant_density, na.rm = TRUE), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = unique(emergence_date), flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), # Generating NAs so it will be repeated below D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ factor(n_treatment) + fungicide_ai + row_spacing, data = subset(Fogerty_17_dat, trade_name != &quot;Custodia&quot;)))[1,3], # of only triazoles Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment) + fungicide_ai + row_spacing, data = subset(Fogerty_17_dat, trade_name != &quot;Custodia&quot;)))[1,3] # of only triazoles ) ## `summarise()` regrouping output by &#39;n_treatment&#39;, &#39;row_spacing&#39; (override with `.groups` argument) # For some weird reason standard deviations are comming back NA in the code above Fogerty_17_m[,c(&quot;n_treatment&quot;,&quot;row_spacing&quot;, &quot;disease_error&quot;,&quot;yield_error&quot;)] &lt;- Fogerty_17_dat %&gt;% group_by(n_treatment, row_spacing, fungicide_ai) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) %&gt;% select(c(&quot;n_treatment&quot;,&quot;row_spacing&quot;,&quot;disease_error&quot;,&quot;yield_error&quot;)) ## `summarise()` regrouping output by &#39;n_treatment&#39;, &#39;row_spacing&#39; (override with `.groups` argument) # Define control treatments Fogerty_17_m[Fogerty_17_m$n_treatment == 1, &quot;fungicide_ai&quot;] &lt;- &quot;control&quot; Fogerty_17_m[Fogerty_17_m$n_treatment == 1,&quot;dose_ai.ha&quot;] &lt;- 0 Fogerty_17_m[Fogerty_17_m$n_treatment == 1, &quot;trade_name&quot;] &lt;- &quot;control&quot; # Format and organise the dataframe Fogerty_17_m &lt;- fold_data(Fogerty_17_m, PM_MB_means) Fogerty_17_m &lt;- copy_class(PM_MB_means, Fogerty_17_m) # I have comment out this code because it does not replace the control plots properly as there is nothing to separate them from each other # insert new calculations into data #PM_MB_means &lt;- # replace_data(template_data = PM_MB_means, # new_data = Fogerty_17_m, # new_data_column = &quot;AUDPC_m&quot;, # ignore_columns = c(5:8,10:16,29:46), # subset_factor = &quot;mung1617/02&quot;) if(all(dim(Fogerty_17_m) == dim(PM_MB_means[PM_MB_means$trial_ref == &quot;mung1617/02&quot;,]))){ PM_MB_means[PM_MB_means$trial_ref == &quot;mung1617/02&quot;,] &lt;- Fogerty_17_m }else{warning(&quot;Dimensions don&#39;t match check data&quot;)} write.csv( Fogerty_17_m, here(&quot;cache/Fogerty_17_mean.csv&quot;), row.names = FALSE ) 3.4.12 Hermitage 2017 # _____________ Hermitage 2017 ____________ Herm_17 &lt;- read.xlsx( here(&quot;data/Hermitage working file 2017 .xlsx&quot;), sheet = &quot;Hermitage Trial&quot;, rows = 3:165, cols = 1:38, colNames = TRUE, detectDates = TRUE ) # Adjust the Yield to 12% moisture Herm_17$`Yield.T/Ha` &lt;- (Herm_17$`Yield.T/Ha` / Herm_17$`Moisture%`) * 12 3.4.12.1 Define treatment data Herm_17_dat &lt;- Herm_17 %&gt;% mutate(trade_name = case_when(Chemical.Trt == 1 ~ &quot;Folicur&quot;, Chemical.Trt == 2 ~ &quot;Throttle&quot;, Chemical.Trt == 3 ~ &quot;Custodia&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(fungicide_ai = case_when(Chemical.Trt == 1 ~ &quot;tebuconazole&quot;, Chemical.Trt == 2 ~ &quot;propiconazole&quot;, Chemical.Trt == 3 ~ &quot;200 g/L tebuconazole + 120 g/L azoxystrobin&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(dose_ai.ha = case_when(Chemical.Trt == 1 ~ 62, Chemical.Trt == 2 ~ 125, Chemical.Trt == 3 ~ 60, TRUE ~ 9999))%&gt;% mutate(fungicide_application_1 = case_when(Manage.Trt == &quot;1&quot; ~ as.Date(NA), Manage.Trt == &quot;T2&quot; ~ as.Date(&quot;2017-03-13&quot;, format = &quot;%Y-%m-%d&quot;), Manage.Trt == &quot;T3&quot; ~ as.Date(&quot;2017-03-24&quot;, format = &quot;%Y-%m-%d&quot;), Manage.Trt == &quot;T4&quot; ~ as.Date(&quot;2017-03-27&quot;, format = &quot;%Y-%m-%d&quot;), Manage.Trt == &quot;T5&quot; ~ as.Date(&quot;2017-03-27&quot;, format = &quot;%Y-%m-%d&quot;), Manage.Trt == &quot;T6&quot; ~ as.Date(&quot;2017-04-05&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(Manage.Trt == &quot;T3&quot; ~ as.Date(&quot;2017-04-07&quot;, format = &quot;%Y-%m-%d&quot;), Manage.Trt == &quot;T5&quot; ~ as.Date(&quot;2017-04-11&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Manage.Trt == &quot;1&quot; ~ 0, Manage.Trt == &quot;T3&quot; ~ 2, Manage.Trt == &quot;T5&quot; ~ 2, TRUE ~ 1)) 3.4.12.2 Input trial data Herm_17_dat &lt;- data.frame(trial_ref = &quot;mung1617/01&quot;, year = &quot;2017&quot;, location = &quot;Hermitage&quot;, host_genotype = &quot;Jade&quot;, trial_design = &quot;RCB&quot;, plot_length = Herm_17_dat$Plot.Length, plot_width = 2, plant_density = NA, row_spacing = Herm_17_dat$`Row.Spacing.(m)`, replicate = Herm_17_dat$Rep, planting_date = as.Date(&quot;2017-02-13&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = as.Date(&quot;2017-02-20&quot;, format = &quot;%Y-%m-%d&quot;), flowering_date = as.Date(NA), pod_fill_date = as.Date(NA), mid_late_pod_fill = as.Date(NA), first_sign_disease = as.Date(&quot;2017-03-24&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.character(Herm_17_dat$trade_name), fungicide_ai = Herm_17_dat$fungicide_ai, dose_ai.ha = Herm_17_dat$dose_ai.ha, n_treatment = as.numeric(unlist(strsplit(Herm_17_dat$Manage.Trt, &quot;T&quot;) )[unlist(strsplit(Herm_17_dat$Manage.Trt, &quot;T&quot;)) != &quot;&quot;]), fungicide_application_1 = Herm_17_dat$fungicide_application_1, fungicide_application_2 = Herm_17_dat$fungicide_application_2, total_fungicide = Herm_17_dat$spray_n, harvest_date = as.Date(&quot;2017-06-26&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2017-05-11&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = Herm_17_dat$`I_11/05/2017`, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Herm_17_dat$`Yield.T/Ha`), stringsAsFactors = FALSE) Herm_17_dat &lt;- cbind(Herm_17_dat,data.frame( AUDPC = apply(data.frame(zero = 0, Herm_17[,c(&quot;2017-03-24&quot;,&quot;I_2/04/2017&quot;, &quot;I_11/04/2017&quot;, &quot;I_18/04/2017&quot;, &quot;I_24/04/2017&quot;,&quot;I_3/05/2017&quot;,&quot;I_11/05/2017&quot;)]-1),1, FUN = audpc, dates = c((Herm_17_dat$first_sign_disease[1]-7)- Herm_17_dat$planting_date[1], 39,48,57,64,70,79,87) ), AUDPS = apply(data.frame(zero = 0, Herm_17[,c(&quot;2017-03-24&quot;,&quot;I_2/04/2017&quot;, &quot;I_11/04/2017&quot;, &quot;I_18/04/2017&quot;, &quot;I_24/04/2017&quot;,&quot;I_3/05/2017&quot;,&quot;I_11/05/2017&quot;)]-1),1, FUN = audps, dates = c((Herm_17_dat$first_sign_disease[1]-7)- Herm_17_dat$planting_date[1], 39,48,57,64,70,79,87)) )) 3.4.12.3 Calculating treatment means Herm_17_m &lt;- Herm_17_dat %&gt;% group_by(n_treatment, fungicide_ai,row_spacing) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), location = unique(location), host_genotype = unique(host_genotype), trial_design = unique(trial_design), trade_name = unique(trade_name), dose_ai.ha = unique(dose_ai.ha), trial_ref = unique(trial_ref), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = mean(plant_density, na.rm = TRUE), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = unique(emergence_date), flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), # why is this not working D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ factor(n_treatment) + fungicide_ai + row_spacing, data = subset(Herm_17_dat, trade_name != &quot;Custodia&quot;)))[1,3], # of only triazoles Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment) + fungicide_ai + row_spacing, data = subset(Herm_17_dat, trade_name != &quot;Custodia&quot;)))[1,3] # of only triazoles ) ## `summarise()` regrouping output by &#39;n_treatment&#39;, &#39;fungicide_ai&#39; (override with `.groups` argument) # For some weird reason standard deviations are comming back NA in the code above Herm_17_m[,c(&quot;n_treatment&quot;,&quot;fungicide_ai&quot;,&quot;row_spacing&quot;, &quot;disease_error&quot;,&quot;yield_error&quot;)] &lt;- Herm_17_dat %&gt;% group_by(n_treatment, fungicide_ai,row_spacing) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) %&gt;% select(c(&quot;n_treatment&quot;,&quot;fungicide_ai&quot;,&quot;row_spacing&quot;,&quot;disease_error&quot;,&quot;yield_error&quot;)) ## `summarise()` regrouping output by &#39;n_treatment&#39;, &#39;fungicide_ai&#39; (override with `.groups` argument) # Add control treatment detail Herm_17_m &lt;- data.frame(Herm_17_m) Herm_17_m[Herm_17_m$n_treatment == 1, &quot;fungicide_ai&quot;] &lt;- &quot;control&quot; Herm_17_m[Herm_17_m$n_treatment == 1,&quot;dose_ai.ha&quot;] &lt;- 0 Herm_17_m[Herm_17_m$n_treatment == 1, &quot;trade_name&quot;] &lt;- &quot;control&quot; Herm_17_m &lt;- fold_data(Herm_17_m, PM_MB_means) Herm_17_m &lt;- copy_class(PM_MB_means,Herm_17_m) if(all(dim(Herm_17_m) == dim(PM_MB_means[PM_MB_means$trial_ref == &quot;mung1617/01&quot;,]))){ PM_MB_means[PM_MB_means$trial_ref == &quot;mung1617/01&quot;,] &lt;- Herm_17_m }else{warning(&quot;Dimensions don&#39;t match check data&quot;)} write.csv( Herm_17_m, here(&quot;cache/Hermitage_17_mean.csv&quot;), row.names = FALSE ) 3.4.13 Wellcamp 2018 Well_18 &lt;- read.xlsx( here(&quot;data/Wellcamp Fungicide x Row Spacing x Plant Population - Experimental Design Fogarty 2018.xlsx&quot;), sheet = &quot;Data&quot;, startRow = 1, colNames = TRUE ) colnames(Well_18)[13:14] &lt;- c(&quot;Row.Spacing_ID&quot;, &quot;Fungicide_ID&quot;) 3.4.13.1 Define treatment data Well_18_dat &lt;- Well_18 %&gt;% mutate(trade_name = case_when(Fung.Trt == 1 ~ &quot;Folicur&quot;, Fung.Trt == 3 ~ &quot;Throttle&quot;, Fung.Trt == 2 ~ &quot;Custodia&quot;, Fung.Trt == 4 ~ &quot;control&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(fungicide_ai = case_when(Fung.Trt == 1 ~ &quot;tebuconazole&quot;, Fung.Trt == 3 ~ &quot;propiconazole&quot;, Fung.Trt == 2 ~ &quot;200 g/L tebuconazole + 120 g/L azoxystrobin&quot;, Fung.Trt == 4 ~ &quot;control&quot;, TRUE ~ &quot;other&quot;))%&gt;% mutate(dose_ai.ha = case_when(Fung.Trt == 1 ~ 60, Fung.Trt == 2 ~ 62, Fung.Trt == 3 ~ 125, Fung.Trt == 4 ~ 0, TRUE ~ 9999))%&gt;% mutate(Row.Spacing = case_when(Row.Sp.Trt == 1 ~ 0.25, Row.Sp.Trt == 2 ~ 0.5, Row.Sp.Trt == 3 ~ 1, TRUE ~ 9999))%&gt;% mutate(fungicide_application_2 = case_when(Fung.Trt &lt;= 3 ~ as.Date(&quot;2018-04-16&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_1 = case_when(Fung.Trt == 4 ~ as.Date(NA), Fung.Trt == 1 ~ as.Date(&quot;2018-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Fung.Trt == 2 ~ as.Date(&quot;2018-03-28&quot;, format = &quot;%Y-%m-%d&quot;), Fung.Trt == 3 ~ as.Date(&quot;2018-03-28&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(Fung.Trt &lt;= 3 ~ 2, Fung.Trt == 4 ~ 0, TRUE ~ NA_real_)) 3.4.13.2 Input trial data Well_18_dat &lt;- data.frame(trial_ref = &quot;mung1718/01&quot;, year = &quot;2018&quot;, location = &quot;Wellcamp&quot;, host_genotype = &quot;Jade&quot;, trial_design = &quot;RCB&quot;, plot_length = Well_18_dat$Row.Length, plot_width = 2, plant_density = Well_18_dat$Plant.Pop, row_spacing = Well_18_dat$Row.Spacing, replicate = Well_18_dat$Rep, planting_date = as.Date(&quot;2018-02-13&quot;, format = &quot;%Y-%m-%d&quot;), emergence_date = as.Date(NA), flowering_date = as.Date(NA), pod_fill_date = as.Date(NA), mid_late_pod_fill = as.Date(NA), first_sign_disease = as.Date(&quot;2018-03-21&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(Well_18_dat$trade_name), fungicide_ai = Well_18_dat$fungicide_ai, dose_ai.ha = Well_18_dat$dose_ai.ha, n_treatment = Well_18_dat$Treatment, fungicide_application_1 = Well_18_dat$fungicide_application_1, fungicide_application_2 = Well_18_dat$fungicide_application_2, total_fungicide = Well_18_dat$spray_n, harvest_date = as.Date(&quot;2018-05-31&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = as.Date(&quot;2018-05-02&quot;, format = &quot;%Y-%m-%d&quot;), PM_final_severity = Well_18_dat$`IR.2-5-18`, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Well_18_dat$`Yield./.ha`) ) # Calculate AUDPC Well_18_dat &lt;- cbind(Well_18_dat, AUDPC = apply(data.frame(zero = 0, Well_18[,c(&quot;IR.23-3-18&quot;,&quot;IR.5-4-18&quot;, &quot;IR.11-4-18&quot;, &quot;IR.18-4-18&quot;,&quot;IR.26-4-18&quot;,&quot;IR.2-5-18&quot;)]-1), 1, FUN = audpc, dates = c((Well_18_dat$first_sign_disease[1]-7)- Well_18_dat$planting_date[1], 38,51 ,57,64,72,78) ), AUDPS = apply(data.frame(zero = 0, Well_18[,c(&quot;IR.23-3-18&quot;,&quot;IR.5-4-18&quot;, &quot;IR.11-4-18&quot;, &quot;IR.18-4-18&quot;,&quot;IR.26-4-18&quot;,&quot;IR.2-5-18&quot;)]-1), 1, FUN = audps, dates = c((Well_18_dat$first_sign_disease[1]-7)- Well_18_dat$planting_date[1], 38,51 ,57,64,72,78) ) ) 3.4.13.3 Calculating treatment means Well_18_m &lt;- Well_18_dat %&gt;% group_by(host_genotype, n_treatment, row_spacing, fungicide_ai) %&gt;% summarise(trial_ref = unique(trial_ref), year = unique(year), location = unique(location), trial_design = unique(trial_design), trade_name = unique(trade_name), dose_ai.ha = unique(dose_ai.ha), trial_ref = unique(trial_ref), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = mean(plant_density, na.rm = TRUE), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = unique(emergence_date), flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), total_fungicide = unique(total_fungicide), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), # Generates NAs repeated below D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Inc_Ms = anova(lm(AUDPC ~ factor(n_treatment) + fungicide_ai + row_spacing, data = subset(Well_18_dat, trade_name != &quot;Custodia&quot;)))[1,3], # of only triazoles Y_Msquare = anova(lm(grain_yield.t.ha. ~ factor(n_treatment) + fungicide_ai + row_spacing, data = subset(Well_18_dat, trade_name != &quot;Custodia&quot;)))[1,3] # of only triazoles ) ## `summarise()` regrouping output by &#39;host_genotype&#39;, &#39;n_treatment&#39;, &#39;row_spacing&#39; (override with `.groups` argument) # For some weird reason standard deviations are coming back NA in the code above Well_18_m[,c(&quot;n_treatment&quot;,&quot;row_spacing&quot;, &quot;disease_error&quot;,&quot;yield_error&quot;)] &lt;- Well_18_dat %&gt;% group_by(n_treatment, row_spacing, fungicide_ai) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) %&gt;% select(c(&quot;disease_error&quot;,&quot;yield_error&quot;)) ## `summarise()` regrouping output by &#39;n_treatment&#39;, &#39;row_spacing&#39; (override with `.groups` argument) ## Adding missing grouping variables: `n_treatment`, `row_spacing` Well_18_m &lt;- fold_data(Well_18_m, PM_MB_means) Well_18_m &lt;- copy_class(PM_MB_means,Well_18_m) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Well_18_m, new_data_column = c(&quot;total_fungicide&quot;,&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;), filter_cols = c(&quot;trial_ref&quot;,&quot;year&quot;,&quot;location&quot;,&quot;n_treatment&quot;)) ## No data changed 0/24 write.csv( Well_18_m, here(&quot;cache/Wellcamp_18_mean.csv&quot;), row.names = FALSE ) 3.4.14 Hermitage 2019 PM_MB_19 &lt;- read.xlsx( here(&quot;data/1901 Mungbean powdery mildew disease and yeild data.xlsx&quot;), startRow = 2, cols = c(1:21) ) # Remove these plots as the results can&#39;t be trusted PM_MB_19 &lt;- subset(PM_MB_19, Harvest.Plot.Number != 5) PM_MB_19 &lt;- subset(PM_MB_19, Harvest.Plot.Number != 6) # Calculate area under the disease progress curve PM_MB_19$AUDPC &lt;- apply(data.frame(zero = 0,PM_MB_19[,c(&quot;15-4-19.Incedence&quot;, &quot;23-4-19.Incedence&quot;, &quot;1-5-19.Incedence&quot;)]-1),1,FUN = audpc, dates = c(60, 70,78,86)) PM_MB_19$AUDPS &lt;- apply(data.frame(zero = 0,PM_MB_19[,c(&quot;15-4-19.Incedence&quot;, &quot;23-4-19.Incedence&quot;, &quot;1-5-19.Incedence&quot;)]-1),1,FUN = audps, dates = c(60, 70,78,86)) # Calculate area under the disease progress curve for plots which were not assessed at on 2019-05-01 PM_MB_19[is.na(PM_MB_19$`1-5-19.Incedence`),&quot;AUDPC&quot;] &lt;- apply(data.frame(zero = 0,PM_MB_19[is.na(PM_MB_19$`1-5-19.Incedence`), c(&quot;15-4-19.Incedence&quot;, &quot;23-4-19.Incedence&quot;)]-1), 1,FUN = audpc, dates = c(60, 70,78)) PM_MB_19[is.na(PM_MB_19$`1-5-19.Incedence`),&quot;AUDPS&quot;] &lt;- apply(data.frame(zero = 0,PM_MB_19[is.na(PM_MB_19$`1-5-19.Incedence`), c(&quot;15-4-19.Incedence&quot;, &quot;23-4-19.Incedence&quot;)]-1), 1,FUN = audps, dates = c(60, 70,78)) 3.4.14.1 Define treatment data Herm_19_dat &lt;- PM_MB_19 %&gt;% mutate(fungicide_application_1 = case_when(`T/ment.NUM` == 1 ~ as.Date(&quot;2018-04-15&quot;, format = &quot;%Y-%m-%d&quot;), `T/ment.NUM` == 2 ~ as.Date(&quot;2018-04-15&quot;, format = &quot;%Y-%m-%d&quot;), `T/ment.NUM` == 3 ~ as.Date(&quot;2018-04-23&quot;, format = &quot;%Y-%m-%d&quot;), `T/ment.NUM` == 4 ~ as.Date(NA), TRUE ~ as.Date(NA)))%&gt;% mutate(fungicide_application_2 = case_when(`T/ment.NUM` == 2 ~ as.Date(&quot;2018-04-29&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(spray_n = case_when(`T/ment.NUM` == 2 ~ 2, `T/ment.NUM` == 1 ~ 1, `T/ment.NUM` == 3 ~ 1, TRUE ~ 0))%&gt;% mutate(trial_ref = case_when(TOS.NUM == 1 ~ &quot;mung1819/01&quot;, TOS.NUM == 2 ~ &quot;mung1819/02&quot;, TRUE ~ NA_character_))%&gt;% mutate(planting_date = case_when(TOS.NUM == 1 ~ as.Date(&quot;2018-02-04&quot;, format = &quot;%Y-%m-%d&quot;), TOS.NUM == 2 ~ as.Date(&quot;2018-02-18&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(emergence_date = case_when(TOS.NUM == 1 ~ as.Date(&quot;2018-02-11&quot;, format = &quot;%Y-%m-%d&quot;), TOS.NUM == 2 ~ as.Date(&quot;2018-02-25&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(final_assessment = case_when(TOS.NUM == 1 ~ as.Date(&quot;2018-04-24&quot;, format = &quot;%Y-%m-%d&quot;), TOS.NUM == 2 ~ as.Date(&quot;2018-05-01&quot;, format = &quot;%Y-%m-%d&quot;), TRUE ~ as.Date(NA)))%&gt;% mutate(PM_final_severity = case_when(is.na(`1-5-19.Incedence`) ~ `23-4-19.Incedence`, TRUE ~ `1-5-19.Incedence`))%&gt;% mutate(trade_name = case_when(`T/ment.NUM` == 4 ~ &quot;control&quot;, TRUE ~ &quot;Folicur&quot;))%&gt;% mutate(fungicide_ai = case_when(`T/ment.NUM` == 4 ~ &quot;control&quot;, TRUE ~ &quot;tebuconazole&quot;))%&gt;% mutate(dose_ai.ha = case_when(`T/ment.NUM` == 4 ~ 0, TRUE ~ 62))%&gt;% mutate(Y_Msquare = case_when(TOS.NUM == 1 ~ anova(lm(Yeild/1000 ~ factor(`T/ment.NUM`) , data = PM_MB_19[PM_MB_19$TOS.NUM == 1,]))[1,3], TOS.NUM == 2 ~ anova(lm(Yeild/1000 ~ factor(`T/ment.NUM`) , data = PM_MB_19[PM_MB_19$TOS.NUM == 2,]))[1,3], TRUE ~ NA_real_))%&gt;% mutate(Inc_Ms = case_when(TOS.NUM == 1 ~ anova(lm(AUDPC ~ factor(`T/ment.NUM`) , data = PM_MB_19[PM_MB_19$TOS.NUM == 1,]))[1,3], TOS.NUM == 2 ~ anova(lm(AUDPC ~ factor(`T/ment.NUM`) , data = PM_MB_19[PM_MB_19$TOS.NUM == 2,]))[1,3], TRUE ~ NA_real_)) 3.4.14.2 Input trial data Herm_19_dat &lt;- data.frame(trial_ref = Herm_19_dat$trial_ref, year = &quot;2019&quot;, location = &quot;Hermitage&quot;, host_genotype = &quot;Jade&quot;, trial_design = &quot;RCB&quot;, plot_length = Herm_19_dat$Plot.Lengths, plot_width = 2, plant_density = NA_character_, row_spacing = 0.25, replicate = Herm_19_dat$Rep.Num, planting_date = Herm_19_dat$planting_date, emergence_date = Herm_19_dat$emergence_date, flowering_date = as.Date(NA), pod_fill_date = as.Date(NA), mid_late_pod_fill = as.Date(NA), first_sign_disease = as.Date(&quot;2018-04-12&quot;, format = &quot;%Y-%m-%d&quot;), trade_name = as.factor(Herm_19_dat$trade_name), fungicide_ai = Herm_19_dat$fungicide_ai, dose_ai.ha = Herm_19_dat$dose_ai.ha, n_treatment = Herm_19_dat$`T/ment.NUM`, fungicide_application_1 = Herm_19_dat$fungicide_application_1, fungicide_application_2 = Herm_19_dat$fungicide_application_2, total_fungicide = Herm_19_dat$spray_n, harvest_date = as.Date(&quot;2018-05-22&quot;, format = &quot;%Y-%m-%d&quot;), final_assessment = Herm_19_dat$final_assessment, PM_final_severity = Herm_19_dat$PM_final_severity, rating_scale = &quot;1-9&quot;, grain_yield.t.ha. = as.numeric(Herm_19_dat$Yeild)/1000, Y_Msquare = Herm_19_dat$Y_Msquare, Inc_Ms = Herm_19_dat$Inc_Ms, AUDPC = Herm_19_dat$AUDPC, AUDPS = Herm_19_dat$AUDPS ) Herm_19_m &lt;- Herm_19_dat %&gt;% group_by(trial_ref, n_treatment) %&gt;% summarise(year = unique(year), location = unique(location), host_genotype = &quot;Jade&quot;, trial_design = unique(trial_design), trade_name = unique(trade_name), dose_ai.ha = unique(dose_ai.ha), plot_length.m. = mean(plot_length, na.rm = TRUE), plot_width.m. = mean(plot_width, na.rm = TRUE), plant_density = &quot;40k&quot;, row_spacing = unique(row_spacing), replicates = length(as.numeric(replicate)), planting_date = unique(planting_date), emergence_date = unique(emergence_date), flowering_date = unique(flowering_date), pod_fill_date = unique(pod_fill_date), mid_late_pod_fill = unique(mid_late_pod_fill), first_sign_disease = unique(first_sign_disease), fungicide_application_1 = unique(fungicide_application_1), fungicide_application_2 = unique(fungicide_application_2), total_fungicide = unique(total_fungicide), fungicide_ai = unique(fungicide_ai), harvest_date = unique(harvest_date), final_assessment = unique(final_assessment), PM_final_severity = mean(PM_final_severity, na.rm = TRUE), rating_scale = unique(rating_scale), disease_error = sd(PM_final_severity, na.rm = TRUE), # Producing NAs so code is repeated below D_error_type = &quot;stdev&quot;, grain_yield.t.ha. = mean(grain_yield.t.ha., na.rm = TRUE), raw_graded = NA, yield_error = sd(grain_yield.t.ha., na.rm = TRUE), Y_error_type = &quot;stdev&quot;, AUDPC_m = mean(AUDPC), AUDPC_sd = sd(AUDPC), AUDPS_m = mean(AUDPS), AUDPS_sd = sd(AUDPS), Y_Msquare = unique(Y_Msquare), Inc_Ms = unique(Inc_Ms) ) ## `summarise()` regrouping output by &#39;trial_ref&#39; (override with `.groups` argument) # For some weird reason standard deviations are comming back NA in the code above Herm_19_m[,c(&quot;trial_ref&quot;,&quot;disease_error&quot;,&quot;yield_error&quot;)] &lt;- Herm_19_dat %&gt;% group_by(trial_ref, n_treatment) %&gt;% summarise(disease_error = sd(PM_final_severity, na.rm = TRUE), yield_error = sd(grain_yield.t.ha., na.rm = TRUE)) %&gt;% select(c(&quot;disease_error&quot;,&quot;yield_error&quot;)) ## `summarise()` regrouping output by &#39;trial_ref&#39; (override with `.groups` argument) ## Adding missing grouping variables: `trial_ref` Herm_19_m &lt;- fold_data(Herm_19_m, PM_MB_means) # insert new calculations into data PM_MB_means &lt;- replace_data(template_data = PM_MB_means, new_data = Herm_19_m, new_data_column = c(&quot;AUDPC_m&quot;, &quot;AUDPC_sd&quot;, &quot;AUDPS_m&quot;,&quot;AUDPS_sd&quot;,&quot;Y_Msquare&quot;, &quot;Inc_Ms&quot;), filter_cols = c(&quot;trial_ref&quot;, &quot;year&quot;, &quot;location&quot;, &quot;host_genotype&quot;, &quot;fungicide_ai&quot;, &quot;dose_ai.ha&quot;,&quot;n_treatment&quot;)) ## ## Row number/s from template data replaced: c(350) ## total replacements = 1/8 write.csv( Herm_19_m, here(&quot;cache/Hermitage_19_mean.csv&quot;), row.names = FALSE ) write.csv(PM_MB_means, file = here(&quot;cache/PM_MB_updated.csv&quot;), row.names = FALSE) "],
["preliminary-analysis.html", "4 Preliminary Analysis 4.1 Explore and Visualise Data", " 4 Preliminary Analysis 4.1 Explore and Visualise Data First let’s import the data. Each row provides the mean yield for each experimental treatment. PM_MB_means &lt;- import_data() The data explored in the PM_MB_means data frame is a list of mean values from each treatment in each respective experiment. These preliminary analyses will focus on the change in mungbean yields, which is attributable to the fungicide treatment. Later in this document we will also consider the impact of fungicide treatments on disease incidence/severity. Mean powdery mildew incidence was recorded at the end of each growing season. Some experiments recorded disease incidence throughout the season and these were summarised with AUDPC. AUDPC for trials which only provided final powdery mildew incidence was calculated using the record of ‘first sign of disease’ and final assessment. More details on how the PM_MB_means data was compiled can be found in the ‘Data wrangle vingette’ Various factors have been studied in the previous experiments which may influence the subsequent meta-analysis. On this page, unless stated, the following plots and analyses were made disregarding other effects. The following factors are postulated to influence mungbean grain yield and/or powdery mildew mean plot severity. 1 Fungicide type 2 Fungicide dose (varies only slightly within some fungicide types) 3 Number of fungicide sprays 4 Timing of fungicide spray/s relative to first sign of disease 5 Host cultivar (probably is a co-variate with season due to changing cultivars over time) 6 Experiment location 7 Row spacing 8 In-crop rainfall 9 Irrigated versus non-irrigated trials 10 Mean daily temperature in the weeks following spray application 11 Final disease rating 12 Two pathogen species cause PM (new discovery in 2018) The data plotted below are from 26 field trials between (2001 - 2019) of which the details are described in the studies considered in meta-analysis section. 4.1.1 Fungicides 4.1.1.1 Fungicide type First let’s standardise the sulphur treatments. Some early experiments tested different formulations. There was no difference in the sulphur formulations so we will refer to all of them as “sulphur”. # Remove the variation in different sulphur formulations unique(PM_MB_means[grep(&quot;sulphur&quot;, PM_MB_means$fungicide_ai), &quot;fungicide_ai&quot;]) ## [1] sulphur sulphur (SC) sulphur (WP) sulphur (Ultra SC) ## 14 Levels: 200 g/L azoxystrobin + 80 g/L cyproconazole ... PM_MB_means[grep(&quot;sulphur&quot;, PM_MB_means$fungicide_ai), &quot;fungicide_ai&quot;] &lt;- &quot;sulphur&quot; Let’s explore how many different types of fungicide were used and at what frequency. PM_MB_means %&gt;% group_by(fungicide_ai, trial_ref) %&gt;% summarise() %&gt;% count(sort = TRUE) %&gt;% rename(Trials = n) %&gt;% ggplot(aes(x = reorder(fungicide_ai, Trials), y = Trials)) + xlab(&quot;Fungicide active ingredient&quot;) + ylab(&quot;N Trials&quot;) + geom_col() + scale_fill_usq() + ggtitle(label = &quot;Number of trials in which the\\nspecified fungicide was used&quot;) + scale_colour_usq() + coord_flip() ## `summarise()` regrouping output by &#39;fungicide_ai&#39; (override with `.groups` argument) The demethylation inhibitors (DMI), tebuconazole and propiconazole, are used in the highest frequencies, along with sulphur. The DMIs have the same fungicide mode of action and are good candidates to be pooled in the meta-analysis. Amistar Xtra and Custodia both contain strobilurin and triazole, however, because they contain differing dose ratios (inverted) pooling may not be appropriate. Perhaps best way forward is to focus the meta-analysis on only the DMIs. This can then be compared to an additional meta-analysis including azoxystrobin as a comparison. Before we exclude non-DMI fungicides let’s have a look at the efficacy of the other fungicides in comparison to the DMIs. For this comparison we will focus on the proportional yield saved, relative to the no spray control. The primary focus of this research is the effect of fungicide on mitigating yield loss due to disease. We are using proportional yield, relative to the no spray control, to reduce the effect of location and seasonal influences. Let’s investigate the difference in the effect of the type of fungicide on proportion of yield saved, but first we need to calculate yield saved relative to the no spray control. PM_MB_means$grain_yield.t.ha. &lt;- as.numeric(PM_MB_means$grain_yield.t.ha.) # NAs produced due to some cells having text description to why there is no specific data for (i in unique(PM_MB_means$trial_ref)) { # Loop code over each trial reference dat1 &lt;- PM_MB_means[PM_MB_means$trial_ref == i, ] if (any(is.na(unique(dat1$row_spacing)))) { # If there is no recorded row.spacing don&#39;t calculate proportional yield, skip to the next trial warning( unique(dat1$trial_ref), &quot;at&quot;, unique(dat1$location), &quot;in year&quot;, unique(dat1$year), &quot;has unknown row.spacing (NA)\\n &#39;yield_gain&#39; and &#39;proportional yield gain&#39; not calculated\\n&quot; ) next() } for (j in unique(dat1$row_spacing)) { # Loop within trial row_spacing dat2 &lt;- dat1[dat1$row_spacing == j, ] controlY &lt;- mean(dat2[dat2$fungicide_ai == &quot;control&quot;, &quot;grain_yield.t.ha.&quot;]) #Mean taken as some trials had multiple control reps # Calculate the yield gain relative to the no spray control (controlY) dat2$yield_gain &lt;- dat2$grain_yield.t.ha. - controlY dat2$prop_YG &lt;- dat2$yield_gain / controlY # insert NA as yeild_gain and proportional yield gain for the controls dat2[dat2$fungicide_ai == &quot;control&quot;, c(&quot;yield_gain&quot;, &quot;prop_YG&quot;)] &lt;- NA # Reassign values to row_spacing subset dat1[dat1$row_spacing == j, ] &lt;- dat2 } # Reassign values to trial_ref subset PM_MB_means[PM_MB_means$trial_ref == i, ] &lt;- dat1 } ## Warning: AM1303atPremerin year2013has unknown row.spacing (NA) ## &#39;yield_gain&#39; and &#39;proportional yield gain&#39; not calculated # ____________________________________________ # calculate yield gain and prop_yield gain for experiments with no row spacing data dat1 &lt;- PM_MB_means[PM_MB_means$trial_ref == &quot;AM1303&quot;, ] controlY &lt;- mean(dat1[dat1$fungicide_ai == &quot;control&quot;, &quot;grain_yield.t.ha.&quot;]) dat1$yield_gain &lt;- dat1$grain_yield.t.ha. - controlY dat1$prop_YG &lt;- dat1$yield_gain / controlY dat1[dat1$fungicide_ai == &quot;control&quot;, c(&quot;yield_gain&quot;, &quot;prop_YG&quot;)] &lt;- c(NA, NA) PM_MB_means[PM_MB_means$trial_ref == &quot;AM1303&quot;, ] &lt;- dat1 write.csv(PM_MB_means, &quot;cache/1911_PM_MB_means&amp;Ygains.csv&quot;) Now we have calculated proportional yield savings we can inspect the difference between the fungicide active ingredients PM_MB_means %&gt;% group_by(fungicide_ai, total_fungicide) %&gt;% summarise( n = length(prop_YG), lower_2.5 = quantile(prop_YG, na.rm = T, c(0.025)), median = median(prop_YG, na.rm = T), mean = mean(prop_YG, na.rm = T), upper_97.5 = quantile(prop_YG, na.rm = T, c(0.975)) ) %&gt;% filter(n &gt;= 5) %&gt;% # remove any fungicide groups with less than 5 observations arrange(desc(median)) %&gt;% kable( caption = &quot;Fungicide effect on proportion of yield gain.&quot;, col.names = c( &quot;Fungicide active ingredient&quot;, &quot;Total fungicide applications&quot;, &quot;n Treatments&quot;, &quot;2.5% quartile&quot;, &quot;Median proportional grain yield&quot;, &quot;Mean proportional grain yield&quot;, &quot;97.5 % quartile&quot; ), align = &quot;c&quot; ) %&gt;% kable_styling(fixed_thead = T, full_width = T) %&gt;% column_spec(c(2, 3), width = &quot;1cm&quot;) %&gt;% footnote(general = &quot;Fungicides with less than five observations were omitted from this table&quot;) (#tab:Fungicide_x_nSprays_tble2)Fungicide effect on proportion of yield gain. Fungicide active ingredient Total fungicide applications n Treatments 2.5% quartile Median proportional grain yield Mean proportional grain yield 97.5 % quartile propiconazole 2 27 -0.1480329 0.2340999 0.2097994 0.6560586 200 g/L tebuconazole + 120 g/L azoxystrobin 2 18 -0.2370666 0.2181752 0.1597947 0.3561915 sulphur 2 34 -0.0954568 0.1676904 0.1796081 0.5922165 tebuconazole 2 36 -0.1293437 0.1540619 0.1505931 0.4743985 propiconazole 1 26 -0.2055390 0.1434268 0.1202546 0.4376940 200 g/L tebuconazole + 120 g/L azoxystrobin 1 18 -0.1623981 0.1263883 0.1722485 0.4469576 tebuconazole 1 36 -0.1141671 0.1031954 0.1065776 0.4729585 tebuconazole 3 5 -0.1700096 0.0815570 0.0677753 0.2552864 200 g/L azoxystrobin + 80 g/L cyproconazole 1 18 -0.0993975 0.0512787 0.1176350 0.5978362 sulphur 3 7 -0.1767008 0.0509326 0.0013548 0.1418259 200 g/L azoxystrobin + 80 g/L cyproconazole 2 12 -0.1247602 0.0500710 0.1614477 0.5674767 carbendazim 2 5 -0.1961665 0.0397510 0.0381234 0.1876341 carbendazim 1 10 -0.0907106 0.0069076 0.0557288 0.3545186 sulphur 1 30 -0.1619475 0.0061559 0.0394279 0.3769036 control 0 52 NA NA NaN NA Note: Fungicides with less than five observations were omitted from this table Let’s visualise this in a plot for one and two sprays only. PM_MB_means %&gt;% mutate(fungicide_ai = as.factor(PM_MB_means$fungicide_ai)) %&gt;% filter(total_fungicide == 1 | total_fungicide == 2) %&gt;% filter( fungicide_ai != &quot;pyrazophos&quot; &amp; fungicide_ai != &quot;control&quot; &amp; fungicide_ai != &quot;benomyl&quot; &amp; fungicide_ai != &quot;Acibenzolar-S-methyl&quot; ) %&gt;% mutate(fungicide_ai = factor( fungicide_ai, levels = c( &quot;carbendazim&quot;, &quot;pyraclostrobin&quot;, &quot;sulphur&quot;, &quot;200 g/L azoxystrobin + 80 g/L cyproconazole&quot;, &quot;tebuconazole&quot;, &quot;propiconazole&quot;, &quot;200 g/L tebuconazole + 120 g/L azoxystrobin&quot; ) )) %&gt;% ggplot(aes(y = prop_YG, x = fungicide_ai)) + facet_grid(rows = vars(total_fungicide)) + geom_boxplot(aes(fill = fungicide_ai)) + geom_hline(aes(yintercept = 0), size = 0.5) + labs(y = &quot;Proportion of grain yield saved&quot;, title = &quot;Grain yield proportion saved\\ngrouped by fungicide type&quot;) + theme(legend.position = &quot;none&quot;) + scale_fill_usq() + coord_flip() There is a small yield effect among the strobilurin fungicide mixes and the DMI fungicides. While there is some differences in the variation between tebuconazole and propiconazole, the medians are very similar. I think it is safe to combine these fungicides, with the same mode of action in the meta-analysis. The follow-up spray seems to show an increase in yield protection. Interestingly sulphur sprays show good protection when sprayed twice. 4.1.1.2 Fungicide Doses From this point on we will investigate only the DMI fungicides, tebuconazole and propiconazole, and disregard all other fungicide modes-of-action. We should check that all fungicide doses that were used were roughly the same, if we are to compare between trials where dose might be different. PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% select( trial_ref, year, location, first_sign_disease, fungicide_ai, dose_ai.ha, total_fungicide ) %&gt;% ggplot(aes(x = as.factor(dose_ai.ha), fill = fungicide_ai)) + xlab(&quot;Dose (g ai/ha)&quot;) + ggtitle(label = &quot;Total number of treatments for each respective tebuconazole dose&quot;) + geom_bar() + scale_fill_usq() + scale_colour_usq() All trials that used tebuconazole used approximately the same dose. Dose of the active ingredient ranged from 62.35 g per hectare to 60 g per hectare. Doses for propiconazole range from 62.5 to 125, a large variation. Let’s inspect the difference in yields for each dose. PM_MB_means %&gt;% filter(fungicide_ai == &quot;propiconazole&quot;) %&gt;% ggplot(aes(x = relevel(as.factor(dose_ai.ha), &quot;62.5&quot;), y = prop_YG)) + xlab(&quot;Dose (g ai/ha)&quot;) + ggtitle(label = &quot;Yield for each respective propiconazole dose,\\nfaceted by number of applications&quot;) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) + facet_grid(cols = vars(total_fungicide)) This dose effect should be acknowledged in the meta-analysis. How many treatments of each dose have been investigated per trial? table(as.character(PM_MB_means[PM_MB_means$fungicide_ai == &quot;propiconazole&quot;,]$trial_ref), PM_MB_means[PM_MB_means$fungicide_ai == &quot;propiconazole&quot;,]$dose_ai.ha) ## ## 62.5 125 ## AM1303 3 0 ## AM1304 3 0 ## AM1305 3 0 ## BB1305 3 0 ## mung1112/01 2 2 ## mung1112/02 2 2 ## mung1617/01 0 15 ## mung1617/02 0 15 ## mung1718/01 0 6 Two trials show both doses were applied in the same trial, mung1112/01 and mung1112/02. Let’s look at the difference in proportion of yield saved in these trials. PM_MB_means[(PM_MB_means$trial_ref == &quot;mung1112/01&quot; | PM_MB_means$trial_ref == &quot;mung1112/02&quot;) &amp; PM_MB_means$fungicide_ai == &quot;propiconazole&quot;,] %&gt;% mutate(dose_ai.ha = as.factor(dose_ai.ha)) %&gt;% ggplot(aes(y = prop_YG, x = dose_ai.ha))+ geom_boxplot()+ facet_grid(cols = vars(total_fungicide)) + xlab(&quot;Dose (g ai/ha)&quot;) + ggtitle(label = &quot;Yield for each respective propiconazole dose, faceted by number of applications&quot;) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) This plot is similar to the previous plot, indicating dose needs to be considered in the analysis. Especially as there is a interaction between dose and number of sprays. 4.1.1.3 Number of fungicide sprays Let’s look at the frequency of sprays per fungicide. table(PM_MB_means$fungicide_ai, PM_MB_means$total_fungicide) ## ## 0 1 2 3 7 ## 200 g/L azoxystrobin + 80 g/L cyproconazole 0 18 12 4 0 ## 200 g/L tebuconazole + 120 g/L azoxystrobin 0 18 18 0 0 ## Acibenzolar-S-methyl 0 0 1 0 0 ## benomyl 0 0 1 0 0 ## carbendazim 0 10 5 0 0 ## control 52 0 0 0 0 ## propiconazole 0 26 27 3 0 ## pyraclostrobin 0 4 4 0 0 ## pyrazophos 0 0 1 0 0 ## sulphur 0 30 34 7 3 ## sulphur (SC) 0 0 0 0 0 ## sulphur (Ultra SC) 0 0 0 0 0 ## sulphur (WP) 0 0 0 0 0 ## tebuconazole 0 36 36 5 0 This table shows that the majority of treatments inspected one and two spray management practices. 4.1.1.4 Timing of fungicide sprays The timing of fungicide application can be crucial for maximum disease control and yield loss mitigation. The experiments all relied on natural infection and thus infection at a standardised crop maturity stage was not possible. To best estimate the effect of fungicide application timing we will use the day when the disease was first found in the field as a reference. The first sign of disease is a useful reference as it can be assessed with little training for the assessor. First let’s make a plot to visualise when one or more spray management regimes were made in relation to the first sign of disease regardless of fungicide active. The plot is faceted by number of spray applications. PM_MB_means %&gt;% mutate( s1_DfromFS = fungicide_application_1 - first_sign_disease, s2_DfromFS = fungicide_application_2 - first_sign_disease, s3_DfromFS = fungicide_application_3 - first_sign_disease, s4_DfromFS = fungicide_application_4 - first_sign_disease, s5_DfromFS = fungicide_application_5 - first_sign_disease ) %&gt;% gather( key = spray, value = n_days, s1_DfromFS, s2_DfromFS, s3_DfromFS, s4_DfromFS, s5_DfromFS ) %&gt;% drop_na(n_days) %&gt;% ggplot(aes(x = spray, y = as.numeric(n_days))) + geom_violin() + scale_x_discrete(labels = c( &quot;First spray&quot;, &quot;Second spray&quot;, &quot;Third spray&quot;, &quot;Fourth spray&quot;, &quot;Fifth spray&quot; )) + ylab(&quot;Days to First Sign of Disease&quot;) + facet_grid(cols = vars(total_fungicide)) + coord_flip() The plot shows single fungicide applications are mostly made at zero, first sign of disease in the crop. Experiments that tested two spray treatments also tend to make the first application at first sign of disease, and the second spray between 10 and 25 days later. Three spray treatments seemed to be mostly used in experiments where preventative sprays as the first fungicide application were made. 4.1.2 Mungbean cultivars Australian mungbean varieties have the following resistance to powdery mildew. Berken: Highly susceptible Crystal: Susceptible Jade: Moderately susceptible Let’s view a stacked bar plot of the number of sprays for both demethylation inhibitors, tebuconazole and propiconazole against each cultivar. PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(host_genotype, fungicide_ai, trial_ref) %&gt;% summarise() %&gt;% count() %&gt;% rename(Treatments = n) %&gt;% ggplot(aes(x = host_genotype, y = Treatments, fill = fungicide_ai)) + xlab(&quot;Cultivar&quot;) + ylab(&quot;N Trials&quot;) + ggtitle(label = &quot;Cultivars used in either tebuconazole or propiconazole trials&quot;) + geom_col() + scale_fill_usq(name = &quot;Fungicide AI&quot;) ## `summarise()` regrouping output by &#39;host_genotype&#39;, &#39;fungicide_ai&#39; (override with `.groups` argument) 4.1.2.1 Genotype yield variability Does host cultivar significantly impact the yield? Let’s look at the volatility in yields to see if any cultivar yields better or has greater tolerance to powdery mildew. Below we plot distributions of mean trial yields for each cultivar. The following plots use data that includes all fungicide types. First let’s look at overall yields for each cultivar, where trial is not a factor, for all treatments (spray and no spray). # Outputs the table and graph source(&quot;R/yield_volatility.r&quot;) # function to investigate the volatility in yields # Volatility is the range between the upper and lower 97.5 and 2.5 % quartiles YV1 &lt;- yield_volatility(genotype_by_trial = FALSE, control_only = FALSE) ## `summarise()` ungrouping output (override with `.groups` argument) YV1[[2]] + scale_fill_usq() ## Warning: Removed 12617 rows containing non-finite values (stat_density). YV1[[3]] ## # A tibble: 4 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 Berken 1.31 ## 2 Crystal 1.40 ## 3 G. Diam 0.493 ## 4 Jade 2.35 This plot shows a large amount of yield volatility in all cultivars except Green Diamond. Green Diamond shows little volatility probably because this cultivar was only used in 1 trial. Now let’s look at overall yields for each cultivar, where trial is not a factor, in only the no spray control treatments. YV2 &lt;- yield_volatility(genotype_by_trial = FALSE, control_only = TRUE) ## `summarise()` ungrouping output (override with `.groups` argument) YV2[[2]] + scale_fill_usq() ## Warning: Removed 1393 rows containing non-finite values (stat_density). YV2[[3]] ## # A tibble: 4 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 Berken 1.25 ## 2 Crystal 1.24 ## 3 G. Diam 0.314 ## 4 Jade 2.20 Volatility of the cultivars are less, albeit fairly similar, in control plots when trial is not considered as a factor. Let’s examine the same plots as above but only for the most commonly used trial site, Hermitage. YV1_herm &lt;- yield_volatility( genotype_by_trial = FALSE, control_only = FALSE, location = &quot;Hermitage&quot; ) ## `summarise()` ungrouping output (override with `.groups` argument) YV1_herm[[2]] + scale_fill_usq() ## Warning: Removed 8101 rows containing non-finite values (stat_density). YV1_herm[[3]] ## # A tibble: 4 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 Berken 1.06 ## 2 Crystal 0.817 ## 3 G. Diam 0.481 ## 4 Jade 2.35 Jade shows a large amount of volatility, excluding Green Diamond, Crystal shows the next least volatility. Let’s take a closer look at Crystal with spray management treatments and without. YV1_crystal &lt;- yield_volatility(genotype = &quot;Crystal&quot;, control_only = FALSE) ## `summarise()` ungrouping output (override with `.groups` argument) YV1_crystal[[2]] + scale_fill_usq() ## Warning: Removed 80 rows containing non-finite values (stat_density). YV1_crystal[[3]] ## # A tibble: 7 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 AM1303 0.729 ## 2 AM1304 0.637 ## 3 AM1305 0.531 ## 4 BB1305 0.386 ## 5 mung0910/01 0.691 ## 6 mung1011/01 0.695 ## 7 mung1011/02 0.787 YV2_crystal &lt;- yield_volatility(genotype = &quot;Crystal&quot;, control_only = TRUE) ## `summarise()` ungrouping output (override with `.groups` argument) YV2_crystal[[2]] + scale_fill_usq() YV2_crystal[[3]] ## # A tibble: 7 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 AM1303 0.281 ## 2 AM1304 0.363 ## 3 AM1305 0.367 ## 4 BB1305 0.216 ## 5 mung0910/01 0.422 ## 6 mung1011/01 0.483 ## 7 mung1011/02 0.618 There is a lot of variation between field trials for Crystal, but little variation within field trials. This indicates that trial should be fit as a random effect when we fit a model to this data. Let’s look at Jade, to see if it differs. YV1_jade &lt;- yield_volatility(&quot;Jade&quot;,control_only = FALSE) ## `summarise()` ungrouping output (override with `.groups` argument) YV1_jade[[2]] + scale_fill_usq() ## Warning: Removed 12406 rows containing non-finite values (stat_density). YV1_jade[[3]] ## # A tibble: 7 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 mung1415/01 0.749 ## 2 mung1516/01 0.763 ## 3 mung1516/02 0.762 ## 4 mung1617/01 0.998 ## 5 mung1617/02 1.61 ## 6 mung1819/01 0.526 ## 7 mung1819/02 0.235 For Jade there is high variation between trials and with-in. Perhaps indicating lower tolerance. Let’s look at the same plot with data only from no spray controls to see if the variation is the same. YV2_jade &lt;- yield_volatility(&quot;Jade&quot;, control_only = TRUE) ## `summarise()` ungrouping output (override with `.groups` argument) YV2_jade[[2]] + scale_fill_usq() ## Warning: Removed 1347 rows containing non-finite values (stat_density). YV2_jade[[3]] ## # A tibble: 7 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 mung1415/01 0.733 ## 2 mung1516/01 0.518 ## 3 mung1516/02 0.815 ## 4 mung1617/01 0.905 ## 5 mung1617/02 1.62 ## 6 mung1819/01 0.525 ## 7 mung1819/02 0.273 There still remains a higher volatility in Jade and perhaps a greater shift in the probability curve including fungicide treatments versus probability curves including only no spray controls. Indicating that there might be a difference in powdery mildew tolerance between Jade and Crystal. Overall there seems to be an influence of cultivar. However this variation is not as distinct as the variation between trials. 4.1.3 Row spacing Some experiments were designed to investigate the effect of row spacing and plant density on powdery mildew disease as well as fungicide timing and efficacy. The results showed that the row spacing had no statistically significant effect on powdery mildew, but narrower rows in most cases increased yield significantly. This finding has also been shown by several other researchers’ work in Queensland and New South Wales as well. Eight trials used a row spacing of 0.75 meters and tebuconazole as an active ingredient (AI). PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(fungicide_ai, row_spacing, trial_ref) %&gt;% summarise() %&gt;% count() %&gt;% rename(Trials = n) %&gt;% ggplot(aes(x = as.factor(row_spacing), y = Trials)) + xlab(&quot;Row Spacing (m)&quot;) + ylab(&quot;N Trials&quot;) + ggtitle(label = &quot;Trial row spacing using tebuconazole&quot;) + geom_col(aes(fill = fungicide_ai), position = &quot;dodge&quot;) + scale_fill_usq(name = &quot;Fungicide AI&quot;) ## `summarise()` regrouping output by &#39;fungicide_ai&#39;, &#39;row_spacing&#39; (override with `.groups` argument) Let’s plot the row spacing treatments for the response variables yield and disease severity. The main questions are: Were there any statistical differences for mungbean yield or powdery mildew severity between row spacing treatments? If not, can we pool certain row spacing that have no significant difference? # Which row spacing leads to the higher disease severity PM_MB_means %&gt;% filter(year == 2017 | year == 2018) %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% ggplot(aes(y = PM_final_severity, x = factor(row_spacing))) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) + ylab(&quot;Final severity rating&quot;) + xlab(&quot;Row spacing (m)&quot;) + ggtitle(&quot;Powdery mildew variation between different row spacing&quot;) # Which row spacing leads to the higher disease severity PM_MB_means %&gt;% filter(year == 2017 | year == 2018) %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% ggplot(aes(y = PM_final_severity, x = factor(row_spacing))) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) + facet_grid(cols = vars(location)) + ggtitle(&quot;Powdery mildew variation between different row spacing&quot;) + ylab(&quot;Final severity rating&quot;) + xlab(&quot;Row spacing (m)&quot;) In the Wellcamp site, wider row spacing reduces PM severity, the other sites it seems there was not enough variation to make a distinction between row spacing treatments. # Which row spacing leads to the higher yield potential PM_MB_means %&gt;% filter(year == 2017 | year == 2018) %&gt;% ggplot(aes( y = as.numeric(grain_yield.t.ha.), x = as.factor(row_spacing), colour = location )) + geom_jitter(width = 0.1) + ggtitle(&quot;Grain yield results for different row spacing at three locations&quot;) + xlab(&quot;Row spacing (m)&quot;) + ylab(&quot;Grain yield (t/ha)&quot;) + scale_colour_usq() The plots seem to imply when yield is limited, presumably by other abiotic factors, there is no effect of row spacing on yield, like in the Hermitage trial. However, if the average yield is more than approximately 1 t/ha then smaller row spacing has the potential to provide greater yield per hectare. Overall row spacing may influence both powdery mildew severity and yield. However, in the studies that were conducted, no interaction was found between row spacing, powdery mildew severity and yield. That is, the row spacing appeared to increase yield even if the amount of powdery mildew increased and no relationship could be detected between an interaction of the three. 4.1.4 Yield vs in-season rain In0-crop rain could be a significant factor which contributes to the end of season grain yield. To investigate this effect I will use a linear model (GY ~ SR) where seasonal rainfall represents a specific time frame with respect to planting time. Multiple time frames were tested from 20 days prior to planting, to 100 days after planting. The multiple time frames were tested by a loop over the dates at the start of the season (to 90 days after planting) to find which date fits the best linear model for grain weight and in-crop rainfall. The code for this process was moved to be contained within it’s own script and can be run as a job as it can take a long time. To speed up the computation I split the script into four, ran the jobs and bound the data into one frame. The output of the script is saved with the prefix lmInSeasonRainfall followed by the time windows the model is run. For example lmInSeasonRainfall_20.40_50.80.csv holds the model results for start days between 20 and 40 days after planting to end window dates between 50 and 80 days after planting. This tests when rainfall during the cropping season could be best associated with yield # The four data files were created from four scripts run as four jobs in RStudio # when the four jobs are finished they can be imported and combined into one data.frame # source(Rainfall_x_cropYield_s-10.09_e30.65.R) # source(Rainfall_x_cropYield_s-10.09_e65.100.R) # source(Rainfall_x_cropYield_s10.30_e30.65.R) # source(Rainfall_x_cropYield_s10.30_e65.10.R) lm_rain1 &lt;- read.csv(&quot;cache/lmInSeasonRainfall_-10.09_30.64.csv&quot;, stringsAsFactors = FALSE) lm_rain2 &lt;- read.csv(&quot;cache/lmInSeasonRainfall_-10.09_65.100.csv&quot;, stringsAsFactors = FALSE) lm_rain3 &lt;- read.csv(&quot;cache/lmInSeasonRainfall_10.30_30.64.csv&quot;, stringsAsFactors = FALSE) lm_rain4 &lt;- read.csv(&quot;cache/lmInSeasonRainfall_10.30_65.100.csv&quot;, stringsAsFactors = FALSE) lm_rain &lt;- rbind(lm_rain1, lm_rain2, lm_rain3, lm_rain4) Now we have read in the data from the previously computed models let’s find the linear model which has: - The lowest P value - the highest adjusted r squared value lm_rain[which(lm_rain$lm_pval == min(lm_rain$lm_pval)), ] ## start_day end_day lm_pval lm_rsquared lm_adj_rsquared ## 2202 14 67 0.000523266 0.6800095 0.6509195 lm_rain[which(lm_rain$lm_rsquared == max(lm_rain$lm_rsquared)), ] ## start_day end_day lm_pval lm_rsquared lm_adj_rsquared ## 2202 14 67 0.000523266 0.6800095 0.6509195 lm_rain[which(lm_rain$lm_adj_rsquared == max(lm_rain$lm_adj_rsquared)), ] ## start_day end_day lm_pval lm_rsquared lm_adj_rsquared ## 2202 14 67 0.000523266 0.6800095 0.6509195 To visualise the model fits we will use a heat map to describe how the models faired in relation to the rainfall windows. log of the p value was used to improve the resolution of small very small p values. ggplot(lm_rain, aes(x = start_day, y = end_day, z = log(lm_pval))) + geom_raster(aes(fill = log(lm_pval)), interpolate = TRUE) + geom_contour(bins = 15, colour = &quot;white&quot;) + geom_point(data = lm_rain[which(lm_rain$lm_pval == min(lm_rain$lm_pval)), ], aes(x = start_day, y = end_day), colour = &quot; red&quot;) + scale_fill_distiller(palette = &quot;RdBu&quot;, direction = -1) ggplot(lm_rain, aes(x = start_day, y = end_day, z = lm_adj_rsquared)) + geom_raster(aes(fill = lm_adj_rsquared), interpolate = TRUE) + geom_contour(bins = 15, colour = &quot;white&quot;) + geom_point(data = lm_rain[which(lm_rain$lm_rsquared == max(lm_rain$lm_rsquared)), ], aes(x = start_day, y = end_day), colour = &quot; red&quot;) + scale_fill_distiller(palette = &quot;RdBu&quot;) The approximate period when in-crop rainfall affects the most on the mean harvest is between 14 - 67 days after planting. 4.1.5 Season range and first incidence Mungbean is a summer crop and powdery mildew requires cool conditions to establish. Therefore the disease can be avoided by planting early in summer or spring, avoiding cooler temperatures at the end of some seasons. Can we visualise when PM is most likely to establish over the calendar year? I’ll build a plot of horizontal lines indicating the season length and use a dot on the line to indicating the day of the year first sign was observed for that trial. # Create the data frame for the plot season_dates &lt;- PM_MB_means %&gt;% group_by(trial_ref) %&gt;% summarise( Planting_date = unique(planting_date), Harvest_date = unique(harvest_date), First_sign_PM = unique(first_sign_disease), season_length = as.Date(unique(harvest_date)) - as.Date(unique(planting_date)), cropping_season = &quot;Actual&quot; ) ## `summarise()` ungrouping output (override with `.groups` argument) # For some trials where planting date and Harvest date is missing let&#39;s estimate # the season length by using the mean of all season lengths season_dates[is.na(season_dates$season_length),&quot;cropping_season&quot;] &lt;- &quot;Estimated&quot; season_dates[is.na(season_dates$Planting_date),&quot;Planting_date&quot;] &lt;- season_dates[is.na(season_dates$Planting_date),&quot;Harvest_date&quot;] - as.numeric(mean(season_dates$season_length, na.rm = TRUE)) season_dates[is.na(season_dates$Harvest_date),&quot;Harvest_date&quot;] &lt;- season_dates[is.na(season_dates$Harvest_date),&quot;Planting_date&quot;] + as.numeric(mean(season_dates$season_length, na.rm = TRUE)) season_dates[is.na(season_dates$season_length),&quot;season_length&quot;] &lt;- mean(season_dates$season_length, na.rm = TRUE) season_dates$Planting_day &lt;- yday(season_dates$Planting_date) season_dates$Disease_day &lt;- yday(season_dates$First_sign_PM) season_dates[c(1:2,6), &quot;Planting_day&quot;] &lt;- 1 season_dates$Harvest_day &lt;- season_dates$Planting_day + season_dates$season_length first_day_month &lt;- c(0, 31, 60, 91, 121, 152, 182, 212, 244, 274) + 1 axis_labels_date &lt;- c( format(Sys.Date() - yday(Sys.Date()) + first_day_month[1], &quot;%b-%d&quot;), # Jan format(Sys.Date() - yday(Sys.Date()) + first_day_month[2], &quot;%b-%d&quot;), # Feb format(Sys.Date() - yday(Sys.Date()) + first_day_month[3], &quot;%b-%d&quot;), # March format(Sys.Date() - yday(Sys.Date()) + first_day_month[4], &quot;%b-%d&quot;), # April format(Sys.Date() - yday(Sys.Date()) + first_day_month[5], &quot;%b-%d&quot;), # May format(Sys.Date() - yday(Sys.Date()) + first_day_month[6], &quot;%b-%d&quot;), # June format(Sys.Date() - yday(Sys.Date()) + first_day_month[7], &quot;%b-%d&quot;), # July format(Sys.Date() - yday(Sys.Date()) + first_day_month[8], &quot;%b-%d&quot;), # August format(Sys.Date() - yday(Sys.Date()) + first_day_month[9], &quot;%b-%d&quot;), # Sept format(Sys.Date() - yday(Sys.Date()) + first_day_month[10], &quot;%b-%d&quot;) # October ) # reorder the factors so they will appear in chronological order # I used First sign because all trials have recorded this season_dates$trial_ref &lt;- factor(season_dates$trial_ref, levels = levels(season_dates$trial_ref)[rev(order(season_dates$First_sign_PM))]) # Plot SeasonPlot &lt;- season_dates %&gt;% ggplot() + geom_pointrange(aes( x = trial_ref, y = Disease_day, ymin = Planting_day, ymax = Harvest_day, colour = cropping_season )) + scale_y_continuous(limits = c( 0, max( season_dates$Planting_day + season_dates$season_length, na.rm = TRUE ) ), labels = axis_labels_date, breaks = first_day_month) + geom_point(aes(x = trial_ref, y = Disease_day)) + coord_flip() + scale_color_manual(values=c(&quot;black&quot;,&quot;grey70&quot;))+ ggtitle(&quot;Season length and when powdery mildew was first spotted\\nin each respective trial&quot;) SeasonPlot In most years, regardless of the age of the crop, powdery mildew establishes in March, which is to be expected. The disease is driven by weather conditions and the plant is vulnerable at any growth stage. 4.1.6 AUDPC visualise raw data First let’s check we have all the AUDPC observations. PM_MB_means %&gt;% filter(is.na(AUDPC_m)) %&gt;% distinct(trial_ref, location, year,AUDPC_m, first_sign_disease, final_assessment)%&gt;% kable(align = &quot;c&quot;) trial_ref year location first_sign_disease final_assessment AUDPC_m mung0001/01 2001 Bongeen_1 2001-03-16 2001-04-04 NA mung0102/01 2002 Bongeen_2 2002-02-07 2002-04-17 NA mung0102/02 2002 Hermitage 2002-03-19 2002-04-17 NA mung0102/03 2002 Hermitage 2002-04-04 2002-04-17 NA mung0102/04 2002 Kingaroy 2002-04-05 2002-04-18 NA mung0304/01 2002 Redvale 2004-03-23 2004-04-19 NA mung0910/02 2010 Kingaroy 2010-03-26 2010-04-29 NA mung1112/01 2012 Gatton 2012-04-02 2012-05-17 NA mung1112/02 2012 Kingaroy 2012-03-12 2012-04-30 NA mung1415/02 2015 Dalby 2015-03-02 NA NA mung1516/03 2016 Emerald 2016-03-17 2016-04-23 NA The trials mung0001/01, mung0102/01, mung0102/02, mung0102/03, mung0102/04, mung0304/01, mung0910/02, mung1112/01, mung1112/02, mung1415/02, mung1516/03 don’t have an estimate of AUDPC and need to be filled in. The following script estimates AUDPC from the final disease severity rating and the first sign of disease information. source(here(&quot;R/AUDPC_for_single_obs.R&quot;)) write.csv(PM_MB_means, &quot;cache/1911_PM_MB_means&amp;Ygains.csv&quot;, row.names = FALSE) How well does ‘area under the disease progress curve’ (AUDPC) predict grain yield? and Does spray_management scenario mitigate yield loss through reducing AUDPC? We would expect to see grain yield decline with increasing AUDPC. Let’s just plot yield vs AUDPC. plot(grain_yield.t.ha. ~ AUDPC_m, data = PM_MB_means) abline(lm(grain_yield.t.ha. ~ AUDPC_m, data = PM_MB_means)) There appears to be a weak positive relationship between the two continuous variables. Does a linear model confirm this? summary(lm(grain_yield.t.ha. ~ AUDPC_m, data = PM_MB_means)) ## ## Call: ## lm(formula = grain_yield.t.ha. ~ AUDPC_m, data = PM_MB_means) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.96196 -0.40744 -0.07824 0.38360 1.39537 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.0381668 0.0512029 20.276 &lt; 2e-16 *** ## AUDPC_m 0.0010312 0.0003947 2.613 0.00941 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.5374 on 314 degrees of freedom ## (39 observations deleted due to missingness) ## Multiple R-squared: 0.02128, Adjusted R-squared: 0.01816 ## F-statistic: 6.827 on 1 and 314 DF, p-value: 0.009412 This is not what we would expect and the low R squared value of 0.018 perhaps there are additional factors influencing this relationship. Let’s tease out variation due to trial location, season, row spacing, and other seasonal variables are preventing us from seeing the expected relationship. Let’s do the plot again for each trial where there are no missing values. Note: The plots are ordered by mean yield of the trial. sm2lg &lt;- PM_MB_means %&gt;% group_by(trial_ref) %&gt;% summarise(TY = mean(grain_yield.t.ha., na.rm = TRUE)) %&gt;% arrange(TY) ## `summarise()` ungrouping output (override with `.groups` argument) for (i in sm2lg$trial_ref) { dat1 &lt;- PM_MB_means[PM_MB_means$trial_ref == i, ] if (any(is.na(dat1$grain_yield.t.ha.))) { next } if (any(is.na(dat1$AUDPC_m))) { next } plot( grain_yield.t.ha. ~ AUDPC_m, data = dat1, main = paste(dat1$location[1], (dat1$year[1])), ylim = c(0, max(PM_MB_means$grain_yield.t.ha., na.rm = TRUE)), xlim = c(0, max(PM_MB_means$AUDPC_m, na.rm = TRUE)) ) abline(lm(grain_yield.t.ha. ~ AUDPC_m, data = dat1)) points(grain_yield.t.ha. ~ AUDPC_m, data = dat1[dat1$fungicide_ai == &quot;control&quot;,], col = &quot;red&quot;) } Based on a GRDC report by Sue Thompson (2016) we want to know what the yield loss was in on cultivar Jade in the 2016 Trials. dat3 &lt;- PM_MB_means %&gt;% filter(year == &quot;2016&quot;, host_genotype == &quot;Jade&quot;, fungicide_ai == &quot;control&quot;)%&gt;% group_by(location)%&gt;% summarise(C_Yield = mean(grain_yield.t.ha., na.rm = TRUE)) ## `summarise()` ungrouping output (override with `.groups` argument) dat3$F_Yield &lt;- PM_MB_means %&gt;% filter(year == &quot;2016&quot;, host_genotype == &quot;Jade&quot;, fungicide_ai != &quot;control&quot;)%&gt;% group_by(location)%&gt;% summarise(F_Yield = mean(grain_yield.t.ha., na.rm = TRUE)) %&gt;% pull(F_Yield) ## `summarise()` ungrouping output (override with `.groups` argument) dat3 %&gt;% mutate(diff = F_Yield - C_Yield) %&gt;% mutate(percent = (diff/F_Yield)*100) ## # A tibble: 3 x 5 ## location C_Yield F_Yield diff percent ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Emerald 0.805 0.844 0.0393 4.66 ## 2 Hermitage 1.80 2.28 0.479 21.0 ## 3 Kingaroy 0.811 0.954 0.143 15.0 This sequence of graphs show that AUDPC and disease incidence tends not affect yields if the season is a low yielding season, i.e. lower than 1 tonne per hectare. The higher the yield, the greater greater the influence on the disease on the yield especially if the crop is high yielding with AUDPC also being large enough to reduce yield. Let’s have a look again at the same sequence of graphs and analyses for area under the disease progress stairs. plot(grain_yield.t.ha. ~ AUDPS_m, data = PM_MB_means) abline(lm(grain_yield.t.ha. ~ AUDPS_m, data = PM_MB_means)) summary(lm(grain_yield.t.ha. ~ AUDPS_m, data = PM_MB_means)) ## ## Call: ## lm(formula = grain_yield.t.ha. ~ AUDPS_m, data = PM_MB_means) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.90633 -0.43491 -0.08846 0.38501 1.44180 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.0634378 0.0554098 19.192 &lt;2e-16 *** ## AUDPS_m 0.0006150 0.0003445 1.785 0.0752 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.5405 on 314 degrees of freedom ## (39 observations deleted due to missingness) ## Multiple R-squared: 0.01005, Adjusted R-squared: 0.006897 ## F-statistic: 3.188 on 1 and 314 DF, p-value: 0.07517 sm2lg &lt;- PM_MB_means %&gt;% group_by(trial_ref) %&gt;% summarise(TY = mean(grain_yield.t.ha., na.rm = TRUE)) %&gt;% arrange(TY) ## `summarise()` ungrouping output (override with `.groups` argument) for (i in sm2lg$trial_ref) { dat1 &lt;- PM_MB_means[PM_MB_means$trial_ref == i, ] if (any(is.na(dat1$grain_yield.t.ha.))) { next } if (any(is.na(dat1$AUDPS_m))) { next } plot( grain_yield.t.ha. ~ AUDPS_m, data = dat1, main = paste(dat1$location[1], (dat1$year[1])), ylim = c(0, max( PM_MB_means$grain_yield.t.ha., na.rm = TRUE )), xlim = c(0, max(PM_MB_means$AUDPS_m, na.rm = TRUE)) ) abline(lm(grain_yield.t.ha. ~ AUDPS_m, data = dat1)) points(grain_yield.t.ha. ~ AUDPS_m, data = dat1[dat1$fungicide_ai == &quot;control&quot;,], col = &quot;red&quot;) } The plots from the AUPDS is similar to the AUDPC, however according to the linear model the AUDPC is a better, significant fit. A mixed effect model would be more suitable to investigate the interactive effects of location, season, and trial. The mixed effect model will help us decide on the best approach and structure for our meta-analysis model. beans &lt;- read.csv(here(&quot;data/FAOSTAT_data_7-6-2020.csv&quot;)) glimpse(beans) ## Rows: 473 ## Columns: 15 ## $ Domain.Code &lt;chr&gt; &quot;QC&quot;, &quot;QC&quot;, &quot;QC&quot;, &quot;QC&quot;, &quot;QC&quot;, &quot;QC&quot;, &quot;QC&quot;, &quot;QC&quot;, &quot;Q... ## $ Domain &lt;chr&gt; &quot;Crops&quot;, &quot;Crops&quot;, &quot;Crops&quot;, &quot;Crops&quot;, &quot;Crops&quot;, &quot;Crop... ## $ Area.Code &lt;int&gt; 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10... ## $ Area &lt;chr&gt; &quot;Australia&quot;, &quot;Australia&quot;, &quot;Australia&quot;, &quot;Australia&quot;... ## $ Element.Code &lt;int&gt; 5312, 5419, 5510, 5312, 5419, 5510, 5312, 5419, 55... ## $ Element &lt;chr&gt; &quot;Area harvested&quot;, &quot;Yield&quot;, &quot;Production&quot;, &quot;Area har... ## $ Item.Code &lt;int&gt; 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, ... ## $ Item &lt;chr&gt; &quot;Beans, dry&quot;, &quot;Beans, dry&quot;, &quot;Beans, dry&quot;, &quot;Beans, ... ## $ Year.Code &lt;int&gt; 1961, 1961, 1961, 1962, 1962, 1962, 1963, 1963, 19... ## $ Year &lt;int&gt; 1961, 1961, 1961, 1962, 1962, 1962, 1963, 1963, 19... ## $ Unit &lt;chr&gt; &quot;ha&quot;, &quot;hg/ha&quot;, &quot;tonnes&quot;, &quot;ha&quot;, &quot;hg/ha&quot;, &quot;tonnes&quot;, ... ## $ Value &lt;int&gt; 809, 5525, 447, 809, 11001, 890, 2023, 5151, 1042,... ## $ Flag &lt;chr&gt; &quot;&quot;, &quot;Fc&quot;, &quot;&quot;, &quot;&quot;, &quot;Fc&quot;, &quot;&quot;, &quot;&quot;, &quot;Fc&quot;, &quot;&quot;, &quot;&quot;, &quot;Fc&quot;... ## $ Flag.Description &lt;chr&gt; &quot;Official data&quot;, &quot;Calculated data&quot;, &quot;Official data... ## $ Note &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... beans %&gt;% filter(Item == &quot;Beans, dry&quot;, Element == &quot;Area harvested&quot;)%&gt;% select(Year,Value)%&gt;% ggplot(aes(y = Value, x = Year))+ geom_point()+ geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; beans %&gt;% filter(Item == &quot;Beans, dry&quot;, Element == &quot;Yield&quot;)%&gt;% ggplot(aes(y = Value *0.1, x = Year))+ geom_point()+ geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; beans %&gt;% filter(Item == &quot;Beans, dry&quot;, Element == &quot;Production&quot;)%&gt;% ggplot(aes(y = Value, x = Year))+ geom_point()+ geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; save(SeasonPlot, file = here(&quot;cache/PreliminaryData.Rdata&quot;)) References "],
["prepare-data-for-meta-analysis.html", "5 Prepare data for meta-analysis 5.1 Set environment and import data 5.2 Standardising sample variance 5.3 Reduce data set to required variables 5.4 Test dose effect 5.5 Disease pressure factor 5.6 Row spacing", " 5 Prepare data for meta-analysis 5.1 Set environment and import data PM_MB_means &lt;- read.csv(here(&quot;cache/1911_PM_MB_means&amp;Ygains.csv&quot;)) source(here(&quot;R/same.R&quot;)) # matches each element of a vector and does not return NAs 5.2 Standardising sample variance Meta-analyses use variance from the data to calculate the effect sizes. The type of variance needs to be the same across all the data incorporated in the meta-analysis. We are narrowing the meta-analysis to only include treatments using demethylation inhibitors, tebuconazole and propiconazole. Let’s look at what type of statistical error was reported for the trials that used these fungicides. PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(trial_ref, location, year , Y_error_type, fungicide_ai) %&gt;% summarise(DMI_treatments = length(Y_error_type)) %&gt;% arrange(Y_error_type) %&gt;% select(!fungicide_ai) %&gt;% kable(caption = &quot;Number of treatments for each trial and the error type reported&quot;, align = &quot;c&quot;) %&gt;% footnote(general = &quot;DMI - demethylation inhibitors (tebuconazole and propiconazole).&quot;) ## `summarise()` regrouping output by &#39;trial_ref&#39;, &#39;location&#39;, &#39;year&#39;, &#39;Y_error_type&#39; (override with `.groups` argument) (#tab:variance_types)Number of treatments for each trial and the error type reported trial_ref location year Y_error_type DMI_treatments mung1112/02 Kingaroy 2012 lsd (P=0.05) 4 mung1112/02 Kingaroy 2012 lsd (P=0.05) 2 AM1303 Premer 2013 stdev 3 AM1304 Marys Mount 2013 stdev 3 AM1305 Goolhi 2013 stdev 3 BB1305 Millmerran 2013 stdev 3 mung1011/01 Hermitage 2011 stdev 2 mung1011/02 Kingaroy 2011 stdev 6 mung1415/01 Hermitage 2015 stdev 5 mung1516/01 Hermitage 2016 stdev 6 mung1516/02 Kingaroy 2016 stdev 6 mung1617/01 Hermitage 2017 stdev 15 mung1617/01 Hermitage 2017 stdev 15 mung1617/02 Missen Flats 2017 stdev 15 mung1617/02 Missen Flats 2017 stdev 15 mung1718/01 Wellcamp 2018 stdev 6 mung1718/01 Wellcamp 2018 stdev 6 mung1819/01 Hermitage 2019 stdev 3 mung1819/02 Hermitage 2019 stdev 3 mung1112/01 Gatton 2012 NA 4 mung1112/01 Gatton 2012 NA 2 mung1516/03 Emerald 2016 NA 6 Note: DMI - demethylation inhibitors (tebuconazole and propiconazole). The experiment summaries report either standard deviation, least square differences or no error term (NA). First we will convert LSD and standard deviation to sample variance. Then we will impute variances for the trials, which did not report any form of variance (NA). 5.2.1 Converting least-squares to sample variance First let’s get a list the of trials that reported LSD. Trials &lt;- PM_MB_means %&gt;% filter(Y_error_type == &quot;lsd (P=0.05)&quot;) %&gt;% select(trial_ref) %&gt;% distinct() Trials ## trial_ref ## 1 mung0001/01 ## 2 mung1112/02 Let’s use this list of trials to subset the data and calculate sampling variances. We will follow the method of converting ‘least square differences’ (LSD) to sampling variance reported by Nugugi et.al (2011). A table of T-critical values was consulted to select the T-crit value in the equation. Our data contained 30 degrees of freedom which equates to a ‘T-crit’ value of 1.697. Calculating sampling variance from mean squared error Paul et al. (2008) Tcrit is the T critical value for which there is significant difference between two groups. This value is the same for both trials “mung1112/01” and “mung1112/02”. Tcrit &lt;- 2.042 # 0.05 and DFw = 30 for (i in Trials$trial_ref) { DFw &lt;- sum(PM_MB_means[PM_MB_means$trial_ref == i, ]$replicates) - length(PM_MB_means[PM_MB_means$trial_ref == i, ]$replicates) # degrees of freedom within groups LSD &lt;- PM_MB_means[PM_MB_means$trial_ref == i, ]$yield_error[1] V_yield &lt;- (PM_MB_means[PM_MB_means$trial_ref == i, ]$replicates[1] * (LSD / Tcrit) ^ 2) / 2 # method - Nugugi et.al (2011) DOI: 10.1094/phyto-08-10-0221 for (j in seq_along(PM_MB_means[PM_MB_means$trial_ref == i,]$replicates)) { if (j == 1) { Sv &lt;- vector(length = length(PM_MB_means[PM_MB_means$trial_ref == i,]$replicates)) } # reset Sv vector if this is the first loop Sv[j] = V_yield / PM_MB_means[PM_MB_means$trial_ref == i,]$replicates[j] } # Replace the values in the dataset PM_MB_means[PM_MB_means$trial_ref == i,]$yield_error &lt;- Sv PM_MB_means[PM_MB_means$trial_ref == i,]$Y_error_type &lt;- &quot;SamplingVariance&quot; } 5.2.2 Converting standard deviation to sample variance Now to estimate the variance from the standard deviation. # subset data by those which describe the Yield error with standard deviation Trials &lt;- PM_MB_means %&gt;% filter(Y_error_type == &quot;stdev&quot;) %&gt;% select(trial_ref) %&gt;% distinct() # calculate the Sampling variance from the standard deviation # standard error of the mean equals the standard deviation divided by the square # root of the number of samples # Sv &lt;- sem^2 &lt;- stdev/sqrt(n) # Sampling variance equals the square of the standard error. # Sv &lt;- (stdev/sqrt(n))^2 # Therefore for (j in seq_along(PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$yield_error)) { if (j == 1) { Sv &lt;- vector(length = length(PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$yield_error)) }# create empty vector at first iteration with length of j Sv[j] = (PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$yield_error[j]) ^ 2 } # and replacing the values in the dataset PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$yield_error &lt;- Sv PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$Y_error_type &lt;- &quot;SamplingVariance&quot; 5.2.3 Check variance of data-set Our data currently uses sample variance to define the yield error. We should expect that when yield increases so does the variance. Let’s quickly plot this to check. # redefine sample variance calculated from mean square PM_MB_means$vi &lt;- PM_MB_means$Y_Msquare / (PM_MB_means$n) PM_MB_means %&gt;% ggplot(aes(x = grain_yield.t.ha., y = vi)) + geom_point() ## Warning: Removed 104 rows containing missing values (geom_point). We see here that the sample variance generally decreases or has no association with the grain yield. This might be due to the unpredictable nature of mungbeans, however going forward we will use mean squares, which defines between trial variation and is the more generic error term. PM_MB_means %&gt;% ggplot(aes(x = grain_yield.t.ha., y = Y_Msquare)) + geom_point() ## Warning: Removed 104 rows containing missing values (geom_point). 5.3 Reduce data set to required variables Let’s tidy up the data set into a data frame of only the variables, which are required for the analysis. First remove the irrelevant columns/variables. Then calculate fungicide application timing variables relative to the first sign of disease. Entries with NA in the grain yield or powdery mildew severity are also removed from the data. source(&quot;R/slimming_PM_dat.R&quot;) # see R script for the code, which reduces the data. slim_PM_dat %&lt;&gt;% mutate(fungicide_timing_1 = fungicide_application_1 - first_sign_disease) %&gt;% mutate(fungicide_timing_2 = fungicide_application_2 - fungicide_application_1) %&gt;% mutate(fungicide_timing_3 = fungicide_application_3 - fungicide_application_2) %&gt;% filter(!is.na(grain_yield.t.ha)) %&gt;% filter(!is.na(PM_final_severity)) 5.3.1 Cluster fungicide applications We are going to define ‘fungicide application timing’ as a categorical variable, relative to the first sign of powdery mildew. These categorical variables are named: Early: First fungicide application was prior to first sign of disease. Recommended: First fungicide application was applied on the day powdery mildew was observed, or within three days of first sign. Late: First fungicide application was four or more days after first sign of disease being observed. Follow up fungicide applications (cluster_2 and cluster_3) were also categorised as either early, recommended or late. slim_PM_dat %&lt;&gt;% mutate( cluster_1 = case_when( fungicide_timing_1 &lt; 0 ~ &quot;Early&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 ~ &quot;Recommended&quot;, TRUE ~ &quot;Late&quot; ) ) %&gt;% mutate( cluster_2 = case_when( is.na(fungicide_timing_2) ~ NA_character_, fungicide_timing_2 &lt; 13 ~ &quot;Early&quot;, fungicide_timing_2 &gt;= 13 &amp; fungicide_timing_2 &lt; 17 ~ &quot;Recommended&quot;, TRUE ~ &quot;Late&quot; ) ) %&gt;% mutate( cluster_3 = case_when( fungicide_timing_3 &lt; 14 ~ &quot;Early&quot;, is.na(fungicide_timing_3) ~ NA_character_, TRUE ~ &quot;Recommended&quot; ) ) Let’s look at these clusters to see where we have the most degrees of freedom. clusters &lt;- unique(slim_PM_dat[c(&quot;cluster_1&quot;, &quot;cluster_2&quot;, &quot;cluster_3&quot;)]) for (i in 1:nrow(clusters)) { if (i == 1) { clusters$n &lt;- NA clusters$n_x_trial &lt;- NA } clusters[i, &quot;n&quot;] &lt;- nrow(slim_PM_dat[same(slim_PM_dat$cluster_1, clusters[i, &quot;cluster_1&quot;]) &amp; same(slim_PM_dat$cluster_2, clusters[i, &quot;cluster_2&quot;]) &amp; same(slim_PM_dat$cluster_3, clusters[i, &quot;cluster_3&quot;]),]) clusters[i, &quot;n_x_trial&quot;] &lt;- length(unique(slim_PM_dat[same(slim_PM_dat$cluster_1, clusters[i, &quot;cluster_1&quot;]) &amp; same(slim_PM_dat$cluster_2, clusters[i, &quot;cluster_2&quot;]) &amp; same(slim_PM_dat$cluster_3, clusters[i, &quot;cluster_3&quot;]), &quot;trial_ref&quot;])) } knitr::kable(clusters) cluster_1 cluster_2 cluster_3 n n_x_trial 1 Late NA NA 57 17 2 Recommended NA NA 32 15 9 Recommended Late NA 12 4 11 Early Late Early 2 1 15 Recommended Recommended NA 30 10 30 Recommended Late Early 1 1 33 Recommended Early NA 1 1 34 Recommended Early Early 1 1 36 Early NA NA 13 3 37 Early Late NA 1 1 38 Early Late Recommended 1 1 42 Recommended Recommended Recommended 1 1 44 Early Recommended Recommended 1 1 48 Late Recommended NA 6 4 59 Late Recommended Recommended 2 2 148 Late Late NA 12 1 From this we can see that there are 16 different cluster combinations, which would make the analysis too difficult. We will reduce this to 6 levels within one variable. Single sprays of either: early, recommended timing, late. Two or more sprays where the first spray was either: early, recommended timing, late. slim_PM_dat &lt;- slim_PM_dat %&gt;% mutate( spray_management = case_when( fungicide_timing_1 &lt; 0 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Early&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Recommended&quot;, fungicide_timing_1 &gt;= 4 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Late&quot;, fungicide_timing_1 &lt; 0 &amp; !is.na(fungicide_application_2) ~ &quot;Early_plus&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 &amp; !is.na(fungicide_application_2) ~ &quot;Recommended_plus&quot;, fungicide_timing_1 &gt;= 4 &amp; !is.na(fungicide_application_2) ~ &quot;Late_plus&quot;, TRUE ~ &quot;Other&quot; ) ) slim_PM_dat[slim_PM_dat$fungicide_ai == &quot;control&quot;, c( &quot;fungicide_timing_1&quot;, &quot;fungicide_timing_2&quot;, &quot;fungicide_timing_3&quot;, &quot;spray_management&quot; )] &lt;- &quot;control&quot; Now to view the number break-down of the spray_management treatments table(slim_PM_dat$spray_management) ## ## control Early Early_plus Late ## 40 13 5 17 ## Late_plus Recommended Recommended_plus ## 20 32 46 There are few ‘Early_plus’ treatments, these treatments therefore will have too few comparisons with other treatments in the meta-analysis to provide accurate results. Therefore we will remove ‘Early_plus’ from the analysis. slimmer_PM_dat &lt;- slim_PM_dat[slim_PM_dat$spray_management != &quot;Early_plus&quot;, ] 5.4 Test dose effect Earlier we noted there were different doses of propiconazole, which might influence our analysis. Let’s check this by comparing a linear mixed effect model including and excluding dose. We already have a factor breaking down the dose in the trial variable. Let’s make a new one without dose. slimmer_PM_dat$trial_noDose &lt;- paste(slimmer_PM_dat$trial_ref, slimmer_PM_dat$year, slimmer_PM_dat$location,slimmer_PM_dat$host_genotype, slimmer_PM_dat$row_spacing,sep = &quot;_&quot;) cbind(Dose = head(slimmer_PM_dat$trial), NoDose = head(slimmer_PM_dat$trial_noDose)) %&gt;% kable() Dose NoDose mung1011/01_2011_Hermitage_Berken_0.75_lowDose mung1011/01_2011_Hermitage_Berken_0.75 mung1011/01_2011_Hermitage_Berken_0.75_lowDose mung1011/01_2011_Hermitage_Berken_0.75 mung1011/01_2011_Hermitage_Crystal_0.75_lowDose mung1011/01_2011_Hermitage_Crystal_0.75 mung1011/01_2011_Hermitage_Crystal_0.75_lowDose mung1011/01_2011_Hermitage_Crystal_0.75 mung1011/02_2011_Kingaroy_Berken_0.75_lowDose mung1011/02_2011_Kingaroy_Berken_0.75 mung1011/02_2011_Kingaroy_Crystal_0.75_lowDose mung1011/02_2011_Kingaroy_Crystal_0.75 Let’s test the dose effect in a basic linear mixed effect model. m1 &lt;- lmer(log(grain_yield.t.ha * 1000) ~ factor(spray_management) + (1 | trial), data = slimmer_PM_dat) m2 &lt;- lmer(log(grain_yield.t.ha * 1000) ~ factor(spray_management) + (1 | trial_noDose), data = slimmer_PM_dat) anova(m1, m2) ## refitting model(s) with ML (instead of REML) ## Data: slimmer_PM_dat ## Models: ## m1: log(grain_yield.t.ha * 1000) ~ factor(spray_management) + (1 | ## m1: trial) ## m2: log(grain_yield.t.ha * 1000) ~ factor(spray_management) + (1 | ## m2: trial_noDose) ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## m1 8 -21.404 3.588 18.702 -37.404 ## m2 8 -60.156 -35.165 38.078 -76.156 38.753 0 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Using the model without dose produces a lower AIC, however we should accept the data with dose as there is a significant difference between the models and we should accept the more complicated model m1. We will retain dose as a variable inside the trial factor. slimmer_PM_dat &lt;- slimmer_PM_dat[, colnames(slimmer_PM_dat) != &quot;trial_noDose&quot;] #remove second trial column 5.5 Disease pressure factor We may wish to investigate the impact of spray management in mitigating the yield loss through the effect on the disease pressure. We will set a categorical variable to indicate the amount of disease pressure in the trial, which will be evaluated on the control plot. We will create two categories, lowD and highD. We will use the median AUDPC to separate the trials into these two groups. slimmer_PM_dat$D_pres &lt;- NA_character_ Trial_Dpress &lt;- slimmer_PM_dat %&gt;% group_by(trial_ref) %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% summarise(AUDPC_C = mean(AUDPC_m, na.rm = TRUE)) ## `summarise()` ungrouping output (override with `.groups` argument) median_AUDPC &lt;- median(as.vector(Trial_Dpress$AUDPC_C), na.rm = TRUE) median_AUDPC ## [1] 153.625 write.csv(median_AUDPC, here(&quot;cache/median_AUDPC_C.csv&quot;), row.names = FALSE) sort(Trial_Dpress$AUDPC_C) ## [1] 24.50000 40.25000 41.00000 47.12500 77.00000 78.33333 82.60000 ## [8] 119.62500 153.62500 161.00000 169.00000 172.00000 192.08333 196.00000 ## [15] 198.72222 228.37037 239.61111 for (i in unique(slimmer_PM_dat$trial_ref)) { if (is.na(Trial_Dpress[Trial_Dpress$trial_ref == i, &quot;AUDPC_C&quot;])) { next() } if (Trial_Dpress[Trial_Dpress$trial_ref == i, &quot;AUDPC_C&quot;] &lt; median_AUDPC) { slimmer_PM_dat[slimmer_PM_dat$trial_ref == i, &quot;D_pres&quot;] &lt;- &quot;lowD&quot; } else{ if (Trial_Dpress[Trial_Dpress$trial_ref == i, &quot;AUDPC_C&quot;] &gt;= median_AUDPC) { slimmer_PM_dat[slimmer_PM_dat$trial_ref == i, &quot;D_pres&quot;] &lt;- &quot;highD&quot; } else{ slimmer_PM_dat[slimmer_PM_dat$trial_ref == i, &quot;D_pres&quot;] &lt;- NA_character_ } } } Let’s have a quick look to examine whether trials with high disease pressure sustain a greater yield loss. slimmer_PM_dat %&gt;% ggplot(aes(x = D_pres, y = grain_yield.t.ha))+ geom_boxplot() + xlab(&quot;Disease pressure&quot;) + ylab(&quot;Grain yield (t/ha)&quot;) From this plot we see that in the trials with high disease pressure tended to produce lower yields. There are 0 trials that contained no data for AUDPC and thus produced NA values. 5.6 Row spacing We may want to consider row spacing in the trials. However one of the locations has NA as the row spacing. For now let’s assign the most used row spacing of 0.33 m as an approximation so the model can analyse this as a continuous variable. If we decide to use the row_spacing column as a factor in the final model we will need to remove this approximation. slimmer_PM_dat[is.na(slimmer_PM_dat$row_spacing),] ## trial trial_ref year host_genotype location ## 27 AM1303_2013_Premer_Crystal_NA_lowDose AM1303 2013 Crystal Premer ## 28 AM1303_2013_Premer_Crystal_NA_lowDose AM1303 2013 Crystal Premer ## 29 AM1303_2013_Premer_Crystal_NA_lowDose AM1303 2013 Crystal Premer ## 30 AM1303_2013_Premer_Crystal_NA_lowDose AM1303 2013 Crystal Premer ## row_spacing n planting_date first_sign_disease fungicide_ai ## 27 NA 3 2012-12-28 2013-02-28 control ## 28 NA 3 2012-12-28 2013-02-28 propiconazole ## 29 NA 3 2012-12-28 2013-02-28 propiconazole ## 30 NA 3 2012-12-28 2013-02-28 propiconazole ## fungicide_application_1 fungicide_application_2 fungicide_application_3 ## 27 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 28 2013-02-28 &lt;NA&gt; &lt;NA&gt; ## 29 2013-02-28 2013-03-19 &lt;NA&gt; ## 30 2013-02-28 2013-03-19 2013-03-31 ## total_fungicide dose_ai.ha grain_yield.t.ha yield_error yield_gain ## 27 0 0.0 1.421569 0.005072835 NA ## 28 1 62.5 1.450163 0.054783283 0.02859477 ## 29 2 62.5 1.344635 0.052398439 -0.07693355 ## 30 3 62.5 1.333742 0.021939178 -0.08782680 ## prop_yield_gain PM_final_severity PM_final_severity_error Y_Msquare ## 27 NA 8.000000 0.0000000 0.009814712 ## 28 0.02011494 7.833333 0.2886751 0.009814712 ## 29 -0.05411877 2.166667 0.2886751 0.009814712 ## 30 -0.06178161 2.000000 0.8660254 0.009814712 ## Inc_Ms AUDPC_m AUDPC_sd AUDPS_m AUDPS_sd dose fungicide_timing_1 ## 27 417.1806 24.500000 0.000000 49.000000 0.000000 lowDose control days ## 28 417.1806 23.916667 1.010363 47.833333 2.020726 lowDose 0 days ## 29 417.1806 4.083333 1.010363 8.166667 2.020726 lowDose 0 days ## 30 417.1806 3.500000 3.031089 7.000000 6.062178 lowDose 0 days ## fungicide_timing_2 fungicide_timing_3 cluster_1 cluster_2 cluster_3 ## 27 control days control days Late &lt;NA&gt; &lt;NA&gt; ## 28 NA days NA days Recommended &lt;NA&gt; &lt;NA&gt; ## 29 19 days NA days Recommended Late &lt;NA&gt; ## 30 19 days 12 days Recommended Late Early ## spray_management D_pres ## 27 control lowD ## 28 Recommended lowD ## 29 Recommended_plus lowD ## 30 Recommended_plus lowD slimmer_PM_dat[is.na(slimmer_PM_dat$row_spacing),&quot;row_spacing&quot;] &lt;- 0.33 write.csv(slimmer_PM_dat, file = here(&quot;cache/slimmer_PM_clusterdat.csv&quot;), row.names = FALSE) 5.6.1 Mungbeans age and yield saved The time at which powdery mildew infects in the seasons and the age of the plant might affect the AUDPC and the loss in yield. Let’s have a look at the age of each trial when each powdery mildew infected it. We will use the difference between planting_date and first_sign_disease as a proxy for crop maturity. dat1 &lt;- slimmer_PM_dat %&gt;% mutate(days2PM = first_sign_disease - planting_date) %&gt;% arrange(desc(days2PM)) %&gt;% select( trial_ref, year, location, spray_management, days2PM, grain_yield.t.ha, yield_gain, prop_yield_gain, AUDPC_m, D_pres, PM_final_severity ) dat1 ## trial_ref year location spray_management days2PM grain_yield.t.ha ## 1 AM1304 2013 Marys Mount control 82 days 1.0937500 ## 2 AM1304 2013 Marys Mount Early 82 days 1.2654321 ## 3 mung1819/01 2019 Hermitage Recommended 67 days 0.5431636 ## 4 mung1819/01 2019 Hermitage Recommended_plus 67 days 0.5635524 ## 5 mung1819/01 2019 Hermitage Late 67 days 0.5712637 ## 6 mung1819/01 2019 Hermitage control 67 days 0.5871653 ## 7 mung1011/01 2011 Hermitage control 63 days 1.6618554 ## 8 mung1011/01 2011 Hermitage Recommended 63 days 1.7693124 ## 9 mung1011/01 2011 Hermitage control 63 days 1.3875920 ## 10 mung1011/01 2011 Hermitage Recommended 63 days 1.5438955 ## 11 AM1303 2013 Premer control 62 days 1.4215686 ## 12 AM1303 2013 Premer Recommended 62 days 1.4501634 ## 13 AM1303 2013 Premer Recommended_plus 62 days 1.3446351 ## 14 AM1303 2013 Premer Recommended_plus 62 days 1.3337418 ## 15 AM1305 2013 Goolhi control 61 days 0.6944444 ## 16 AM1305 2013 Goolhi Recommended 61 days 0.6527778 ## 17 AM1305 2013 Goolhi Recommended_plus 61 days 0.7222222 ## 18 AM1305 2013 Goolhi Recommended_plus 61 days 0.6041667 ## 19 BB1305 2013 Millmerran control 60 days 0.8020833 ## 20 BB1305 2013 Millmerran Recommended 60 days 0.8026961 ## 21 BB1305 2013 Millmerran Recommended_plus 60 days 0.7714461 ## 22 BB1305 2013 Millmerran Recommended_plus 60 days 0.7438725 ## 23 mung1415/01 2015 Hermitage control 56 days 2.0449480 ## 24 mung1415/01 2015 Hermitage Recommended 56 days 2.0183208 ## 25 mung1415/01 2015 Hermitage Recommended_plus 56 days 2.1524434 ## 26 mung1415/01 2015 Hermitage Late 56 days 2.1239542 ## 27 mung1415/01 2015 Hermitage Late_plus 56 days 2.1755223 ## 28 mung1819/02 2019 Hermitage Recommended 53 days 0.2962093 ## 29 mung1819/02 2019 Hermitage Recommended_plus 53 days 0.3116830 ## 30 mung1819/02 2019 Hermitage Late 53 days 0.2758593 ## 31 mung1819/02 2019 Hermitage control 53 days 0.2894430 ## 32 mung1011/02 2011 Kingaroy control 48 days 0.7984600 ## 33 mung1011/02 2011 Kingaroy control 48 days 0.7984600 ## 34 mung1011/02 2011 Kingaroy Recommended 48 days 1.0585700 ## 35 mung1011/02 2011 Kingaroy Recommended 48 days 0.7301950 ## 36 mung1011/02 2011 Kingaroy Recommended_plus 48 days 0.9862350 ## 37 mung1011/02 2011 Kingaroy Recommended_plus 48 days 0.8754200 ## 38 mung1112/01 2012 Gatton control 42 days 0.7380000 ## 39 mung1112/01 2012 Gatton Recommended 42 days 0.8100000 ## 40 mung1112/01 2012 Gatton Recommended_plus 42 days 0.9480000 ## 41 mung1112/01 2012 Gatton Recommended 42 days 0.9100000 ## 42 mung1112/01 2012 Gatton Recommended_plus 42 days 0.9250000 ## 43 mung1112/01 2012 Gatton Recommended 42 days 0.8600000 ## 44 mung1112/01 2012 Gatton Recommended_plus 42 days 0.9440000 ## 45 mung1617/02 2017 Missen Flats control 39 days 1.6418592 ## 46 mung1617/02 2017 Missen Flats control 39 days 2.0839414 ## 47 mung1617/02 2017 Missen Flats control 39 days 1.8248956 ## 48 mung1617/02 2017 Missen Flats control 39 days 1.5045726 ## 49 mung1617/02 2017 Missen Flats control 39 days 1.4828200 ## 50 mung1617/02 2017 Missen Flats control 39 days 1.6085402 ## 51 mung1617/02 2017 Missen Flats control 39 days 1.4483718 ## 52 mung1617/02 2017 Missen Flats control 39 days 1.2265200 ## 53 mung1617/02 2017 Missen Flats control 39 days 1.2278887 ## 54 mung1617/02 2017 Missen Flats Early 39 days 1.7914059 ## 55 mung1617/02 2017 Missen Flats Early 39 days 1.7242822 ## 56 mung1617/02 2017 Missen Flats Early 39 days 1.7330037 ## 57 mung1617/02 2017 Missen Flats Early 39 days 1.7172796 ## 58 mung1617/02 2017 Missen Flats Early 39 days 1.1301771 ## 59 mung1617/02 2017 Missen Flats Early 39 days 1.4435203 ## 60 mung1617/02 2017 Missen Flats Recommended 39 days 2.1005560 ## 61 mung1617/02 2017 Missen Flats Recommended 39 days 1.9218522 ## 62 mung1617/02 2017 Missen Flats Recommended 39 days 1.8592191 ## 63 mung1617/02 2017 Missen Flats Recommended 39 days 1.8609926 ## 64 mung1617/02 2017 Missen Flats Recommended 39 days 1.4980957 ## 65 mung1617/02 2017 Missen Flats Recommended 39 days 1.3890579 ## 66 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.1016994 ## 67 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.5262528 ## 68 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.1794811 ## 69 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.0006008 ## 70 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.9737390 ## 71 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.7988394 ## 72 mung1617/02 2017 Missen Flats Late 39 days 2.1433538 ## 73 mung1617/02 2017 Missen Flats Late 39 days 1.8777801 ## 74 mung1617/02 2017 Missen Flats Late 39 days 1.8278987 ## 75 mung1617/02 2017 Missen Flats Late 39 days 1.7806148 ## 76 mung1617/02 2017 Missen Flats Late 39 days 1.7563900 ## 77 mung1617/02 2017 Missen Flats Late 39 days 1.5336704 ## 78 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.3121444 ## 79 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.2779137 ## 80 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.1125934 ## 81 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.3569026 ## 82 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.7921655 ## 83 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.7424354 ## 84 mung1617/01 2017 Hermitage control 39 days 0.4047025 ## 85 mung1617/01 2017 Hermitage control 39 days 0.5588572 ## 86 mung1617/01 2017 Hermitage control 39 days 0.3163168 ## 87 mung1617/01 2017 Hermitage control 39 days 0.3190589 ## 88 mung1617/01 2017 Hermitage control 39 days 0.6205462 ## 89 mung1617/01 2017 Hermitage control 39 days 0.4736264 ## 90 mung1617/01 2017 Hermitage control 39 days 0.6151813 ## 91 mung1617/01 2017 Hermitage control 39 days 0.5020225 ## 92 mung1617/01 2017 Hermitage control 39 days 0.4721220 ## 93 mung1617/01 2017 Hermitage Early 39 days 0.3594340 ## 94 mung1617/01 2017 Hermitage Early 39 days 0.5927613 ## 95 mung1617/01 2017 Hermitage Early 39 days 0.6019744 ## 96 mung1617/01 2017 Hermitage Early 39 days 0.5592597 ## 97 mung1617/01 2017 Hermitage Early 39 days 0.5031042 ## 98 mung1617/01 2017 Hermitage Early 39 days 0.4823959 ## 99 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.5059947 ## 100 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.3797529 ## 101 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.4386495 ## 102 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.4443692 ## 103 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.5183023 ## 104 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.4407214 ## 105 mung1617/01 2017 Hermitage Recommended 39 days 0.6466969 ## 106 mung1617/01 2017 Hermitage Recommended 39 days 0.6123413 ## 107 mung1617/01 2017 Hermitage Recommended 39 days 0.5530278 ## 108 mung1617/01 2017 Hermitage Recommended 39 days 0.4574364 ## 109 mung1617/01 2017 Hermitage Recommended 39 days 0.4664223 ## 110 mung1617/01 2017 Hermitage Recommended 39 days 0.5208322 ## 111 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.6590398 ## 112 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.5448189 ## 113 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.4198568 ## 114 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.3415256 ## 115 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.5638309 ## 116 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.6566246 ## 117 mung1617/01 2017 Hermitage Late 39 days 0.3899615 ## 118 mung1617/01 2017 Hermitage Late 39 days 0.4781363 ## 119 mung1617/01 2017 Hermitage Late 39 days 0.3265938 ## 120 mung1617/01 2017 Hermitage Late 39 days 0.5340506 ## 121 mung1617/01 2017 Hermitage Late 39 days 0.5007825 ## 122 mung1617/01 2017 Hermitage Late 39 days 0.6831480 ## 123 mung1112/02 2012 Kingaroy control 38 days 0.7510000 ## 124 mung1112/02 2012 Kingaroy Recommended 38 days 1.0900000 ## 125 mung1112/02 2012 Kingaroy Recommended_plus 38 days 1.0980000 ## 126 mung1112/02 2012 Kingaroy Recommended 38 days 1.0360000 ## 127 mung1112/02 2012 Kingaroy Recommended_plus 38 days 1.2010000 ## 128 mung1112/02 2012 Kingaroy Recommended 38 days 1.0570000 ## 129 mung1112/02 2012 Kingaroy Recommended_plus 38 days 1.3230000 ## 130 mung1718/01 2018 Wellcamp Late_plus 36 days 1.5559470 ## 131 mung1718/01 2018 Wellcamp Late_plus 36 days 1.5820209 ## 132 mung1718/01 2018 Wellcamp control 36 days 0.9007130 ## 133 mung1718/01 2018 Wellcamp Late_plus 36 days 1.4725237 ## 134 mung1718/01 2018 Wellcamp Late_plus 36 days 1.5675378 ## 135 mung1718/01 2018 Wellcamp control 36 days 1.0890772 ## 136 mung1718/01 2018 Wellcamp Late_plus 36 days 1.0845229 ## 137 mung1718/01 2018 Wellcamp Late_plus 36 days 1.1542511 ## 138 mung1718/01 2018 Wellcamp control 36 days 1.0927657 ## 139 mung1718/01 2018 Wellcamp Late_plus 36 days 1.5753976 ## 140 mung1718/01 2018 Wellcamp Late_plus 36 days 1.6521132 ## 141 mung1718/01 2018 Wellcamp control 36 days 1.5731203 ## 142 mung1718/01 2018 Wellcamp Late_plus 36 days 1.2169503 ## 143 mung1718/01 2018 Wellcamp Late_plus 36 days 1.6902978 ## 144 mung1718/01 2018 Wellcamp control 36 days 1.4512971 ## 145 mung1718/01 2018 Wellcamp Late_plus 36 days 1.2343578 ## 146 mung1718/01 2018 Wellcamp Late_plus 36 days 1.1730934 ## 147 mung1718/01 2018 Wellcamp control 36 days 1.0561352 ## 148 mung1516/03 2016 Emerald control 34 days 0.8050000 ## 149 mung1516/03 2016 Emerald Recommended 34 days 0.8700000 ## 150 mung1516/03 2016 Emerald Recommended_plus 34 days 0.8330000 ## 151 mung1516/03 2016 Emerald Recommended_plus 34 days 0.8480000 ## 152 mung1516/03 2016 Emerald Recommended 34 days 0.9260000 ## 153 mung1516/03 2016 Emerald Recommended_plus 34 days 0.8050000 ## 154 mung1516/03 2016 Emerald Late_plus 34 days 0.7840000 ## 155 mung1516/01 2016 Hermitage control 34 days 1.8029015 ## 156 mung1516/01 2016 Hermitage Late 34 days 2.2159243 ## 157 mung1516/01 2016 Hermitage Late_plus 34 days 2.3700542 ## 158 mung1516/01 2016 Hermitage Late_plus 34 days 2.2929950 ## 159 mung1516/01 2016 Hermitage Recommended 34 days 2.1414271 ## 160 mung1516/01 2016 Hermitage Recommended_plus 34 days 2.3381466 ## 161 mung1516/01 2016 Hermitage Late_plus 34 days 2.3345514 ## 162 mung1516/02 2016 Kingaroy control 27 days 0.8107400 ## 163 mung1516/02 2016 Kingaroy Late 27 days 1.0308510 ## 164 mung1516/02 2016 Kingaroy Late_plus 27 days 1.0339186 ## 165 mung1516/02 2016 Kingaroy Late_plus 27 days 0.8728011 ## 166 mung1516/02 2016 Kingaroy Recommended 27 days 0.8989727 ## 167 mung1516/02 2016 Kingaroy Recommended_plus 27 days 0.9438287 ## 168 mung1516/02 2016 Kingaroy Late_plus 27 days 0.9443491 ## yield_gain prop_yield_gain AUDPC_m D_pres PM_final_severity ## 1 NA NA 47.125000 lowD 3.000000 ## 2 0.1716820990 0.1569664905 30.583333 lowD 3.166667 ## 3 -0.0440017140 -0.0749392275 28.000000 lowD 5.000000 ## 4 -0.0236128720 -0.0402150331 28.000000 lowD 5.000000 ## 5 -0.0159016090 -0.0270819972 42.666667 lowD 7.166667 ## 6 NA NA 41.000000 lowD 7.500000 ## 7 NA NA 38.500000 lowD 4.666667 ## 8 0.2445887000 0.1604150968 10.500000 lowD 2.000000 ## 9 NA NA 42.000000 lowD 5.000000 ## 10 0.0191717670 0.0125739286 14.000000 lowD 2.333333 ## 11 NA NA 24.500000 lowD 8.000000 ## 12 0.0285947720 0.0201149431 23.916667 lowD 7.833333 ## 13 -0.0769335510 -0.0541187738 4.083333 lowD 2.166667 ## 14 -0.0878267970 -0.0617816089 3.500000 lowD 2.000000 ## 15 NA NA 161.000000 highD 7.000000 ## 16 -0.0416666660 -0.0599999991 37.375000 highD 3.750000 ## 17 0.0277777780 0.0400000003 14.875000 highD 2.750000 ## 18 -0.0902777770 -0.1299999990 0.000000 highD 1.000000 ## 19 NA NA 153.625000 highD 8.000000 ## 20 0.0006127450 0.0007639418 66.500000 highD 8.000000 ## 21 -0.0306372550 -0.0381970972 49.062500 highD 5.625000 ## 22 -0.0582107840 -0.0725744840 11.062500 highD 1.625000 ## 23 NA NA 82.600000 lowD 7.800000 ## 24 -0.0266271530 -0.0130209440 61.800000 lowD 6.600000 ## 25 0.1074953900 0.0525663203 55.400000 lowD 5.400000 ## 26 0.0790062230 0.0386348329 79.400000 lowD 6.600000 ## 27 0.1305743270 0.0638521512 73.700000 lowD 6.400000 ## 28 0.0067662760 0.0233768873 49.800000 lowD 5.600000 ## 29 0.0222400150 0.0768372920 47.800000 lowD 4.600000 ## 30 -0.0135836950 -0.0469304692 83.000000 lowD 7.333333 ## 31 NA NA 78.333333 lowD 7.833333 ## 32 NA NA 211.000000 highD 8.000000 ## 33 NA NA 173.166667 highD 7.666667 ## 34 0.2601100000 0.3257645968 96.333333 highD 5.333333 ## 35 -0.0682650000 -0.0854958295 50.333333 highD 4.333333 ## 36 0.1877750000 0.2351714551 55.333333 highD 3.333333 ## 37 0.0769600000 0.0963855422 45.500000 highD 4.000000 ## 38 NA NA 169.000000 highD 7.500000 ## 39 0.0720000000 0.0975609756 85.800000 highD 4.300000 ## 40 0.2100000000 0.2845528455 59.800000 highD 3.300000 ## 41 0.1720000000 0.2330623306 137.800000 highD 6.300000 ## 42 0.1870000000 0.2533875339 59.800000 highD 3.300000 ## 43 0.1220000000 0.1653116531 111.800000 highD 5.300000 ## 44 0.2060000000 0.2791327913 26.000000 highD 2.000000 ## 45 NA NA 233.666667 highD 9.000000 ## 46 NA NA 239.500000 highD 9.000000 ## 47 NA NA 241.833333 highD 9.000000 ## 48 NA NA 242.333333 highD 9.000000 ## 49 NA NA 239.500000 highD 9.000000 ## 50 NA NA 241.833333 highD 9.000000 ## 51 NA NA 237.333333 highD 9.000000 ## 52 NA NA 241.000000 highD 8.666667 ## 53 NA NA 239.500000 highD 9.000000 ## 54 -0.0588261649 -0.0317939385 212.166667 highD 8.666667 ## 55 -0.1259498474 -0.0680724591 223.833333 highD 9.000000 ## 56 0.2010260812 0.1312199881 230.666667 highD 8.666667 ## 57 0.1853020119 0.1209560851 224.166667 highD 9.000000 ## 58 -0.1707497248 -0.1312523659 229.000000 highD 9.000000 ## 59 0.1425934446 0.1096091194 223.666667 highD 9.000000 ## 60 0.2503238869 0.1352932369 159.833333 highD 8.000000 ## 61 0.0716201617 0.0387087450 197.166667 highD 8.666667 ## 62 0.3272414993 0.2136072363 168.666667 highD 8.333333 ## 63 0.3290150428 0.2147649188 198.500000 highD 8.333333 ## 64 0.1971688642 0.1515603023 175.166667 highD 8.666667 ## 65 0.0881311035 0.0677448579 186.833333 highD 8.000000 ## 66 0.2514673536 0.1359112495 174.166667 highD 8.000000 ## 67 0.6760207650 0.3653707949 158.333333 highD 8.000000 ## 68 0.6475034999 0.4226585975 149.666667 highD 7.666667 ## 69 0.4686231976 0.3058942901 191.500000 highD 8.000000 ## 70 0.6728121901 0.5171791160 153.166667 highD 8.000000 ## 71 0.4979125820 0.3827368065 188.000000 highD 8.000000 ## 72 0.2931217556 0.1584243183 199.333333 highD 8.000000 ## 73 0.0275480386 0.0148889639 207.333333 highD 8.000000 ## 74 0.2959210668 0.1931627907 207.333333 highD 8.000000 ## 75 0.2486372093 0.1622982026 218.500000 highD 8.000000 ## 76 0.4554631307 0.3501066461 192.833333 highD 8.000000 ## 77 0.2327435490 0.1789059484 218.500000 highD 8.000000 ## 78 0.4619122854 0.2496509983 201.666667 highD 8.000000 ## 79 0.4276816109 0.2311502519 214.333333 highD 7.666667 ## 80 0.5806158182 0.3789975922 204.333333 highD 8.000000 ## 81 -0.1750750015 -0.1142803933 215.666667 highD 8.000000 ## 82 0.4912386297 0.3776066546 202.833333 highD 8.000000 ## 83 0.4415085212 0.3393799786 207.500000 highD 8.000000 ## 84 NA NA 246.500000 highD 8.000000 ## 85 NA NA 222.666667 highD 8.000000 ## 86 NA NA 212.000000 highD 8.000000 ## 87 NA NA 235.500000 highD 8.000000 ## 88 NA NA 226.833333 highD 8.000000 ## 89 NA NA 212.333333 highD 8.000000 ## 90 NA NA 235.166667 highD 8.000000 ## 91 NA NA 222.833333 highD 8.000000 ## 92 NA NA 241.500000 highD 8.000000 ## 93 -0.0868802075 -0.1946615147 140.000000 highD 8.000000 ## 94 0.0322860472 0.0576047636 123.833333 highD 7.666667 ## 95 0.1812860289 0.4309270976 125.500000 highD 8.000000 ## 96 0.1129454808 0.2530626827 124.666667 highD 8.000000 ## 97 -0.0573711423 -0.1023615890 159.166667 highD 8.000000 ## 98 0.0617075551 0.1466823329 137.666667 highD 7.666667 ## 99 0.0596804442 0.1337184384 98.000000 highD 7.000000 ## 100 -0.1807224396 -0.3224449672 77.166667 highD 7.000000 ## 101 0.0179610801 0.0426944986 106.333333 highD 7.000000 ## 102 -0.0019450842 -0.0043581047 117.666667 highD 7.000000 ## 103 -0.0421730335 -0.0752451242 114.333333 highD 7.000000 ## 104 0.0200329836 0.0476195300 125.166667 highD 7.000000 ## 105 0.2003826173 0.4489720379 140.833333 highD 8.000000 ## 106 0.0518659813 0.0925392811 155.666667 highD 8.000000 ## 107 0.1323393856 0.3145781705 152.000000 highD 7.666667 ## 108 0.0111221133 0.0249199155 188.833333 highD 8.000000 ## 109 -0.0940530019 -0.1678093609 177.166667 highD 8.000000 ## 110 0.1001438080 0.2380474700 144.666667 highD 8.000000 ## 111 0.2127255362 0.4766272583 120.666667 highD 7.000000 ## 112 -0.0156564452 -0.0279342286 99.500000 highD 5.333333 ## 113 -0.0008315597 -0.0019766642 113.000000 highD 7.000000 ## 114 -0.1047886946 -0.2347868014 173.000000 highD 7.000000 ## 115 0.0033555968 0.0059870557 140.500000 highD 7.000000 ## 116 0.2359361845 0.5608335944 151.833333 highD 7.000000 ## 117 -0.0563527614 -0.1262625194 144.833333 highD 7.000000 ## 118 -0.0823390156 -0.1469092672 155.333333 highD 7.000000 ## 119 -0.0940945505 -0.2236680443 177.666667 highD 7.000000 ## 120 0.0877363707 0.1965798117 175.333333 highD 7.333333 ## 121 -0.0596927848 -0.1065038634 182.666667 highD 7.666667 ## 122 0.2624596253 0.6238813065 206.166667 highD 8.000000 ## 123 NA NA 196.000000 highD 8.000000 ## 124 0.3390000000 0.4513981358 196.000000 highD 8.000000 ## 125 0.3470000000 0.4620505992 92.400000 highD 4.300000 ## 126 0.2850000000 0.3794940080 187.600000 highD 7.700000 ## 127 0.4500000000 0.5992010652 103.600000 highD 4.700000 ## 128 0.3060000000 0.4074567244 176.400000 highD 7.300000 ## 129 0.5720000000 0.7616511318 19.600000 highD 1.700000 ## 130 0.3190303615 0.2579238997 172.500000 highD 7.666667 ## 131 0.3451042525 0.2790036478 156.333333 highD 6.333333 ## 132 NA NA 178.833333 highD 8.333333 ## 133 0.2023365310 0.1592966311 166.166667 highD 7.000000 ## 134 0.2973506480 0.2340998743 147.666667 highD 6.000000 ## 135 NA NA 200.166667 highD 8.000000 ## 136 0.0100724330 0.0093744973 175.666667 highD 7.333333 ## 137 0.0798005920 0.0742710755 158.000000 highD 6.000000 ## 138 NA NA 193.666667 highD 7.333333 ## 139 0.3384809785 0.2736489830 171.500000 highD 7.000000 ## 140 0.4151965995 0.3356706415 155.333333 highD 6.000000 ## 141 NA NA 194.333333 highD 9.000000 ## 142 -0.0532368650 -0.0419126156 189.500000 highD 7.333333 ## 143 0.4201107120 0.3307471013 161.500000 highD 7.000000 ## 144 NA NA 220.333333 highD 8.666667 ## 145 0.1599073210 0.1488270753 170.333333 highD 6.666667 ## 146 0.0986429350 0.0918078011 150.666667 highD 5.666667 ## 147 NA NA 205.000000 highD 8.000000 ## 148 NA NA 77.000000 lowD 4.500000 ## 149 0.0650000000 0.0807453416 55.000000 lowD 3.500000 ## 150 0.0280000000 0.0347826087 33.000000 lowD 2.500000 ## 151 0.0430000000 0.0534161491 39.600000 lowD 2.800000 ## 152 0.1210000000 0.1503105590 50.600000 lowD 3.300000 ## 153 0.0000000000 0.0000000000 39.600000 lowD 2.800000 ## 154 -0.0210000000 -0.0260869565 77.000000 lowD 4.500000 ## 155 NA NA 119.625000 lowD 8.000000 ## 156 0.4130227690 0.2290878176 71.750000 lowD 6.250000 ## 157 0.5671527330 0.3145777705 61.750000 lowD 4.500000 ## 158 0.4900935170 0.2718359922 50.500000 lowD 3.000000 ## 159 0.3385256070 0.1877671119 61.125000 lowD 4.000000 ## 160 0.5352450660 0.2968798169 64.375000 lowD 7.500000 ## 161 0.5316499120 0.2948857235 53.750000 lowD 6.500000 ## 162 NA NA 172.000000 highD 8.250000 ## 163 0.2201109620 0.2714938943 113.500000 highD 7.000000 ## 164 0.2231785500 0.2752775832 47.000000 highD 2.250000 ## 165 0.0620611410 0.0765487584 54.000000 highD 2.500000 ## 166 0.0882326550 0.1088297779 140.000000 highD 7.750000 ## 167 0.1330886820 0.1641570426 87.500000 highD 6.500000 ## 168 0.1336091340 0.1647989894 63.500000 highD 2.750000 From these trials I am most interested in the experiments that directly compare Recommended with Recommended_P_plus and/or Late with Late_plus. Therefore I will not inspect, AM1304 (Marys Mount). We can see that the crops which were likely the most mature, did not show large yield gains, in particular: Hermitage 2019 Premer Goolhi Millmerran Let’s look at this in a quick box plot. We will only look at trials where powdery mildew set in at flowering which is approximately 60 days after planting. dat1 %&gt;% filter(days2PM &gt;= 60) %&gt;% filter(spray_management != &quot;control&quot; &amp; trial_ref != &quot;AM1304&quot;) %&gt;% group_by(trial_ref, spray_management) %&gt;% ggplot(aes(x = spray_management, y = yield_gain, fill = trial_ref)) + geom_boxplot() + scale_fill_usq() + geom_hline(yintercept = 0) We can see in these experiments five experiments there is clearly no benefit to applying a second fungicide application. For completeness let’s test this with powdery mildew infection commencing 40 - 60 days after planting, instead of greater than 60. dat1 %&gt;% filter(days2PM &lt; 60 &amp; days2PM &gt;= 40) %&gt;% filter(spray_management != &quot;control&quot;) %&gt;% group_by(trial_ref, spray_management) %&gt;% ggplot(aes(x = spray_management, y = yield_gain, fill = trial_ref)) + geom_boxplot() + scale_fill_usq() + geom_hline(yintercept = 0) We can see here all four experiments benefited, on average, from more than one spray. Let’s estimate the age of the crop based on crop maturity observations, we will use the PM_MB_means which include some observations of crop maturity. dat2 &lt;- PM_MB_means %&gt;% mutate( flower = lubridate::ymd(flowering_date) - lubridate::ymd(planting_date), pod = lubridate::ymd(pod_fill_date) - lubridate::ymd(planting_date), late_pod = lubridate::ymd(mid_late_pod_fill) - lubridate::ymd(planting_date) ) %&gt;% select(location, year, flower, pod, late_pod) %&gt;% distinct() %&gt;% arrange(desc(flower)) index1 &lt;- apply(dat2, 1 , function(X) ! all(is.na(X[c(&quot;flower&quot;, &quot;pod&quot;, &quot;late_pod&quot;)]))) dat2[index1,] ## location year flower pod late_pod ## 1 Goolhi 2013 71 days 85 days NA days ## 2 Premer 2013 62 days NA days NA days ## 3 Hermitage 2011 57 days NA days NA days ## 4 Gatton 2012 42 days NA days NA days ## 5 Kingaroy 2012 38 days NA days NA days ## 14 Millmerran 2013 NA days 68 days 75 days ## 15 Marys Mount 2013 NA days 66 days NA days ## 19 Hermitage 2016 NA days NA days 72 days ## 20 Kingaroy 2016 NA days 54 days NA days as.double(mean(dat2[index1, &quot;flower&quot;], na.rm = TRUE)) ## [1] 54 as.double(mean(dat2[index1, &quot;pod&quot;], na.rm = TRUE)) ## [1] 68.25 as.double(mean(dat2[index1, &quot;late_pod&quot;], na.rm = TRUE)) ## [1] 73.5 We can see that flowering and podding can be variable, and depend on the cumulative degree days. However, on average flowering starts 54 days after sowing, podding starts 68.25, and late podding 73.5. "],
["grain-yield-meta-analysis.html", "6 Grain yield meta-analysis 6.1 metafor analysis 6.2 netmeta analysis", " 6 Grain yield meta-analysis Let’s get started with the analysis by first finding the best model fit that answers our research question. Which spray management scenario provides the greatest yield protection from powdery mildew. To do this, in our model: Grain yield is our response variable (t / ha) Trial, which resolves combinations of categorical variables: year, location, row spacing, fungicide dose and cultivar; is set as a random intercept We will test spray management (our treatment) as a fixed effect and random interactive term to trial First, how well does the data compare across the trial years and trials? # class spray_management as a factor and reorder them for the plot slimmer_PM_dat$spray_management &lt;- factor(slimmer_PM_dat$spray_management, rev( c( &quot;control&quot;, &quot;Early&quot;, &quot;Recommended&quot;, &quot;Recommended_plus&quot;, &quot;Late&quot;, &quot;Late_plus&quot; ) )) ggplot(slimmer_PM_dat, aes(x = as.factor(year), fill = spray_management)) + geom_bar(position = &quot;dodge2&quot;) + scale_fill_usq(name = &quot;Spray Management&quot;) + xlab(&quot;Year&quot;) kable( table(slimmer_PM_dat$spray_management, slimmer_PM_dat$year), align = rep(&#39;c&#39;, 8), caption = &quot;Which treatments and how many treatments are represented in each year&quot; ) %&gt;% kable_styling( &quot;striped&quot;, fixed_thead = TRUE, full_width = FALSE, position = &quot;center&quot; ) (#tab:table_of_nTreatments)Which treatments and how many treatments are represented in each year 2011 2012 2013 2015 2016 2017 2018 2019 Late_plus 0 0 0 1 7 0 12 0 Late 0 0 0 1 2 12 0 2 Recommended_plus 2 6 6 1 5 24 0 2 Recommended 4 6 3 1 4 12 0 2 Early 0 0 1 0 0 12 0 0 control 4 2 4 1 3 18 6 2 Treatments Late_plus and Early don’t have very good comparison to other treatments. Let’s visualise the spread of data in each treatments with box-plots. slimmer_PM_dat %&gt;% ggplot( aes( y = grain_yield.t.ha, x = spray_management, fill = spray_management, colour = spray_management ) ) + geom_boxplot(alpha = 0.25) + geom_jitter(width = 0.1, alpha = 0.5) + labs(x = &quot;Spray management variable&quot;, y = &quot;Grain yield (t/Ha)&quot;, title = &quot;Mean grain yield from each treatment \\n categorised by spray management scenario&quot;) + theme(plot.title = element_text(hjust = 0.5)) + geom_hline(yintercept = 0, linetype = 2) + scale_fill_usq() + scale_colour_usq() + coord_flip() + guides(fill = FALSE, color = FALSE) There seems like little difference between the treatments, with exception of Late_plus. Let’s do this plot again, but let’s look at the proportional mean difference between each treatment and the no spray control for each study, this should reduce variation in yield due between trials. slimmer_PM_dat %&gt;% filter(spray_management != &quot;control&quot;) %&gt;% ggplot( aes( y = prop_yield_gain, x = spray_management, fill = spray_management, colour = spray_management ) ) + geom_boxplot(alpha = 0.25) + geom_jitter(width = 0.1, alpha = 0.5) + labs(x = &quot;Spray management variable&quot;, y = &quot;Grain yield (t/Ha)&quot;, title = &quot;Mean grain yield from each treatment \\n categorised by spray management scenario&quot;) + theme(plot.title = element_text(hjust = 0.5)) + geom_hline(yintercept = 0, linetype = 2) + scale_fill_usq() + scale_colour_usq() + coord_flip() + guides(fill = FALSE, color = FALSE) Using the mean difference in the treatment effect seems to show the effect of each treatment better than just raw yield and reduces the variability in the treatments. We know there is a good deal of variability in our studies and between them. Mungbean produces variable yields between seasons so ordinarily we should use a response that highlights the difference in the treatment effects that we are interested in and reduce the variability. However for an arm-based analysis we calculate the differences between control and treatment after the meta-analysis. 6.0.1 Formating the response variable Let’s inspect the response variance grain_yield.t.ha to see if it is normally distributed. In many cases a log transformation of the response variable improves the fit, due to the prevalence of log distributed data in nature. hist_usq(slimmer_PM_dat$grain_yield.t.ha, main = &quot;Grain yield (t / ha)&quot;) hist_usq(log(slimmer_PM_dat$grain_yield.t.ha), main = &quot;log(Grain yield (t / ha))&quot;) hist_usq(sqrt(slimmer_PM_dat$grain_yield.t.ha), main = &quot;sqrt(Grain yield (t / ha))&quot;) hist_usq(slimmer_PM_dat$yield_gain, main = &quot;Mean difference to control (t / ha)&quot;) The distribution of data does not seem to be improved by transformation of the data. We will retain the continuous variable grain_yield.t.ha as the response. Mean differences won’t be used as we are following the methodology of a ARM-based model, where mean differences are calculated following the meta-analysis. 6.0.2 Formatting Variance First let’s remove any entries missing variance. any(is.na(slimmer_PM_dat$yield_error)) ## [1] TRUE slimmer_PM_dat &lt;- slimmer_PM_dat[!is.na(slimmer_PM_dat$yield_error), ] slimmer_PM_dat$vi &lt;- slimmer_PM_dat$yield_error 6.0.2.1 Calculate sample variance from mean square errors Currently our data frame has the sample variance calculated earlier, however we can approximate it using the mean squared error. Let’s show the rational for our calculation and then add a secondary variance column (vi2). \\(MSE = Var + bias\\) However if our MSE was calculated from an unbiased sample we can assume \\(bias = 0\\) and therefore: \\(MSE = Var\\) To calculate the sample variance (for each treatment in the trial) from the mean square error (Trial variance) all we need to do is divide by the number of samples in each treatment. We can show this because: \\(MSE = \\frac{\\sum_{y_1}^{y_n}(y_i - \\overline{y})^2}{n - 1}\\) Where the sum of squares for the fungicide treatment estimator (\\(y\\)) is divided by the number of fungicide treatments (\\(n\\)). The sample variance is a similar formula except we use \\(x\\) instead of \\(y\\). \\(S_{Var} = \\frac{\\sum_{x_1}^{x_n}(x_i - \\overline{x})^2}{n - 1}\\) \\(x\\) being each observation within the experiment and \\(n\\) being the number of samples in the whole trial. Therefore: \\(S_{Var}\\approx\\frac{1}{n_{x}}\\frac{\\sum_{y_1}^{y_n}(y_i - \\overline{y})^2}{n_y - 1}\\) Where \\(n_x\\) is the number of samples within each treatment. #calculation when using log of response # slimmer_PM_dat$vi &lt;- # slimmer_PM_dat$Y_Msquare / (slimmer_PM_dat$n * slimmer_PM_dat$grain_yield.t.ha ^ # 2) slimmer_PM_dat$vi2 &lt;- slimmer_PM_dat$Y_Msquare / slimmer_PM_dat$n Now Let’s simplify our data by removing the control data, converting disease pressure (D_pres) to a factor and selecting only the columns of data necessary for analysis. We will also include the mean difference or response ratio grain_MD, between the treatment and control as a comparison of responses. dat1 &lt;- slimmer_PM_dat %&gt;% mutate(vi = vi/n) %&gt;% mutate(spray_management = factor( spray_management, c( &quot;control&quot;, &quot;Early&quot;, &quot;Recommended&quot;, &quot;Recommended_plus&quot;, &quot;Late&quot;, &quot;Late_plus&quot; ) ), D_pres = factor(D_pres, c(&quot;lowD&quot;, &quot;highD&quot;)), id = row_number()) %&gt;% dplyr::select( trial, trial_ref, location, year, row_spacing, host_genotype, spray_management, fungicide_ai, D_pres, grain_yield.t.ha, yield_gain, dose, vi, yield_error, vi2, n, id) 6.1 metafor analysis For the first grain yield meta-analysis, we’ll use the metafor package (Viechtbauer 2010). To do a ARM based model we will use the package metafor. We are using the spray_management variable as a moderator and an interactive term to the trial random variable. PM_mv &lt;- rma.mv( yi = grain_yield.t.ha, vi, mods = ~ spray_management, method = &quot;ML&quot;, random = list(~ spray_management | trial, ~1 | id), struct = &quot;UN&quot;, control=list(optimizer=&quot;optim&quot;), data = dat1 ) ## Warning: Some combinations of the levels of the inner factor never occurred. ## Corresponding rho value(s) fixed to 0. summary(PM_mv) ## ## Multivariate Meta-Analysis Model (k = 154; method: ML) ## ## logLik Deviance AIC BIC AICc ## 49.8964 422.0231 -45.7927 36.2050 -33.7927 ## ## Variance Components: ## ## estim sqrt nlvls fixed factor ## sigma^2 0.0005 0.0221 154 no id ## ## outer factor: trial (nlvls = 33) ## inner factor: spray_management (nlvls = 6) ## ## estim sqrt k.lvl fixed level ## tau^2.1 0.2297 0.4793 38 no control ## tau^2.2 0.1943 0.4408 13 no Early ## tau^2.3 0.2780 0.5272 27 no Recommended ## tau^2.4 0.3924 0.6264 40 no Recommended_plus ## tau^2.5 0.3241 0.5693 17 no Late ## tau^2.6 0.3783 0.6150 19 no Late_plus ## ## rho.cntr rho.Erly rho.Rcmm rho.Rcm_ rho.Late rho.Lt_p ## control 1 0.9076 0.9733 0.9705 0.9891 0.9777 ## Early 0.9076 1 0.9790 0.9721 0.9566 0.0000 ## Recommended 0.9733 0.9790 1 0.9912 0.9934 0.9966 ## Recommended_plus 0.9705 0.9721 0.9912 1 0.9951 0.9985 ## Late 0.9891 0.9566 0.9934 0.9951 1 0.9979 ## Late_plus 0.9777 0.0000 0.9966 0.9985 0.9979 1 ## cntr Erly Rcmm Rcm_ Late Lt_p ## control - no no no no no ## Early 7 - no no no yes ## Recommended 19 12 - no no no ## Recommended_plus 17 12 24 - no no ## Late 11 12 17 17 - no ## Late_plus 6 0 3 3 3 - ## ## Test for Residual Heterogeneity: ## QE(df = 148) = 37805.5158, p-val &lt; .0001 ## ## Test of Moderators (coefficients 2:6): ## QM(df = 5) = 31.1228, p-val &lt; .0001 ## ## Model Results: ## ## estimate se zval pval ci.lb ## intrcpt 1.1134 0.0851 13.0889 &lt;.0001 0.9466 ## spray_managementEarly -0.0463 0.0498 -0.9305 0.3521 -0.1438 ## spray_managementRecommended 0.0948 0.0306 3.1006 0.0019 0.0349 ## spray_managementRecommended_plus 0.1778 0.0417 4.2653 &lt;.0001 0.0961 ## spray_managementLate 0.1136 0.0306 3.7057 0.0002 0.0535 ## spray_managementLate_plus 0.1475 0.0423 3.4851 0.0005 0.0646 ## ci.ub ## intrcpt 1.2801 *** ## spray_managementEarly 0.0512 ## spray_managementRecommended 0.1548 ** ## spray_managementRecommended_plus 0.2595 *** ## spray_managementLate 0.1736 *** ## spray_managementLate_plus 0.2305 *** ## ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The first table in this output shows the tau^2 (variance) of each random effects and the number of occurrences for each treatment in the analysis. This effectively shows the heterogeneity between experiments for these particular treatments. The tau^2 also gives us the heterogeneity between trials and indicates Recommended_plus showed the highest heterogeneity between experiments followed by Late_plus, Late then Recommended, with Early and the no-spray control showing the least heterogeneity. The second table is in two parts (left and right). The left part, rho, is the correlation of variation between the specified treatments. All comparisons were acceptable except for a comparison between Early and Late_plus, 0.000 rho. Early and Late_plus treatments never occurred within the same trial, which is indicated by the right side of the table (hence the warning). In this result we can see that the Early treatment is not significantly different to the intercept, which in this case is the mean of the no spray control. However the other treatments are significantly different from the no-spray control (intercept). The \\(Q_M\\) omnibus test of moderators, shows the moderators significantly influence the model (\\(Q_M =\\) 31.1228075 \\(,df =\\) 5, P &lt; 0.0001) and we can reject the null hypothesis (\\(H_0 : \\beta_1 = \\beta_2 = \\beta_3 =\\beta_4 = 0\\)) that there is no difference between the moderators (Viechtbauer 2010). The analysis shows there is still a significant amount of residual heterogeneity (\\(Q_E =\\) 3.780551610^{4} \\(,df=\\) 149, P &lt; 0.0001 ) not captured by the spray management moderator indicating other possible moderators which might influence grain yield. source(&quot;R/simple_summary.R&quot;) summary(glht(PM_mv, linfct=cbind(contrMat(rep(1,6), type=&quot;Tukey&quot;))), test=adjusted(&quot;none&quot;)) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Fit: rma.mv(yi = grain_yield.t.ha, V = vi, mods = ~spray_management, ## random = list(~spray_management | trial, ~1 | id), struct = &quot;UN&quot;, ## data = dat1, method = &quot;ML&quot;, control = list(optimizer = &quot;optim&quot;)) ## ## Linear Hypotheses: ## Estimate Std. Error z value Pr(&gt;|z|) ## 2 - 1 == 0 -1.15966 0.11260 -10.299 &lt; 2e-16 *** ## 3 - 1 == 0 -1.01852 0.08771 -11.613 &lt; 2e-16 *** ## 4 - 1 == 0 -0.93553 0.07610 -12.293 &lt; 2e-16 *** ## 5 - 1 == 0 -0.99979 0.07873 -12.699 &lt; 2e-16 *** ## 6 - 1 == 0 -0.96584 0.07781 -12.412 &lt; 2e-16 *** ## 3 - 2 == 0 0.14114 0.03817 3.698 0.000217 *** ## 4 - 2 == 0 0.22413 0.05040 4.447 8.69e-06 *** ## 5 - 2 == 0 0.15987 0.04826 3.313 0.000923 *** ## 6 - 2 == 0 0.19382 0.05505 3.521 0.000430 *** ## 4 - 3 == 0 0.08299 0.02962 2.802 0.005075 ** ## 5 - 3 == 0 0.01873 0.02603 0.720 0.471646 ## 6 - 3 == 0 0.05268 0.03449 1.527 0.126655 ## 5 - 4 == 0 -0.06426 0.02649 -2.425 0.015295 * ## 6 - 4 == 0 -0.03031 0.03035 -0.999 0.317823 ## 6 - 5 == 0 0.03394 0.03081 1.102 0.270580 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- none method) contrast_Ssum &lt;- simple_summary(summary(glht(PM_mv, linfct=cbind(contrMat(rep(1,6), type=&quot;Tukey&quot;))), test=adjusted(&quot;none&quot;))) contrast_Ssum ## contrast coefficients StdErr Zvalue ## 2 - 1 Early - control -1.15966044 0.11259721 -10.2991936 ## 3 - 1 Recommended - control -1.01852119 0.08770764 -11.6126843 ## 4 - 1 Recommended_plus - control -0.93552920 0.07610244 -12.2930255 ## 5 - 1 Late - control -0.99978683 0.07872693 -12.6994260 ## 6 - 1 Late_plus - control -0.96584212 0.07781263 -12.4124088 ## 3 - 2 Recommended - Early 0.14113924 0.03816822 3.6978206 ## 4 - 2 Recommended_plus - Early 0.22413123 0.05039672 4.4473374 ## 5 - 2 Late - Early 0.15987361 0.04825509 3.3130932 ## 6 - 2 Late_plus - Early 0.19381832 0.05504698 3.5209617 ## 4 - 3 Recommended_plus - Recommended 0.08299199 0.02961604 2.8022652 ## 5 - 3 Late - Recommended 0.01873437 0.02602705 0.7198036 ## 6 - 3 Late_plus - Recommended 0.05267908 0.03448875 1.5274280 ## 5 - 4 Late - Recommended_plus -0.06425762 0.02649455 -2.4253150 ## 6 - 4 Late_plus - Recommended_plus -0.03031291 0.03034502 -0.9989419 ## 6 - 5 Late_plus - Late 0.03394471 0.03081044 1.1017275 ## pvals sig ## 2 - 1 0.000000e+00 *** ## 3 - 1 0.000000e+00 *** ## 4 - 1 0.000000e+00 *** ## 5 - 1 0.000000e+00 *** ## 6 - 1 0.000000e+00 *** ## 3 - 2 2.174585e-04 *** ## 4 - 2 8.694121e-06 *** ## 5 - 2 9.227024e-04 *** ## 6 - 2 4.299847e-04 *** ## 4 - 3 5.074514e-03 ** ## 5 - 3 4.716459e-01 ## 6 - 3 1.266546e-01 ## 5 - 4 1.529511e-02 * ## 6 - 4 3.178228e-01 ## 6 - 5 2.705802e-01 These contrasts can be viewed in a plot par(mar = c(5, 13, 4, 2) + 0.1) plot(glht(PM_mv, linfct=cbind(contrMat(rep(1,6), type=&quot;Tukey&quot;))), yaxt=&#39;n&#39;) axis(2, at = seq_along(contrast_Ssum$contrast), labels = rev(contrast_Ssum$contrast), las=2, cex.axis = 0.8) Does disease pressure on the crop affect the optimum spray scenario? Above we can see spraying at the first sign of powdery mildew or with in 7 - 13 days after first sign is effective at mitigating yield loss. Lets test this hypothesis by adding it as a moderator and comparing the new model with the original model above. PM_mv2 &lt;- rma.mv( yi = grain_yield.t.ha, vi, mods = ~ spray_management*D_pres, method = &quot;ML&quot;, random = list(~ spray_management | trial, ~1 | id), struct = &quot;UN&quot;, control=list(optimizer=&quot;optim&quot;), data = dat1 ) ## Warning: Some combinations of the levels of the inner factor never occurred. ## Corresponding rho value(s) fixed to 0. anova(PM_mv, PM_mv2) ## ## df AIC BIC AICc logLik LRT pval QE ## Full 33 -45.2142 55.0053 -26.5142 55.6071 29465.7104 ## Reduced 27 -45.7927 36.2050 -33.7927 49.8964 11.4214 0.0762 37805.5158 We can see that the lower \\(QE\\) indicates that disease pressure moderator helped explain some of the residual heterogeneity in differences in grain yield between treatments. However according to the Wald-test the models were not significantly different and we should use the original “Reduced” model. The P value was close to the 0.05 cut-off so we will present the model output for the interest of the readers. summary(PM_mv2) ## ## Multivariate Meta-Analysis Model (k = 154; method: ML) ## ## logLik Deviance AIC BIC AICc ## 55.6071 410.6016 -45.2142 55.0053 -26.5142 ## ## Variance Components: ## ## estim sqrt nlvls fixed factor ## sigma^2 0.0004 0.0210 154 no id ## ## outer factor: trial (nlvls = 33) ## inner factor: spray_management (nlvls = 6) ## ## estim sqrt k.lvl fixed level ## tau^2.1 0.2211 0.4702 38 no control ## tau^2.2 0.2122 0.4607 13 no Early ## tau^2.3 0.2967 0.5447 27 no Recommended ## tau^2.4 0.4232 0.6505 40 no Recommended_plus ## tau^2.5 0.3430 0.5856 17 no Late ## tau^2.6 0.1548 0.3935 19 no Late_plus ## ## rho.cntr rho.Erly rho.Rcmm rho.Rcm_ rho.Late rho.Lt_p ## control 1 0.9391 0.9847 0.9783 0.9939 0.9843 ## Early 0.9391 1 0.9846 0.9764 0.9634 0.0000 ## Recommended 0.9847 0.9846 1 0.9915 0.9934 0.9959 ## Recommended_plus 0.9783 0.9764 0.9915 1 0.9951 0.9991 ## Late 0.9939 0.9634 0.9934 0.9951 1 0.9974 ## Late_plus 0.9843 0.0000 0.9959 0.9991 0.9974 1 ## cntr Erly Rcmm Rcm_ Late Lt_p ## control - no no no no no ## Early 7 - no no no yes ## Recommended 19 12 - no no no ## Recommended_plus 17 12 24 - no no ## Late 11 12 17 17 - no ## Late_plus 6 0 3 3 3 - ## ## Test for Residual Heterogeneity: ## QE(df = 142) = 29465.7104, p-val &lt; .0001 ## ## Test of Moderators (coefficients 2:12): ## QM(df = 11) = 415.4281, p-val &lt; .0001 ## ## Model Results: ## ## estimate se zval pval ## intrcpt 1.2799 0.1673 7.6486 &lt;.0001 ## spray_managementEarly 0.1550 0.1756 0.8822 0.3777 ## spray_managementRecommended 0.0735 0.0556 1.3225 0.1860 ## spray_managementRecommended_plus 0.1593 0.0897 1.7763 0.0757 ## spray_managementLate 0.1252 0.0573 2.1855 0.0289 ## spray_managementLate_plus 0.4879 0.0516 9.4524 &lt;.0001 ## D_preshighD -0.2172 0.1930 -1.1253 0.2604 ## spray_managementEarly:D_preshighD -0.1472 0.1831 -0.8039 0.4214 ## spray_managementRecommended:D_preshighD 0.0670 0.0652 1.0276 0.3041 ## spray_managementRecommended_plus:D_preshighD 0.0692 0.1034 0.6695 0.5031 ## spray_managementLate:D_preshighD 0.0178 0.0712 0.2495 0.8029 ## spray_managementLate_plus:D_preshighD -0.3806 0.0685 -5.5573 &lt;.0001 ## ci.lb ci.ub ## intrcpt 0.9519 1.6078 *** ## spray_managementEarly -0.1893 0.4992 ## spray_managementRecommended -0.0354 0.1824 ## spray_managementRecommended_plus -0.0165 0.3351 . ## spray_managementLate 0.0129 0.2375 * ## spray_managementLate_plus 0.3867 0.5891 *** ## D_preshighD -0.5955 0.1611 ## spray_managementEarly:D_preshighD -0.5059 0.2116 ## spray_managementRecommended:D_preshighD -0.0608 0.1948 ## spray_managementRecommended_plus:D_preshighD -0.1335 0.2720 ## spray_managementLate:D_preshighD -0.1218 0.1574 ## spray_managementLate_plus:D_preshighD -0.5148 -0.2463 *** ## ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 summary(glht(PM_mv2, linfct=cbind(contrMat(rep(7,12), type=&quot;Tukey&quot;))), test=adjusted(&quot;none&quot;)) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Fit: rma.mv(yi = grain_yield.t.ha, V = vi, mods = ~spray_management * ## D_pres, random = list(~spray_management | trial, ~1 | id), ## struct = &quot;UN&quot;, data = dat1, method = &quot;ML&quot;, control = list(optimizer = &quot;optim&quot;)) ## ## Linear Hypotheses: ## Estimate Std. Error z value Pr(&gt;|z|) ## 2 - 1 == 0 -1.124912 0.252753 -4.451 8.56e-06 *** ## 3 - 1 == 0 -1.206363 0.155126 -7.777 7.55e-15 *** ## 4 - 1 == 0 -1.120542 0.131598 -8.515 &lt; 2e-16 *** ## 5 - 1 == 0 -1.154653 0.137408 -8.403 &lt; 2e-16 *** ## 6 - 1 == 0 -0.791979 0.202914 -3.903 9.50e-05 *** ## 7 - 1 == 0 -1.497073 0.348219 -4.299 1.71e-05 *** ## 8 - 1 == 0 -1.427026 0.237646 -6.005 1.92e-09 *** ## 9 - 1 == 0 -1.212855 0.198185 -6.120 9.37e-10 *** ## 10 - 1 == 0 -1.210615 0.239635 -5.052 4.37e-07 *** ## 11 - 1 == 0 -1.262088 0.213254 -5.918 3.25e-09 *** ## 12 - 1 == 0 -1.660424 0.148930 -11.149 &lt; 2e-16 *** ## 3 - 2 == 0 -0.081451 0.185930 -0.438 0.661332 ## 4 - 2 == 0 0.004369 0.201439 0.022 0.982696 ## 5 - 2 == 0 -0.029741 0.187742 -0.158 0.874128 ## 6 - 2 == 0 0.332933 0.180470 1.845 0.065065 . ## 7 - 2 == 0 -0.372161 0.251140 -1.482 0.138370 ## 8 - 2 == 0 -0.302115 0.355047 -0.851 0.394816 ## 9 - 2 == 0 -0.087943 0.185662 -0.474 0.635733 ## 10 - 2 == 0 -0.085703 0.199659 -0.429 0.667743 ## 11 - 2 == 0 -0.137177 0.186574 -0.735 0.462194 ## 12 - 2 == 0 -0.535513 0.191008 -2.804 0.005053 ** ## 4 - 3 == 0 0.085820 0.064997 1.320 0.186708 ## 5 - 3 == 0 0.051710 0.045262 1.142 0.253264 ## 6 - 3 == 0 0.414384 0.066502 6.231 4.63e-10 *** ## 7 - 3 == 0 -0.290710 0.217644 -1.336 0.181642 ## 8 - 3 == 0 -0.220664 0.189647 -1.164 0.244607 ## 9 - 3 == 0 -0.006492 0.116268 -0.056 0.955472 ## 10 - 3 == 0 -0.004252 0.143857 -0.030 0.976420 ## 11 - 3 == 0 -0.055726 0.111742 -0.499 0.617991 ## 12 - 3 == 0 -0.454061 0.095439 -4.758 1.96e-06 *** ## 5 - 4 == 0 -0.034111 0.047889 -0.712 0.476289 ## 6 - 4 == 0 0.328564 0.098050 3.351 0.000805 *** ## 7 - 4 == 0 -0.376531 0.253035 -1.488 0.136736 ## 8 - 4 == 0 -0.306484 0.199675 -1.535 0.124805 ## 9 - 4 == 0 -0.092312 0.138584 -0.666 0.505341 ## 10 - 4 == 0 -0.090072 0.186632 -0.483 0.629366 ## 11 - 4 == 0 -0.141546 0.148840 -0.951 0.341609 ## 12 - 4 == 0 -0.539882 0.117598 -4.591 4.41e-06 *** ## 6 - 5 == 0 0.362674 0.075289 4.817 1.46e-06 *** ## 7 - 5 == 0 -0.342420 0.230086 -1.488 0.136691 ## 8 - 5 == 0 -0.272373 0.188882 -1.442 0.149294 ## 9 - 5 == 0 -0.058202 0.108890 -0.535 0.592995 ## 10 - 5 == 0 -0.055962 0.151702 -0.369 0.712209 ## 11 - 5 == 0 -0.107435 0.122157 -0.879 0.379137 ## 12 - 5 == 0 -0.505771 0.090830 -5.568 2.57e-08 *** ## 7 - 6 == 0 -0.705094 0.171492 -4.112 3.93e-05 *** ## 8 - 6 == 0 -0.635048 0.192659 -3.296 0.000980 *** ## 9 - 6 == 0 -0.420876 0.090810 -4.635 3.57e-06 *** ## 10 - 6 == 0 -0.418636 0.120236 -3.482 0.000498 *** ## 11 - 6 == 0 -0.470110 0.089539 -5.250 1.52e-07 *** ## 12 - 6 == 0 -0.868445 0.112614 -7.712 1.24e-14 *** ## 8 - 7 == 0 0.070047 0.279506 0.251 0.802117 ## 9 - 7 == 0 0.284218 0.180602 1.574 0.115551 ## 10 - 7 == 0 0.286458 0.153817 1.862 0.062556 . ## 11 - 7 == 0 0.234985 0.162355 1.447 0.147799 ## 12 - 7 == 0 -0.163351 0.237798 -0.687 0.492125 ## 9 - 8 == 0 0.214172 0.190110 1.127 0.259925 ## 10 - 8 == 0 0.216412 0.209082 1.035 0.300641 ## 11 - 8 == 0 0.164938 0.195993 0.842 0.400039 ## 12 - 8 == 0 -0.233398 0.189522 -1.232 0.218132 ## 10 - 9 == 0 0.002240 0.073581 0.030 0.975714 ## 11 - 9 == 0 -0.049234 0.057857 -0.851 0.394797 ## 12 - 9 == 0 -0.447569 0.086013 -5.203 1.96e-07 *** ## 11 - 10 == 0 -0.051474 0.060776 -0.847 0.397025 ## 12 - 10 == 0 -0.449809 0.120840 -3.722 0.000197 *** ## 12 - 11 == 0 -0.398336 0.097527 -4.084 4.42e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- none method) # plot(glht(PM_mv2, linfct=cbind(contrMat(rep(7,12), type=&quot;Tukey&quot;)))) # I think this plot is too busy to be incorporated 6.1.1 Profile plots Let’s inspect the profile plots to ensure the model is not over-fitted. We expect to see the estimate align with the peak of the curve. Also that the shape of the line is a curve. Caution! this will take some time to run. Lets present the meta-analysis results for the moderator variables in a forest style plot. First lets create a table of the results. results_AI &lt;- data.frame(cbind(PM_mv$b, PM_mv$ci.lb, PM_mv$ci.ub)) efficacy &lt;- as_tibble(results_AI) efficacy$Treatment &lt;- factor(c( &quot;control&quot;, &quot;Early&quot;, &quot;Recommended&quot;, &quot;Recommended_plus&quot;, &quot;Late&quot;, &quot;Late_plus&quot; )) efficacy$se &lt;- PM_mv$se colnames(efficacy) &lt;- c(&quot;Mean&quot;, &quot;CIs_lower&quot;, &quot;CI_upper&quot;, &quot;Treatment&quot;, &quot;SE&quot;) efficacy ## # A tibble: 6 x 5 ## Mean CIs_lower CI_upper Treatment SE ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 1.11 0.947 1.28 control 0.0851 ## 2 -0.0463 -0.144 0.0512 Early 0.0498 ## 3 0.0948 0.0349 0.155 Recommended 0.0306 ## 4 0.178 0.0961 0.260 Recommended_plus 0.0417 ## 5 0.114 0.0535 0.174 Late 0.0306 ## 6 0.148 0.0646 0.230 Late_plus 0.0423 Let’s view these comparisons in a plot. YieldContrasts &lt;- efficacy %&gt;% filter(Treatment != &quot;control&quot;) %&gt;% mutate(Treatment = factor(Treatment, levels = rev( c( &quot;Early&quot;, &quot;Recommended&quot;, &quot;Recommended_plus&quot;, &quot;Late&quot;, &quot;Late_plus&quot; ) ))) %&gt;% ggplot(aes(Treatment, Mean)) + geom_hline( yintercept = seq(-0.05, 0.3, by = 0.05), color = usq_cols(&quot;usq charcoal&quot;), linetype = 3 ) + geom_hline(yintercept = 0) + geom_point(aes(size = 1 / SE), shape = 15) + geom_linerange(aes(ymin = CIs_lower, ymax = CI_upper)) + coord_flip() YieldContrasts 6.1.2 Forest plot of trial treatment effect per trial Lets look at the trial variability in this model with a forest plot # THIS NEEDS TO BE FIXED source(here(&quot;R/change_labels.R&quot;)) source(here(&quot;R/forest_rows.R&quot;)) ### Sort and arrange data-frame accordingly and produce a index vector to inform the order of each &quot;Trial&quot; on the plot index1 &lt;- dat1 %&gt;% mutate(ID = seq_along(trial_ref)) %&gt;% mutate(spray_management = factor(spray_management, levels = c(&quot;Early&quot;,&quot;Late&quot;,&quot;Recommended&quot;, &quot;Recommended_plus&quot;,&quot;Late_plus&quot;))) %&gt;% arrange(desc(spray_management), location, desc(grain_yield.t.ha)) %&gt;% mutate(ID2 = order(ID))%&gt;% pull(ID2) ### Use forest rows function to return a list of where to place on the plot: sub-titles, each trial row, and summary prediction for each treatment. ### this list can be used below to reference where to plot each variable rows1 &lt;- forest_rows(head_row = 186, ord_var = dat1$spray_management, index = index1, gap = 5, row_offset = -2) ### A data-frame of meta-model coefficients used to produce the summary polygons for each treatment polys &lt;- data.frame(ref = change_labels(names(coef(PM_mv))), x = c(coef(PM_mv)[1],coef(PM_mv)[1] + coef(PM_mv)[2:6]), ci.lb = c(PM_mv$ci.lb[1],PM_mv$ci.lb[1] +PM_mv$ci.lb[2:6]), ci.ub = c(PM_mv$ci.ub[1],PM_mv$ci.ub[1] +PM_mv$ci.ub[2:6]))[c(2,5,3,4,6,1),] polys$rows &lt;- rows1$pred_row - 1.5 forest1 &lt;- metafor::forest(PM_mv, cex = 1.15 , width = 5, #order = &quot;fit&quot;, rows = rows1$trows-1.5, ilab = cbind(dat1$year, dat1$row_spacing, dat1$host_genotype, dat1$dose), ilab.xpos = c(-2.35,-2.1,-1.8,-1.4)+1, slab = NA, xlim = c(-2, 4), ylim = c(5,190), xlab = &quot;Grain yield mean difference&quot;, addfit = FALSE, efac = c(0.2,0.15,0.2), at = seq(-0.5,3, 0.5)) ### code which puts lines and annotations on the plot, its a bit long... source(here(&quot;R/add_annotations.R&quot;)) 6.2 netmeta analysis We can use the netmeta package to give a graphical representation of the pairwise comparisons. Let’s analyse the data again using a different statistical approach to see if our outcome with the metafor package was robust. The netmeta package uses a frequentist approach to the analysis and focuses on the pairwise comparisons between treatments. datPM3 &lt;- slimmer_PM_dat %&gt;% group_by(trial, spray_management, n) %&gt;% summarize(yi_mean = mean(grain_yield.t.ha), vi_mean = mean(yield_error)) %&gt;% ungroup() ## `summarise()` regrouping output by &#39;trial&#39;, &#39;spray_management&#39; (override with `.groups` argument) PM_con &lt;- pairwise( treat = spray_management, n = n, mean = yi_mean, sd = sqrt(vi_mean), studlab = trial, data = datPM3, sm = &quot;MD&quot; ) net_con &lt;- netmeta(TE, seTE, treat1, treat2, studlab, data = PM_con, sm = &quot;MD&quot;) summary(net_con) ## Number of studies: k = 30 ## Number of treatments: n = 6 ## Number of pairwise comparisons: m = 163 ## Number of designs: d = 9 ## ## Fixed effects model ## ## Treatment estimate (sm = &#39;MD&#39;): ## control Early Late Late_plus Recommended Recommended_plus ## control . 0.0433 -0.0765 -0.1690 -0.0900 -0.1331 ## Early -0.0433 . -0.1198 -0.2123 -0.1333 -0.1764 ## Late 0.0765 0.1198 . -0.0925 -0.0135 -0.0566 ## Late_plus 0.1690 0.2123 0.0925 . 0.0790 0.0359 ## Recommended 0.0900 0.1333 0.0135 -0.0790 . -0.0431 ## Recommended_plus 0.1331 0.1764 0.0566 -0.0359 0.0431 . ## ## Lower 95%-confidence limit: ## control Early Late Late_plus Recommended Recommended_plus ## control . 0.0045 -0.1115 -0.2205 -0.1217 -0.1713 ## Early -0.0821 . -0.1578 -0.2690 -0.1596 -0.2178 ## Late 0.0415 0.0818 . -0.1437 -0.0442 -0.0933 ## Late_plus 0.1175 0.1556 0.0413 . 0.0271 -0.0166 ## Recommended 0.0583 0.1071 -0.0172 -0.1308 . -0.0776 ## Recommended_plus 0.0949 0.1351 0.0200 -0.0883 0.0087 . ## ## Upper 95%-confidence limit: ## control Early Late Late_plus Recommended Recommended_plus ## control . 0.0821 -0.0415 -0.1175 -0.0583 -0.0949 ## Early -0.0045 . -0.0818 -0.1556 -0.1071 -0.1351 ## Late 0.1115 0.1578 . -0.0413 0.0172 -0.0200 ## Late_plus 0.2205 0.2690 0.1437 . 0.1308 0.0883 ## Recommended 0.1217 0.1596 0.0442 -0.0271 . -0.0087 ## Recommended_plus 0.1713 0.2178 0.0933 0.0166 0.0776 . ## ## Random effects model ## ## Treatment estimate (sm = &#39;MD&#39;): ## control Early Late Late_plus Recommended Recommended_plus ## control . -0.0217 -0.1204 -0.1868 -0.0963 -0.1597 ## Early 0.0217 . -0.0987 -0.1652 -0.0746 -0.1381 ## Late 0.1204 0.0987 . -0.0664 0.0241 -0.0393 ## Late_plus 0.1868 0.1652 0.0664 . 0.0905 0.0271 ## Recommended 0.0963 0.0746 -0.0241 -0.0905 . -0.0634 ## Recommended_plus 0.1597 0.1381 0.0393 -0.0271 0.0634 . ## ## Lower 95%-confidence limit: ## control Early Late Late_plus Recommended Recommended_plus ## control . -0.1163 -0.2025 -0.3087 -0.1653 -0.2331 ## Early -0.0729 . -0.1950 -0.3077 -0.1663 -0.2325 ## Late 0.0384 0.0025 . -0.1944 -0.0542 -0.1201 ## Late_plus 0.0650 0.0226 -0.0616 . -0.0346 -0.0993 ## Recommended 0.0273 -0.0170 -0.1024 -0.2156 . -0.1317 ## Recommended_plus 0.0864 0.0436 -0.0415 -0.1535 -0.0049 . ## ## Upper 95%-confidence limit: ## control Early Late Late_plus Recommended Recommended_plus ## control . 0.0729 -0.0384 -0.0650 -0.0273 -0.0864 ## Early 0.1163 . -0.0025 -0.0226 0.0170 -0.0436 ## Late 0.2025 0.1950 . 0.0616 0.1024 0.0415 ## Late_plus 0.3087 0.3077 0.1944 . 0.2156 0.1535 ## Recommended 0.1653 0.1663 0.0542 0.0346 . 0.0049 ## Recommended_plus 0.2331 0.2325 0.1201 0.0993 0.1317 . ## ## Quantifying heterogeneity / inconsistency: ## tau^2 = 0.0158; tau = 0.1255; I^2 = 68.3% [59.8%; 75.0%] ## ## Tests of heterogeneity (within designs) and inconsistency (between designs): ## Q d.f. p-value ## Total 233.27 74 &lt; 0.0001 ## Within designs 152.36 59 &lt; 0.0001 ## Between designs 80.91 15 &lt; 0.0001 Now let’s visualise this as a forest plot. forest( net_con, reference.group = 1, rightcols = c(&quot;effect&quot;, &quot;ci&quot;, &quot;Pscore&quot;), rightlabs = &quot;P-Score&quot;, small.values = &quot;bad&quot; ) The netmeta analysis suggests the spray schedule commencing early are no different to any other treatment including the no spray control. It estimates the mean is very similar to the recommended treatments. The Recommended_plus and Late_plus treatments show higher mean estimates, however are not significantly different from the Early estimate. netgraph( net_con, plastic = FALSE, col = usq_cols(&quot;support orange&quot;), thickness = &quot;number.of.studies&quot;, points = FALSE, col.points = usq_cols(&quot;usq charcoal&quot;), cex.points = 1, number.of.studies = TRUE, cex.number.of.studies = 1, col.number.of.studies = &quot;black&quot;, bg.number.of.studies = usq_cols(&quot;support orange&quot;), multiarm = FALSE, col.multiarm = usq_cols(&quot;support turquiose&quot;), pos.number.of.studies = 0.5 ) netleague(net_con) ## League table (fixed effects model): ## ## control -0.1284 [-0.2030; -0.0539] ## 0.0433 [ 0.0045; 0.0821] Early ## -0.0765 [-0.1115; -0.0415] -0.1198 [-0.1578; -0.0818] ## -0.1690 [-0.2205; -0.1175] -0.2123 [-0.2690; -0.1556] ## -0.0900 [-0.1217; -0.0583] -0.1333 [-0.1596; -0.1071] ## -0.1331 [-0.1713; -0.0949] -0.1764 [-0.2178; -0.1351] ## ## -0.0676 [-0.1116; -0.0236] -0.2274 [-0.2992; -0.1555] ## -0.1481 [-0.2208; -0.0753] . ## Late -0.0684 [-0.1392; 0.0024] ## -0.0925 [-0.1437; -0.0413] Late_plus ## -0.0135 [-0.0442; 0.0172] 0.0790 [ 0.0271; 0.1308] ## -0.0566 [-0.0933; -0.0200] 0.0359 [-0.0166; 0.0883] ## ## -0.0797 [-0.1144; -0.0450] -0.1189 [-0.1614; -0.0765] ## -0.1403 [-0.1680; -0.1126] -0.1482 [-0.2392; -0.0572] ## 0.0014 [-0.0352; 0.0379] -0.0533 [-0.0975; -0.0091] ## 0.1602 [ 0.0643; 0.2561] -0.0019 [-0.0742; 0.0705] ## Recommended -0.0532 [-0.0901; -0.0163] ## -0.0431 [-0.0776; -0.0087] Recommended_plus ## ## League table (random effects model): ## ## control -0.1025 [-0.2323; 0.0273] ## -0.0217 [-0.1163; 0.0729] Early ## -0.1204 [-0.2025; -0.0384] -0.0987 [-0.1950; -0.0025] ## -0.1868 [-0.3087; -0.0650] -0.1652 [-0.3077; -0.0226] ## -0.0963 [-0.1653; -0.0273] -0.0746 [-0.1663; 0.0170] ## -0.1597 [-0.2331; -0.0864] -0.1381 [-0.2325; -0.0436] ## ## -0.1332 [-0.2318; -0.0346] -0.2297 [-0.3733; -0.0861] ## -0.1194 [-0.2301; -0.0087] . ## Late -0.0417 [-0.2050; 0.1215] ## -0.0664 [-0.1944; 0.0616] Late_plus ## 0.0241 [-0.0542; 0.1024] 0.0905 [-0.0346; 0.2156] ## -0.0393 [-0.1201; 0.0415] 0.0271 [-0.0993; 0.1535] ## ## -0.0950 [-0.1690; -0.0211] -0.1353 [-0.2156; -0.0551] ## -0.1102 [-0.2225; 0.0020] -0.1644 [-0.2827; -0.0462] ## 0.0258 [-0.0608; 0.1124] -0.0621 [-0.1507; 0.0264] ## 0.1438 [-0.0328; 0.3204] 0.0052 [-0.1715; 0.1819] ## Recommended -0.0697 [-0.1395; 0.0000] ## -0.0634 [-0.1317; 0.0049] Recommended_plus decomp.design(net_con) ## Q statistics to assess homogeneity / consistency ## ## Q df p-value ## Total 233.27 74 &lt; 0.0001 ## Within designs 152.36 59 &lt; 0.0001 ## Between designs 80.91 15 &lt; 0.0001 ## ## Design-specific decomposition of within-designs Q statistic ## ## Design Q df p-value ## control:Late_plus 0.46 2 0.7934 ## control:Recommended 0.10 1 0.7472 ## control:Early:Late:Recommended:Recommended_plus 39.85 20 0.0052 ## control:Late:Late_plus:Recommended:Recommended_plus 18.72 8 0.0164 ## control:Late:Recommended:Recommended_plus 0.66 3 0.8830 ## control:Recommended:Recommended_plus 44.10 10 &lt; 0.0001 ## Early:Late:Recommended:Recommended_plus 48.46 15 &lt; 0.0001 ## ## Between-designs Q statistic after detaching of single designs ## ## Detached design Q df p-value ## control:Early 71.08 14 &lt; 0.0001 ## control:Late_plus 77.94 14 &lt; 0.0001 ## control:Recommended 80.43 14 &lt; 0.0001 ## Recommended:Recommended_plus 69.94 14 &lt; 0.0001 ## control:Early:Late:Recommended:Recommended_plus 67.09 11 &lt; 0.0001 ## control:Late:Late_plus:Recommended:Recommended_plus 54.88 11 &lt; 0.0001 ## control:Late:Recommended:Recommended_plus 60.98 12 &lt; 0.0001 ## control:Recommended:Recommended_plus 76.92 13 &lt; 0.0001 ## Early:Late:Recommended:Recommended_plus 70.66 12 &lt; 0.0001 ## ## Q statistic to assess consistency under the assumption of ## a full design-by-treatment interaction random effects model ## ## Q df p-value tau.within tau2.within ## Between designs 14.37 15 0.4980 0.1270 0.0161 netsplit(net_con) ## Separate indirect from direct evidence (SIDE) using back-calculation method ## ## Fixed effects model: ## ## comparison k prop nma direct indir. Diff z p-value ## control:Early 7 0.27 0.0433 -0.1284 0.1071 -0.2355 -5.29 &lt; 0.0001 ## control:Late 11 0.63 -0.0765 -0.0676 -0.0917 0.0241 0.65 0.5150 ## control:Late_plus 6 0.51 -0.1690 -0.2274 -0.1072 -0.1202 -2.29 0.0223 ## control:Recommended 19 0.83 -0.0900 -0.0797 -0.1417 0.0620 1.43 0.1526 ## control:Recommended_plus 17 0.81 -0.1331 -0.1189 -0.1933 0.0744 1.50 0.1335 ## Early:Late 12 0.27 -0.1198 -0.1481 -0.1092 -0.0389 -0.89 0.3719 ## Early:Late_plus 0 0 -0.2123 . -0.2123 . . . ## Early:Recommended 12 0.90 -0.1333 -0.1403 -0.0720 -0.0683 -1.55 0.1223 ## Early:Recommended_plus 12 0.21 -0.1764 -0.1482 -0.1838 0.0356 0.68 0.4949 ## Late:Late_plus 3 0.52 -0.0925 -0.0684 -0.1188 0.0504 0.96 0.3350 ## Late:Recommended 17 0.71 -0.0135 0.0014 -0.0492 0.0506 1.47 0.1410 ## Late:Recommended_plus 17 0.69 -0.0566 -0.0533 -0.0640 0.0108 0.27 0.7898 ## Late_plus:Recommended 3 0.29 0.0790 0.1602 0.0454 0.1147 1.97 0.0486 ## Late_plus:Recommended_plus 3 0.53 0.0359 -0.0019 0.0776 -0.0794 -1.48 0.1383 ## Recommended:Recommended_plus 24 0.87 -0.0431 -0.0532 0.0250 -0.0782 -1.49 0.1357 ## ## Random effects model: ## ## comparison k prop nma direct indir. Diff z p-value ## control:Early 7 0.53 -0.0217 -0.1025 0.0699 -0.1724 -1.78 0.0746 ## control:Late 11 0.69 -0.1204 -0.1332 -0.0917 -0.0415 -0.46 0.6475 ## control:Late_plus 6 0.72 -0.1868 -0.2297 -0.0765 -0.1532 -1.11 0.2684 ## control:Recommended 19 0.87 -0.0963 -0.0950 -0.1051 0.0101 0.10 0.9231 ## control:Recommended_plus 17 0.84 -0.1597 -0.1353 -0.2844 0.1491 1.47 0.1406 ## Early:Late 12 0.76 -0.0987 -0.1194 -0.0346 -0.0848 -0.74 0.4587 ## Early:Late_plus 0 0 -0.1652 . -0.1652 . . . ## Early:Recommended 12 0.67 -0.0746 -0.1102 -0.0035 -0.1068 -1.08 0.2816 ## Early:Recommended_plus 12 0.64 -0.1381 -0.1644 -0.0914 -0.0730 -0.73 0.4671 ## Late:Late_plus 3 0.61 -0.0664 -0.0417 -0.1058 0.0640 0.48 0.6333 ## Late:Recommended 17 0.82 0.0241 0.0258 0.0164 0.0094 0.09 0.9273 ## Late:Recommended_plus 17 0.83 -0.0393 -0.0621 0.0750 -0.1372 -1.24 0.2154 ## Late_plus:Recommended 3 0.50 0.0905 0.1438 0.0369 0.1069 0.84 0.4024 ## Late_plus:Recommended_plus 3 0.51 0.0271 0.0052 0.0500 -0.0448 -0.35 0.7286 ## Recommended:Recommended_plus 24 0.96 -0.0634 -0.0697 0.0860 -0.1557 -0.88 0.3778 ## ## Legend: ## comparison - Treatment comparison ## k - Number of studies providing direct evidence ## prop - Direct evidence proportion ## nma - Estimated treatment effect (MD) in network meta-analysis ## direct - Estimated treatment effect (MD) derived from direct evidence ## indir. - Estimated treatment effect (MD) derived from indirect evidence ## Diff - Difference between direct and indirect treatment estimates ## z - z-value of test for disagreement (direct versus indirect) ## p-value - p-value of test for disagreement (direct versus indirect) nm1 &lt;- netmeasures(net_con) plot( nm1$meanpath, nm1$minpar, pch = &quot;&quot;, xlab = &quot;Mean path length&quot;, ylab = &quot;Minimal parallelism&quot; ) text(nm1$meanpath, nm1$minpar, names(nm1$meanpath), cex = 0.8) save(dat1, efficacy, slimmer_PM_dat, PM_mv, YieldContrasts, contrast_Ssum, file = here(&quot;cache/Meta-analysisData.Rdata&quot;)) 6.2.0.1 Powdery mildewMBM comparison – Delete One aspect we would like to consider is how the results of this meta-analysis compares to how the PowderyMildewMBM estimates the effect of fungicide applications on grain yields. Below we create a data frame of the mitigation factors for each spray scenario so we can compare them to the outcomes of the meta-analysis. PMBM &lt;- data.frame(Sprays = c(rep(1,20), rep(2,20)), Disease = rep(c(rep(&quot;NotPresent&quot;, 5), rep(&quot;LowerCanopy&quot;, 5), rep(&quot;MidCanopy&quot;, 5), rep(&quot;UpperCanopy&quot;, 5)),2), CropMaturity = rep(c(&quot;Vegetative&quot;, &quot;Budding&quot;, &quot;Flowering&quot;, &quot;EarlyPod&quot;, &quot;LatePod&quot;), 8), mitigation = c(0.57, 0.855, 0.95,0.95,0.95, 0.45995, 0.52919,0.5530,0.390,0.1642, 0.291258,0.351051, 0.2454,0.1409,0.4717, 0,0.059597,0.093034,0.0682476,0.0215584, 0.95,0.95,0.95,0.95,0.95, 0.766588,0.6991,0.55042,0.390056,0.1642, 0.485429,0.390,0.2454,0.140904,0.0471684, 0.0791,0.086068,0.093034,0.0682476,0.0215584)) # what is the mean age of the plant in our data when disease first occurs and we apply the first spray? source(&quot;R/import_data.R&quot;) PM_MB_dat &lt;- import_data() mean(PM_MB_dat$first_sign_disease - PM_MB_dat$planting_date, na.rm =TRUE) # 46.3 days (which is when the plant is flowering) ## Time difference of 46.3207 days #What proportion of the yield was saved? 1 - (coef(PM_mv)[1] /(coef(PM_mv)[1] + coef(PM_mv)[3])) ## intrcpt ## 0.07849331 1- (coef(PM_mv)[1] /(coef(PM_mv)[1] + coef(PM_mv)[4])) ## intrcpt ## 0.137724 PMBM %&gt;% filter(CropMaturity == &quot;Flowering&quot;) ## Sprays Disease CropMaturity mitigation ## 1 1 NotPresent Flowering 0.950000 ## 2 1 LowerCanopy Flowering 0.553000 ## 3 1 MidCanopy Flowering 0.245400 ## 4 1 UpperCanopy Flowering 0.093034 ## 5 2 NotPresent Flowering 0.950000 ## 6 2 LowerCanopy Flowering 0.550420 ## 7 2 MidCanopy Flowering 0.245400 ## 8 2 UpperCanopy Flowering 0.093034 To to a better comparison I need to know how the mitigation factor is calculated with the estimated yields. "]
]
