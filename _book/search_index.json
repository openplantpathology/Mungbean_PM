[
["preliminary-analysis.html", "3 Preliminary Analysis 3.1 Explore and Visualise Data", " 3 Preliminary Analysis 3.1 Explore and Visualise Data First lets import the data. Each row provides the mean yield for each experimental treatment. The data explored in the PM_MB_means data frame is a list of mean values from each treatment in each respective experiment. These preliminary analyses will focus on the change in mungbean yields which is attributable to the fungicide treatment. Later in this document we will also consider the impact of fungicide treatments on disease incidence/severity. Mean powdery mildew incidence was recorded at the end of each growing season. Some experiments recorded disease incidence throughout the season and these were summarised with AUDPC. AUDPC for trials which only provided final powdery mildew incidence was calculated using the record of ‘first sign of disease’ and final assessment. More details on how the PM_MB_means data was compiled can be found in the [‘Data wrangle vingette’][./vignette/191115_PMMB_DataWrangling_PM.Rmd] Various factors have been studied in the previous experiments which may influence the subsequent meta-analysis. On this page, unless stated, the following plots and analyses were made disregarding effects the following factors which have the potential to influence mungbean grain yield and/or powdery mildew mean plot severity. 1 Fungicide type 2 Fungicide dose (varies only slightly within some fungicide types) 3 Number of fungicide sprays 4 Timing of fungicide spray/s relative to first sign of disease 5 Host cultivars (probably is a co-variate with season due to changing cultivars over time) 6 Experiment location 7 Row spacing 8 In-crop rainfall 9 Irrigated vs non-irrigated trials 10 Mean daily temperature in the weeks following spray application 11 Final disease rating 12 Two pathogen species cause PM (new discovery in 2018) The data plotted below are from 26 field trials between (2001 - 2019) of which the details are described in Studies considered in meta-analysis section. 3.1.1 Fungicides 3.1.1.1 Fungicide type First lets standardise the sulphur treatments. Some early experiments tested different formulations. There was no difference in the sulphur formulations so we will refer to all of them as “sulphur”. # Remove the variation in different sulphur formulations unique(PM_MB_means[grep(&quot;sulphur&quot;, PM_MB_means$fungicide_ai), &quot;fungicide_ai&quot;]) ## [1] sulphur sulphur (SC) sulphur (WP) sulphur (Ultra SC) ## 14 Levels: 200 g/L azoxystrobin + 80 g/L cyproconazole ... PM_MB_means[grep(&quot;sulphur&quot;, PM_MB_means$fungicide_ai), &quot;fungicide_ai&quot;] &lt;- &quot;sulphur&quot; Let’s explore how many different types of fungicide were used and at what frequency. PM_MB_means %&gt;% group_by(fungicide_ai, trial_ref) %&gt;% summarise() %&gt;% count(sort = TRUE) %&gt;% rename(Trials = n) %&gt;% ggplot(aes(x = reorder(fungicide_ai, Trials), y = Trials)) + xlab(&quot;Fungicide active ingredient&quot;) + ylab(&quot;N Trials&quot;) + geom_col() + scale_fill_usq() + ggtitle(label = &quot;Number of trials in which the\\nspecified fungicide was used&quot;) + scale_colour_usq() + coord_flip() The demethylation inhibitors (DMI), tebuconazole and propiconazole, are used in included in the highest frequencies, along with sulphur. The DMIs have the same fungicide mode of action and are good candidates to be pooled in the meta-analysis. Amistar Xtra and Custodia are both contain strobilurin and triazole mixes, however, because they contain differing dose ratios (inverted) pooling may not be appropriate. Perhaps best way forward is to focus the meta-analysis on only the triazoles/DMIs. This can then be compared to an additional meta-analysis including azoxystrobin as a comparison. Before we exclude non-DMI fungicides lets have a look at the efficacy of the other fungicides in comparison to the DMIs. For this comparison we will focus on the proportional yield saved, relative to the no spray control. The primary focus of this research is the effect of fungicide on mitigating yield loss due to disease. We are using proportional yield, relative to the no spray control, to reduce the effect of location and seasonal influences. First, let’s investigate the difference in the effect of the type of fungicide on proportion of yield saved. PM_MB_means %&gt;% group_by(fungicide_ai, total_fungicide) %&gt;% summarise( n = length(prop_YG), lower_2.5 = quantile(prop_YG, na.rm = T, c(0.025)), median = median(prop_YG, na.rm = T), mean = mean(prop_YG, na.rm = T), upper_97.5 = quantile(prop_YG, na.rm = T, c(0.975)) ) %&gt;% filter(n &gt;= 5) %&gt;% # remove any fungicide groups with less than 5 observations arrange(desc(median)) %&gt;% kable(caption = &quot;Fungicide effect on proportion of yield gain.&quot;, col.names = c(&quot;Fungicide active ingredient&quot;, &quot;Total fungicide applications&quot;,&quot;*n* Treatments&quot;,&quot;Lower 2.5% quartile&quot;,&quot;Median proportional grain yield&quot;, &quot;Mean proportional grain yield&quot;,&quot;97.5 % quartile&quot;)) %&gt;% kable_styling(fixed_thead = T, full_width = T) %&gt;% footnote(general = &quot;Fungicides with less than five observations were omitted from this table&quot;) (#tab:Fungicide_x_nSprays_tble2)Fungicide effect on proportion of yield gain. Fungicide active ingredient Total fungicide applications n Treatments Lower 2.5% quartile Median proportional grain yield Mean proportional grain yield 97.5 % quartile propiconazole 2 27 0.2553184 0.4391669 0.4733431 0.7494674 200 g/L azoxystrobin + 80 g/L cyproconazole 2 12 -0.0406504 0.4300923 0.3200283 0.5680759 200 g/L azoxystrobin + 80 g/L cyproconazole 1 18 0.0106707 0.3257382 0.3115725 0.6589547 propiconazole 1 26 0.1703930 0.3062782 0.2963312 0.4053595 sulphur 2 34 0.1563882 0.2588933 0.3146122 0.6305019 carbendazim 2 5 0.1620553 0.1620553 0.1620553 0.1620553 tebuconazole 1 36 0.0820065 0.1239358 0.1950038 0.4288166 tebuconazole 2 36 -0.0228261 0.0440994 0.1347859 0.4398634 sulphur 1 30 -0.1325323 0.0148148 0.0337396 0.1700486 carbendazim 1 10 -0.0891679 -0.0114778 0.0004782 0.1002869 sulphur 3 7 -0.1026901 -0.0774749 -0.0435198 0.0445122 200 g/L tebuconazole + 120 g/L azoxystrobin 1 18 NA NA NaN NA 200 g/L tebuconazole + 120 g/L azoxystrobin 2 18 NA NA NaN NA control 0 46 NA NA NaN NA control NA 6 NA NA NaN NA tebuconazole 3 5 NA NA NaN NA Note: Fungicides with less than five observations were omitted from this table Let’s visualise this in a plot for one and two sprays only. PM_MB_means %&gt;% mutate(fungicide_ai = as.factor(PM_MB_means$fungicide_ai)) %&gt;% filter(total_fungicide == 1 | total_fungicide == 2) %&gt;% filter( fungicide_ai != &quot;pyrazophos&quot; &amp; fungicide_ai != &quot;control&quot; &amp; fungicide_ai != &quot;benomyl&quot; &amp; fungicide_ai != &quot;Acibenzolar-S-methyl&quot; ) %&gt;% mutate(fungicide_ai = factor( fungicide_ai, levels = c( &quot;carbendazim&quot;, &quot;pyraclostrobin&quot;, &quot;sulphur&quot;, &quot;200 g/L azoxystrobin +\\n80 g/L cyproconazole&quot;, &quot;tebuconazole&quot;, &quot;propiconazole&quot;, &quot;200 g/L tebuconazole +\\n120 g/L azoxystrobin&quot; ) )) %&gt;% ggplot(aes(y = prop_YG, x = fungicide_ai)) + facet_grid(rows = vars(total_fungicide)) + geom_boxplot(aes(fill = fungicide_ai)) + geom_hline(aes(yintercept = 0), size = 0.5) + labs(y = &quot;Proportion of grain yield saved&quot;, title = &quot;Grain yield proportion saved\\ngrouped by fungicide type&quot;) + theme(legend.position = &quot;none&quot;) + scale_fill_usq() + coord_flip() ## Warning: Removed 228 rows containing non-finite values (stat_boxplot). There is a small yield effect when applying fungicide and it is unclear how much a second spray improves yield saved. Interestingly sulphur sprays might be worth investigating when sprayed twice. 3.1.1.2 Fungicide Doses We should check that all fungicide doses that were used were roughly the same if we are to compare between trials where dose might be different. PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% select( trial_ref, year, location, first_sign_disease, fungicide_ai, dose_ai.ha, total_fungicide ) %&gt;% ggplot(aes(x = as.factor(dose_ai.ha), fill = fungicide_ai)) + xlab(&quot;Dose (g ai/ha)&quot;) + ggtitle(label = &quot;Total number of treatments for each respective tebuconazole dose&quot;) + geom_bar() + scale_fill_usq() + scale_colour_usq() All trials that used tebuconazole used approximately the same dose. Dose of the active ingredient ranged from 62.35 g per hectare to 60 g per hectare. There is a large amount of variation in the propiconazole dose, let’s inspect the difference in yields for each dose. PM_MB_means %&gt;% filter(fungicide_ai == &quot;propiconazole&quot;) %&gt;% ggplot(aes(x = relevel(as.factor(dose_ai.ha), &quot;62.5&quot;), y = prop_YG)) + xlab(&quot;Dose (g ai/ha)&quot;) + ggtitle(label = &quot;Yield for each respective propiconazole dose&quot;) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) ## Warning: Removed 48 rows containing non-finite values (stat_boxplot). This dose effect should be acknowledged in the meta-analysis. How many treatments of each dose have been investigated per trial? table(as.character(PM_MB_means[PM_MB_means$fungicide_ai == &quot;propiconazole&quot;, ]$trial_ref), PM_MB_means[PM_MB_means$fungicide_ai == &quot;propiconazole&quot;, ]$dose_ai.ha) ## ## 62.5 125 ## AM1303 3 0 ## AM1304 3 0 ## AM1305 3 0 ## BB1305 3 0 ## mung1112/01 2 2 ## mung1112/02 2 2 ## mung1617/01 0 15 ## mung1617/02 0 15 ## mung1718/01 0 6 Two trials show both doses were applied in the same trial, mung1112/01 and mung1112/02. Let look at the difference in proportion of yield saved in these trials. boxplot_usq(prop_YG ~ dose_ai.ha, data = PM_MB_means[(PM_MB_means$trial_ref == &quot;mung1112/01&quot; | PM_MB_means$trial_ref == &quot;mung1112/02&quot;) &amp; PM_MB_means$fungicide_ai == &quot;propiconazole&quot;,]) This plot, however, indicates that the previous plot might be skewed by high yielding trials. 3.1.1.3 Number of fungicide sprays Let’s look at the frequency of sprays per fungicide. table(PM_MB_means$fungicide_ai, PM_MB_means$total_fungicide) ## ## 0 1 2 3 7 ## 200 g/L azoxystrobin + 80 g/L cyproconazole 0 18 12 4 0 ## 200 g/L tebuconazole + 120 g/L azoxystrobin 0 18 18 0 0 ## Acibenzolar-S-methyl 0 0 1 0 0 ## benomyl 0 0 1 0 0 ## carbendazim 0 10 5 0 0 ## control 46 0 0 0 0 ## propiconazole 0 26 27 3 0 ## pyraclostrobin 0 4 4 0 0 ## pyrazophos 0 0 1 0 0 ## sulphur 0 30 34 7 3 ## sulphur (SC) 0 0 0 0 0 ## sulphur (Ultra SC) 0 0 0 0 0 ## sulphur (WP) 0 0 0 0 0 ## tebuconazole 0 36 36 5 0 3.1.1.4 Timing of fungicide sprays When are fungicides sprayed in relation to first sign. PM_MB_means %&gt;% mutate( s1_DfromFS = fungicide_application_1 - first_sign_disease, s2_DfromFS = fungicide_application_2 - first_sign_disease, s3_DfromFS = fungicide_application_3 - first_sign_disease, s4_DfromFS = fungicide_application_4 - first_sign_disease, s5_DfromFS = fungicide_application_5 - first_sign_disease ) %&gt;% gather( key = spray, value = n_days, s1_DfromFS, s2_DfromFS, s3_DfromFS, s4_DfromFS, s5_DfromFS ) %&gt;% drop_na(n_days) %&gt;% ggplot(aes(x = spray, y = as.numeric(n_days))) + geom_violin() + scale_x_discrete( labels = c( &quot;First\\nspray&quot;, &quot;Second\\nspray&quot;, &quot;Third\\nspray&quot;, &quot;Fourth\\nspray&quot;, &quot;Fifth\\nspray&quot; ) ) + ylab(&quot;Days to First Sign of Disease&quot;) 3.1.2 Mungbean cultivars In general, the mungbean varieties have the following resistance to powdery mildew. Berken: Highly susceptible Crystal: Susceptible Jade: Moderately susceptible Let’s view a stacked bar plot of the number of sprays for both demethylation inhibitors, tebuconazole and propiconazole against each cultivar. PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(host_genotype, fungicide_ai, trial_ref) %&gt;% summarise() %&gt;% count() %&gt;% rename(Treatments = n) %&gt;% ggplot(aes(x = host_genotype, y = Treatments, fill = fungicide_ai)) + xlab(&quot;Cultivar&quot;) + ylab(&quot;N Trials&quot;) + ggtitle(label = &quot;Cultivars used in either tebuconazole or propiconazole trials&quot;) + geom_col() + scale_fill_usq(name = &quot;Fungicide AI&quot;) 3.1.2.1 Genotype yield variability Does host cultivar significantly impact the yield? Let’s look at the volatility in yields to see if any cultivar yields better or has greater tolerance to powdery mildew. Below we plot distributions of mean trial yields for each cultivar. First let’s look at overall yields for each cultivar, where trial is not a factor, for all treatments (spray and no spray). # this could be converted into a shiny app as a chunk. Make each input for the function a shiny option # Outputs the table and graph source(&quot;R/yield_volatility.r&quot;) #function to investigate the volatility in yields # Volitility is the range between the upper and lower 97.5 and 2.5 % quartiles YV1 &lt;- yield_volatility(genotype_by_trial = FALSE, control_only = FALSE) YV1[[2]] + scale_fill_usq() ## Warning: Removed 12555 rows containing non-finite values (stat_density). YV1[[3]] ## # A tibble: 4 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 Berken 1.30 ## 2 Crystal 1.40 ## 3 G. Diam 0.481 ## 4 Jade 2.35 Now let’s look at overall yields for each cultivar, where trial is not a factor, in only the no spray treatments. YV2 &lt;- yield_volatility(genotype_by_trial = FALSE, control_only = TRUE) YV2[[2]] + scale_fill_usq() ## Warning: Removed 1337 rows containing non-finite values (stat_density). YV2[[3]] ## # A tibble: 4 x 2 ## trial volatility ## &lt;chr&gt; &lt;dbl&gt; ## 1 Berken 1.25 ## 2 Crystal 1.23 ## 3 G. Diam 0.295 ## 4 Jade 2.19 Volatility of the cultivars are fairly similar when trial is not considered as a factor (when we inspect plots of all treatments and only spray treatments). Green Diamond shows little volatility however this cultivar is only featured in 1 trials Let’s examine the same plots as above but only for the most commonly used trial site, Hermitage. YV1_herm &lt;- yield_volatility( genotype_by_trial = FALSE, control_only = FALSE, location = &quot;Hermitage&quot; ) YV1_herm[[2]] + scale_fill_usq() ## Warning: Removed 8047 rows containing non-finite values (stat_density). Jade shows a large amount of volatility, excluding Green Diamond, Crystal shows the next least volatility. Let’s take a closer look at Crystal with spray management treatments and without. YV1_crystal &lt;- yield_volatility(genotype = &quot;Crystal&quot;, control_only = FALSE) YV1_crystal[[2]] + scale_fill_usq() ## Warning: Removed 66 rows containing non-finite values (stat_density). YV1_crystal &lt;- yield_volatility(genotype = &quot;Crystal&quot;, control_only = TRUE) YV1_crystal[[2]] + scale_fill_usq() ## Warning: Removed 1 rows containing non-finite values (stat_density). There is a lot of variation between field trials for Crystal, but little variation within field trials. Let’s look at Jade, to see if it differs. YV2_crystal &lt;- yield_volatility(&quot;Jade&quot;,control_only = FALSE) YV2_crystal[[2]] + scale_fill_usq() ## Warning: Removed 12487 rows containing non-finite values (stat_density). For Jade there is high variation between trials and with-in. Perhaps indicating lower tolerance. Let’s look at the same plot with data only from no spray controls to see if the variation is the same. YV3_crystal &lt;- yield_volatility(&quot;Jade&quot;, control_only = TRUE) YV3_crystal[[2]] + scale_fill_usq() ## Warning: Removed 1328 rows containing non-finite values (stat_density). There seems to be a noticeable shift in the probability curves between the two plots. Indicating that the tolerance in Jade may not as good as Crystal. A comparison between the fungicide efficacy for reducing powdery mildew severity and fungicide efficacy at mitigating yield loss. Overall there seems to be an influence of cultivar however this variation is not as distinct as the variation between trials. 3.1.3 Row spacing Some experiments were designed to investigate the effect of row spacing and plant density on powdery mildew disease. The results showed that the row spacing had no statistically significant effect on powdery mildew, but narrower rows in most cases increased yield significantly. This finding has also been shown by Kerry McKenzie’s work as well. Eight trials used a row spacing of 0.75 meters and tebuconazole as an active ingredient (AI). PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(fungicide_ai, row_spacing, trial_ref) %&gt;% summarise() %&gt;% count() %&gt;% rename(Trials = n) %&gt;% ggplot(aes(x = as.factor(row_spacing), y = Trials)) + xlab(&quot;Row Spacing (m)&quot;) + ylab(&quot;N Trials&quot;) + ggtitle(label = &quot;Trial row spacing using tebuconazole&quot;) + geom_col(aes(fill = fungicide_ai), position = &quot;dodge&quot;) + scale_fill_usq(name = &quot;Fungicide AI&quot;) PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot;, row_spacing == 0.75) %&gt;% glimpse() ## Rows: 35 ## Columns: 49 ## $ trial_ref &lt;fct&gt; mung1011/01, mung1011/01, mung1011/02, mung... ## $ year &lt;fct&gt; 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2... ## $ location &lt;fct&gt; Hermitage, Hermitage, Kingaroy, Kingaroy, K... ## $ host_genotype &lt;fct&gt; Berken, Crystal, Berken, Crystal, Berken, C... ## $ trial_design &lt;chr&gt; &quot;RCB&quot;, &quot;RCB&quot;, &quot;RCB&quot;, &quot;RCB&quot;, &quot;RCB&quot;, &quot;RCB&quot;, &quot;... ## $ plot_length.m. &lt;dbl&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12,... ## $ plot_width.m. &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4... ## $ plant_density &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,... ## $ row_spacing &lt;dbl&gt; 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0... ## $ replicates &lt;dbl&gt; 3, 3, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5... ## $ planting_date &lt;date&gt; 2011-01-24, 2011-01-24, 2011-02-02, 2011-0... ## $ emergence_date &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... ## $ flowering_date &lt;date&gt; 2011-03-22, 2011-03-22, NA, NA, NA, NA, NA... ## $ pod_fill_date &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... ## $ mid_late_pod_fill &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... ## $ first_sign_disease &lt;date&gt; 2011-03-28, 2011-03-28, 2011-03-22, 2011-0... ## $ trade_name &lt;fct&gt; Folicur, Folicur, Folicur, Folicur, Folicur... ## $ fungicide_ai &lt;fct&gt; tebuconazole, tebuconazole, tebuconazole, t... ## $ dose_ai.ha &lt;dbl&gt; 62.35, 62.35, 62.35, 62.35, 62.35, 62.35, 6... ## $ n_treatment &lt;int&gt; 11, 4, 14, 4, 17, 7, 20, 10, 2, 3, 2, 3, 2,... ## $ fungicide_application_1 &lt;date&gt; 2011-03-28, 2011-03-28, 2011-03-23, 2011-0... ## $ fungicide_application_2 &lt;date&gt; NA, NA, NA, NA, 2011-04-13, 2011-04-13, 20... ## $ fungicide_application_3 &lt;date&gt; NA, NA, NA, NA, NA, NA, 2011-04-12, 2011-0... ## $ fungicide_application_4 &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... ## $ fungicide_application_5 &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... ## $ fungicide_application_6 &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... ## $ fungicide_application_7 &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... ## $ total_fungicide &lt;int&gt; 1, 1, 1, 1, 2, 2, 3, 3, 1, 2, 1, 2, 3, 1, 2... ## $ harvest_date &lt;date&gt; 2011-04-25, 2011-04-25, NA, NA, NA, NA, NA... ## $ final_assessment &lt;date&gt; 2011-04-11, 2011-04-11, 2011-05-11, 2011-0... ## $ PM_final_severity &lt;dbl&gt; 2.000000, 2.333333, 5.333333, 4.333333, 3.3... ## $ rating_scale &lt;chr&gt; &quot;1-9&quot;, &quot;1-9&quot;, &quot;1-9&quot;, &quot;1-9&quot;, &quot;1-9&quot;, &quot;1-9&quot;, &quot;... ## $ disease_error &lt;dbl&gt; 0.0000000, 0.5773503, 1.1547005, 0.5773503,... ## $ D_error_type &lt;chr&gt; &quot;stdev&quot;, &quot;stdev&quot;, &quot;stdev&quot;, &quot;stdev&quot;, &quot;stdev&quot;... ## $ grain_yield.t.ha. &lt;dbl&gt; 1.769312, 1.543895, 1.058570, 0.730195, 0.9... ## $ raw_graded &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,... ## $ Y_Msquare &lt;dbl&gt; 0.12381667, 0.12381667, 0.05400643, 0.05400... ## $ yield_error &lt;dbl&gt; 0.19441956, 0.12832602, 0.08244381, 0.18686... ## $ Y_error_type &lt;chr&gt; &quot;stdev&quot;, &quot;stdev&quot;, &quot;stdev&quot;, &quot;stdev&quot;, &quot;stdev&quot;... ## $ yield_gain &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 0.072, 0.21... ## $ prop_YG &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 0.09756098,... ## $ raw_data_avail &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;... ## $ comments &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, &quot;final asse... ## $ days_harvest.planting &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, -40959, -40... ## $ AUDPC_m &lt;dbl&gt; 10.50000, 14.00000, 98.66667, 46.83333, 60.... ## $ AUDPC_sd &lt;dbl&gt; 0.000000, 6.062178, 9.358597, 18.236867, 6.... ## $ AUDPS_m &lt;dbl&gt; 21.00000, 28.00000, 144.66667, 81.66667, 84... ## $ AUDPS_sd &lt;dbl&gt; 0.000000, 12.124356, 14.571662, 17.616280, ... ## $ Inc_Ms &lt;dbl&gt; 1568.000, 1568.000, 15945.177, 15945.177, 1... Let’s plot the row spacing treatments for the response variables yield and disease severity. The main questions are: Were there any statistical differences for mungbean yield or powdery mildew severity between row spacing treatments? Can we pool certain row spacing that have no significant difference? # Which row spacing leads to the higher disease severity PM_MB_means %&gt;% filter(year == 2017 | year == 2018) %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% ggplot(aes(y = PM_final_severity, x = factor(row_spacing))) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) + ggtitle(&quot;Powdery mildew variation between different row spacing&quot;) # Which row spacing leads to the higher disease severity PM_MB_means %&gt;% filter(year == 2017 | year == 2018) %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% ggplot(aes(y = PM_final_severity, x = factor(row_spacing))) + geom_boxplot(fill = usq_cols(&quot;usq charcoal&quot;), alpha = 0.5) + facet_grid(cols = vars(location)) + ggtitle(&quot;Powdery mildew variation between different row spacing&quot;) + ylab(&quot;Final severity rating&quot;) + xlab(&quot;Row spacing (m)&quot;) In the Wellcamp site, wider row spacing reduces PM severity, the other sites it seems there was not enough variation to make a distinction between row spacing treatments. # Which row spacing leads to the higher yield potential PM_MB_means %&gt;% filter(year == 2017 | year == 2018) %&gt;% ggplot(aes( y = as.numeric(grain_yield.t.ha.), x = row_spacing, colour = location )) + geom_jitter(width = 0.01) + ggtitle(&quot;Grain yield results for different row spacing at three locations&quot;) + xlab(&quot;Row spacing (m)&quot;) + ylab(&quot;Grain yield (t/ha)&quot;) + scale_colour_usq() The plots seem to imply when yield is limited, presumably by other abiotic factors, there is no effect of row spacing on yield, like in the Hermitage trial. However, if the average yield is more than approximately 1 t/ha then smaller row spacing has the potential to provide greater yield per hectare. Overall row spacing may influence both powdery mildew severity and yield. 3.1.4 Yield vs in-season rain In crop rain could be a significant factor which contributes to the end of season grain yield. To investigate this effect I will use a linear model (GY ~ SR) where seasonal rainfall represents a specific time frame with respect to planting time. Multiple time frames were tested from 20 days prior to planting, to 100 days after planting. The multiple time frames were tested by a loop over the dates at the start of the season (to 90 days after planting) to find which date fits the best linear model for grain weight and in-crop rainfall. The code for this process was moved to be contained within it’s own script and can be run as a job as it can take a long time. To speed up the computation I split the script into four, ran the jobs and bound the data into one frame. The output of the script is saved with the prefix lmInSeasonRainfall followed by the time windows the model is run. For example lmInSeasonRainfall_20.40_50.80.csv holds the model results for start days between 20 and 40 days after planting to end window dates between 50 and 80 days after planting. # The four data files were created from four scripts run as four jobs in Rstudio # when the four jobs are finished they can be imported and combined into one data.frame # source(Rainfall_x_cropYield_s-10.09_e30.65.R) # source(Rainfall_x_cropYield_s-10.09_e65.100.R) # source(Rainfall_x_cropYield_s10.30_e30.65.R) # source(Rainfall_x_cropYield_s10.30_e65.10.R) lm_rain1 &lt;- read.csv(&quot;cache/lmInSeasonRainfall_-10.09_30.64.csv&quot;, stringsAsFactors = FALSE) lm_rain2 &lt;- read.csv(&quot;cache/lmInSeasonRainfall_-10.09_65.100.csv&quot;, stringsAsFactors = FALSE) lm_rain3 &lt;- read.csv(&quot;cache/lmInSeasonRainfall_10.30_30.64.csv&quot;, stringsAsFactors = FALSE) lm_rain4 &lt;- read.csv(&quot;cache/lmInSeasonRainfall_10.30_65.100.csv&quot;, stringsAsFactors = FALSE) lm_rain &lt;- rbind(lm_rain1, lm_rain2, lm_rain3, lm_rain4) Now we have read in the data from the previously computed models let’s find the linear model which has: - The lowest P value - the highest adjusted r squared value lm_rain[which(lm_rain$lm_pval == min(lm_rain$lm_pval)), ] ## start_day end_day lm_pval lm_rsquared lm_adj_rsquared ## 2202 14 67 0.000523266 0.6800095 0.6509195 lm_rain[which(lm_rain$lm_rsquared == max(lm_rain$lm_rsquared)), ] ## start_day end_day lm_pval lm_rsquared lm_adj_rsquared ## 2202 14 67 0.000523266 0.6800095 0.6509195 lm_rain[which(lm_rain$lm_adj_rsquared == max(lm_rain$lm_adj_rsquared)), ] ## start_day end_day lm_pval lm_rsquared lm_adj_rsquared ## 2202 14 67 0.000523266 0.6800095 0.6509195 To visualise the model fits we will use a heat map to describe how the models faired in relation to the rainfall windows. log of the p value was used to improve the resolution of small very small p values. ggplot(lm_rain, aes(x = start_day, y = end_day, z = log(lm_pval))) + geom_raster(aes(fill = log(lm_pval)), interpolate = TRUE) + geom_contour(bins = 15, colour = &quot;white&quot;) + geom_point(data = lm_rain[which(lm_rain$lm_pval == min(lm_rain$lm_pval)), ], aes(x = start_day, y = end_day), colour = &quot; red&quot;) + scale_fill_distiller(palette = &quot;RdBu&quot;, direction = -1) ggplot(lm_rain, aes(x = start_day, y = end_day, z = lm_rsquared)) + geom_raster(aes(fill = lm_rsquared), interpolate = TRUE) + geom_contour(bins = 15, colour = &quot;white&quot;) + geom_point(data = lm_rain[which(lm_rain$lm_rsquared == max(lm_rain$lm_rsquared)), ], aes(x = start_day, y = end_day), colour = &quot; red&quot;) + scale_fill_distiller(palette = &quot;RdBu&quot;) ggplot(lm_rain, aes(x = start_day, y = end_day, z = lm_adj_rsquared)) + geom_raster(aes(fill = lm_adj_rsquared), interpolate = TRUE) + geom_contour(bins = 15, colour = &quot;white&quot;) + geom_point(data = lm_rain[which(lm_rain$lm_rsquared == max(lm_rain$lm_rsquared)), ], aes(x = start_day, y = end_day), colour = &quot; red&quot;) + scale_fill_distiller(palette = &quot;RdBu&quot;) The approximate period when in-crop rainfall impacts the most on the mean harvest is between 14 - 67 days after planting. 3.1.5 Season range and first incidence Mungbean is a summer crop and powdery mildew requires cool conditions to establish. Therefore the disease can be avoided by planting early in summer or spring, avoiding cooler temperatures at the end of some seasons. Can we visualise when PM is most likely to establish over the calendar year? I’ll build a plot of horizontal lines indicating the season length and use a dot on the line to indicating the day of the year first sign was observed for that trial. # Create the data frame for the plot source(&quot;R/import_data.R&quot;) PM_MB_means &lt;- import_data() season_dates &lt;- PM_MB_means %&gt;% group_by(trial_ref) %&gt;% summarise( Planting_date = unique(planting_date), Harvest_date = unique(harvest_date), First_sign_PM = unique(first_sign_disease), season_length = as.Date(unique(harvest_date)) - as.Date(unique(planting_date)) ) season_dates$Planting_day &lt;- yday(season_dates$Planting_date) season_dates$Disease_day &lt;- yday(season_dates$First_sign_PM) season_dates[1:2, &quot;Planting_day&quot;] &lt;- 1 # yday(as.Date(&quot;2012-02-28&quot;) - 7) # Correct dplanted in december and emerged in February, Assuming due to lack of rain or recording error. Using 7 days prior to emergence day as planting day season_dates$Harvest_day &lt;- season_dates$Planting_day + season_dates$season_length first_day_month &lt;- c(0, 31, 59, 90, 120, 151, 181, 211, 243, 273) + 1 axis_labels_date &lt;- c( format(Sys.Date() - yday(Sys.Date()) + first_day_month[1], &quot;%b-%d&quot;), # Jan format(Sys.Date() - yday(Sys.Date()) + first_day_month[2], &quot;%b-%d&quot;), # Feb format(Sys.Date() - yday(Sys.Date()) + first_day_month[3], &quot;%b-%d&quot;), # March format(Sys.Date() - yday(Sys.Date()) + first_day_month[4], &quot;%b-%d&quot;), # April format(Sys.Date() - yday(Sys.Date()) + first_day_month[5], &quot;%b-%d&quot;), # May format(Sys.Date() - yday(Sys.Date()) + first_day_month[6], &quot;%b-%d&quot;), # June format(Sys.Date() - yday(Sys.Date()) + first_day_month[7], &quot;%b-%d&quot;), # July format(Sys.Date() - yday(Sys.Date()) + first_day_month[8], &quot;%b-%d&quot;), # August format(Sys.Date() - yday(Sys.Date()) + first_day_month[9], &quot;%b-%d&quot;), # Sept format(Sys.Date() - yday(Sys.Date()) + first_day_month[10], &quot;%b-%d&quot;) # October ) # reorder the factors so they will appear in chronilogical order # I used First sign because all trials have recorded this season_dates$trial_ref &lt;- factor(season_dates$trial_ref, levels = levels(season_dates$trial_ref)[rev(order(season_dates$First_sign_PM))]) # Plot season_dates %&gt;% ggplot() + geom_pointrange(aes( x = trial_ref, y = Disease_day, ymin = Planting_day, ymax = Harvest_day )) + scale_y_continuous(limits = c( 0, max( season_dates$Planting_day + season_dates$season_length, na.rm = TRUE ) ), labels = axis_labels_date, breaks = first_day_month) + geom_point(aes(x = trial_ref, y = Disease_day)) + coord_flip() + ggtitle(&quot;Season length and when powdery mildew was first spotted\\nin each respective trial&quot;) ## Warning: Removed 4 rows containing missing values (geom_segment). warnings() In most years, regardless of the age of the crop, PM establishes in March. 3.1.5.1 Effect of Fungicide Fungicide effect on proportional yield gain with respect to time of application First let’s look at the quantiles for each fungicide irrespective of other factors. We will focus on proportional yield gain, compared to no treatment control, as this should partially correct for some spatial and seasonal effects. # plot table as a box plot PM_MB_means %&gt;% filter( fungicide_ai == c( &quot;200 g/L tebuconazole +\\n120 g/L azoxystrobin&quot; , &quot;200 g/L azoxystrobin +\\n80 g/L cyproconazole&quot;, &quot;tebuconazole&quot;, &quot;propiconazole&quot;, &quot;sulphur&quot; ) ) %&gt;% ggplot(aes(y = prop_YG, x = fungicide_ai)) + geom_boxplot(aes(fill = fungicide_ai)) + geom_hline(aes(yintercept = 0), size = 0.5, colour = &quot;red&quot;) + labs(x = &quot;Proportion of grain yield saved&quot;, title = &quot;Grain yield proportion saved,\\ngrouped by fungicide type&quot;) + theme( panel.grid.major = element_line(colour = &quot;grey80&quot;), panel.grid.minor = element_line(colour = &quot;grey50&quot;), panel.background = element_rect(fill = NA) ) + guides(fill = guide_legend(title = &quot;Fungicide&quot;)) + scale_fill_usq() + coord_flip() ## Warning: Removed 29 rows containing non-finite values (stat_boxplot). There was some hope groups of fungicide could be combined, i.e. propiconazole and tebuconazole, however it seems that they have different efficacies. Let us look to see if there is anything skewing the above. We need to also define the relationship between yield loss and disease severity. When exploring this data we should look primarily at the no spray control plots PM_MB_means %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% ggplot(aes(x = PM_final_severity, y = grain_yield.t.ha.)) + geom_point() + geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 3 rows containing non-finite values (stat_smooth). ## Warning: Removed 3 rows containing missing values (geom_point). From the data that we have, it is difficult to determine if there is an association between powdery mildew severity and grain yield. "]
]
