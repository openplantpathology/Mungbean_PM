[
["prepare-data-for-meta-analysis.html", "4 Prepare data for meta-analysis 4.1 Set environment and import data 4.2 Standardising sample variance 4.3 Reduce data set to required variables 4.4 Test dose effect 4.5 Disease pressure factor 4.6 Row spacing", " 4 Prepare data for meta-analysis 4.1 Set environment and import data PM_MB_means &lt;- read.csv(here(&quot;cache/1911_PM_MB_means&amp;Ygains.csv&quot;)) source(here(&quot;R/same.R&quot;)) # matches each element of a vector and does not return NAs 4.2 Standardising sample variance Meta-analyses use variance from the data to calculate the effect sizes. The type of variance needs to be the same across all the data incorporated in the meta-analysis. We are narrowing the meta-analysis to only include treatments using demethylation inhibitors, tebuconazole and propiconazole. Let’s look at what type of statistical error was reported for the trials that used these fungicides. PM_MB_means %&gt;% filter(fungicide_ai == &quot;tebuconazole&quot; | fungicide_ai == &quot;propiconazole&quot;) %&gt;% group_by(trial_ref, location, year , Y_error_type, fungicide_ai) %&gt;% summarise(DMI_treatments = length(Y_error_type)) %&gt;% arrange(Y_error_type) %&gt;% select(!fungicide_ai) %&gt;% kable(caption = &quot;Number of treatments for each trial and the error type reported&quot;, align = &quot;c&quot;) %&gt;% footnote(general = &quot;DMI - demethylation inhibitors (tebuconazole and propiconazole).&quot;) ## `summarise()` regrouping output by &#39;trial_ref&#39;, &#39;location&#39;, &#39;year&#39;, &#39;Y_error_type&#39; (override with `.groups` argument) (#tab:variance_types)Number of treatments for each trial and the error type reported trial_ref location year Y_error_type DMI_treatments mung1112/02 Kingaroy 2012 lsd (P=0.05) 4 mung1112/02 Kingaroy 2012 lsd (P=0.05) 2 AM1303 Premer 2013 stdev 3 AM1304 Marys Mount 2013 stdev 3 AM1305 Goolhi 2013 stdev 3 BB1305 Millmerran 2013 stdev 3 mung1011/01 Hermitage 2011 stdev 2 mung1011/02 Kingaroy 2011 stdev 6 mung1415/01 Hermitage 2015 stdev 5 mung1516/01 Hermitage 2016 stdev 6 mung1516/02 Kingaroy 2016 stdev 6 mung1617/01 Hermitage 2017 stdev 15 mung1617/01 Hermitage 2017 stdev 15 mung1617/02 Missen Flats 2017 stdev 15 mung1617/02 Missen Flats 2017 stdev 15 mung1718/01 Wellcamp 2018 stdev 6 mung1718/01 Wellcamp 2018 stdev 6 mung1819/01 Hermitage 2019 stdev 3 mung1819/02 Hermitage 2019 stdev 3 mung1112/01 Gatton 2012 NA 4 mung1112/01 Gatton 2012 NA 2 mung1516/03 Emerald 2016 NA 6 Note: DMI - demethylation inhibitors (tebuconazole and propiconazole). The experiment summaries report either standard deviation, least square differences or no error term (NA). First we will convert LSD and standard deviation to sample variance. Then we will impute variances for the trials, which did not report any form of variance (NA). 4.2.1 Converting least-squares to sample variance First let’s get a list the of trials that reported LSD. Trials &lt;- PM_MB_means %&gt;% filter(Y_error_type == &quot;lsd (P=0.05)&quot;) %&gt;% select(trial_ref) %&gt;% distinct() Trials ## trial_ref ## 1 mung0001/01 ## 2 mung1112/02 Let’s use this list of trials to subset the data and calculate sampling variances. We will follow the method of converting ‘least square differences’ (LSD) to sampling variance reported by Nugugi et.al (2011). A table of T-critical values was consulted to select the T-crit value in the equation. Our data contained 30 degrees of freedom which equates to a ‘T-crit’ value of 1.697. Calculating sampling variance from mean squared error Paul et al. (2008) Tcrit is the T critical value for which there is significant difference between two groups. This value is the same for both trials “mung1112/01” and “mung1112/02”. Tcrit &lt;- 2.042 # 0.05 and DFw = 30 for (i in Trials$trial_ref) { DFw &lt;- sum(PM_MB_means[PM_MB_means$trial_ref == i, ]$replicates) - length(PM_MB_means[PM_MB_means$trial_ref == i, ]$replicates) # degrees of freedom within groups LSD &lt;- PM_MB_means[PM_MB_means$trial_ref == i, ]$yield_error[1] V_yield &lt;- (PM_MB_means[PM_MB_means$trial_ref == i, ]$replicates[1] * (LSD / Tcrit) ^ 2) / 2 # method - Nugugi et.al (2011) DOI: 10.1094/phyto-08-10-0221 for (j in seq_along(PM_MB_means[PM_MB_means$trial_ref == i,]$replicates)) { if (j == 1) { Sv &lt;- vector(length = length(PM_MB_means[PM_MB_means$trial_ref == i,]$replicates)) } # reset Sv vector if this is the first loop Sv[j] = V_yield / PM_MB_means[PM_MB_means$trial_ref == i,]$replicates[j] } # Replace the values in the dataset PM_MB_means[PM_MB_means$trial_ref == i,]$yield_error &lt;- Sv PM_MB_means[PM_MB_means$trial_ref == i,]$Y_error_type &lt;- &quot;SamplingVariance&quot; } 4.2.2 Converting standard deviation to sample variance Now to estimate the variance from the standard deviation. # subset data by those which describe the Yield error with standard deviation Trials &lt;- PM_MB_means %&gt;% filter(Y_error_type == &quot;stdev&quot;) %&gt;% select(trial_ref) %&gt;% distinct() # calculate the Sampling variance from the standard deviation # standard error of the mean equals the standard deviation divided by the square # root of the number of samples # Sv &lt;- sem^2 &lt;- stdev/sqrt(n) # Sampling variance equals the square of the standard error. # Sv &lt;- (stdev/sqrt(n))^2 # Therefore for (j in seq_along(PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$yield_error)) { if (j == 1) { Sv &lt;- vector(length = length(PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$yield_error)) }# create empty vector at first iteration with length of j Sv[j] = (PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$yield_error[j]) ^ 2 } # and replacing the values in the dataset PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$yield_error &lt;- Sv PM_MB_means[PM_MB_means$trial_ref %in% Trials$trial_ref,]$Y_error_type &lt;- &quot;SamplingVariance&quot; 4.2.3 Check variance of data-set Our data currently uses sample variance to define the yield error. We should expect that when yield increases so does the variance. Let’s quickly plot this to check. # redefine sample variance calculated from mean square PM_MB_means$vi &lt;- PM_MB_means$Y_Msquare / (PM_MB_means$n) PM_MB_means %&gt;% ggplot(aes(x = grain_yield.t.ha., y = vi)) + geom_point() ## Warning: Removed 104 rows containing missing values (geom_point). We see here that the sample variance generally decreases or has no association with the grain yield. This might be due to the unpredictable nature of mungbeans, however going forward we will use mean squares, which defines between trial variation and is the more generic error term. PM_MB_means %&gt;% ggplot(aes(x = grain_yield.t.ha., y = Y_Msquare)) + geom_point() ## Warning: Removed 104 rows containing missing values (geom_point). 4.3 Reduce data set to required variables Let’s tidy up the data set into a data frame of only the variables, which are required for the analysis. First remove the irrelevant columns/variables. Then calculate fungicide application timing variables relative to the first sign of disease. Entries with NA in the grain yield or powdery mildew severity are also removed from the data. source(&quot;R/slimming_PM_dat.R&quot;) # see R script for the code, which reduces the data. slim_PM_dat %&lt;&gt;% mutate(fungicide_timing_1 = fungicide_application_1 - first_sign_disease) %&gt;% mutate(fungicide_timing_2 = fungicide_application_2 - fungicide_application_1) %&gt;% mutate(fungicide_timing_3 = fungicide_application_3 - fungicide_application_2) %&gt;% filter(!is.na(grain_yield.t.ha)) %&gt;% filter(!is.na(PM_final_severity)) 4.3.1 Cluster fungicide applications We are going to define ‘fungicide application timing’ as a categorical variable, relative to the first sign of powdery mildew. These categorical variables are named: Early: First fungicide application was prior to first sign of disease. Recommended: First fungicide application was applied on the day powdery mildew was observed, or within three days of first sign. Late: First fungicide application was four or more days after first sign of disease being observed. Follow up fungicide applications (cluster_2 and cluster_3) were also categorised as either early, recommended or late. slim_PM_dat %&lt;&gt;% mutate( cluster_1 = case_when( fungicide_timing_1 &lt; 0 ~ &quot;Early&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 ~ &quot;Recommended&quot;, TRUE ~ &quot;Late&quot; ) ) %&gt;% mutate( cluster_2 = case_when( is.na(fungicide_timing_2) ~ NA_character_, fungicide_timing_2 &lt; 13 ~ &quot;Early&quot;, fungicide_timing_2 &gt;= 13 &amp; fungicide_timing_2 &lt; 17 ~ &quot;Recommended&quot;, TRUE ~ &quot;Late&quot; ) ) %&gt;% mutate( cluster_3 = case_when( fungicide_timing_3 &lt; 14 ~ &quot;Early&quot;, is.na(fungicide_timing_3) ~ NA_character_, TRUE ~ &quot;Recommended&quot; ) ) Let’s look at these clusters to see where we have the most degrees of freedom. clusters &lt;- unique(slim_PM_dat[c(&quot;cluster_1&quot;, &quot;cluster_2&quot;, &quot;cluster_3&quot;)]) for (i in 1:nrow(clusters)) { if (i == 1) { clusters$n &lt;- NA clusters$n_x_trial &lt;- NA } clusters[i, &quot;n&quot;] &lt;- nrow(slim_PM_dat[same(slim_PM_dat$cluster_1, clusters[i, &quot;cluster_1&quot;]) &amp; same(slim_PM_dat$cluster_2, clusters[i, &quot;cluster_2&quot;]) &amp; same(slim_PM_dat$cluster_3, clusters[i, &quot;cluster_3&quot;]),]) clusters[i, &quot;n_x_trial&quot;] &lt;- length(unique(slim_PM_dat[same(slim_PM_dat$cluster_1, clusters[i, &quot;cluster_1&quot;]) &amp; same(slim_PM_dat$cluster_2, clusters[i, &quot;cluster_2&quot;]) &amp; same(slim_PM_dat$cluster_3, clusters[i, &quot;cluster_3&quot;]), &quot;trial_ref&quot;])) } knitr::kable(clusters) cluster_1 cluster_2 cluster_3 n n_x_trial 1 Late NA NA 57 17 2 Recommended NA NA 32 15 9 Recommended Late NA 12 4 11 Early Late Early 2 1 15 Recommended Recommended NA 30 10 30 Recommended Late Early 1 1 33 Recommended Early NA 1 1 34 Recommended Early Early 1 1 36 Early NA NA 13 3 37 Early Late NA 1 1 38 Early Late Recommended 1 1 42 Recommended Recommended Recommended 1 1 44 Early Recommended Recommended 1 1 48 Late Recommended NA 6 4 59 Late Recommended Recommended 2 2 148 Late Late NA 12 1 From this we can see that there are 16 different cluster combinations, which would make the analysis too difficult. We will reduce this to 6 levels within one variable. Single sprays of either: early, recommended timing, late. Two or more sprays where the first spray was either: early, recommended timing, late. slim_PM_dat &lt;- slim_PM_dat %&gt;% mutate( spray_management = case_when( fungicide_timing_1 &lt; 0 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Early&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Recommended&quot;, fungicide_timing_1 &gt;= 4 &amp; is.na(fungicide_application_2) &amp; is.na(fungicide_application_3) ~ &quot;Late&quot;, fungicide_timing_1 &lt; 0 &amp; !is.na(fungicide_application_2) ~ &quot;Early_plus&quot;, fungicide_timing_1 &gt;= 0 &amp; fungicide_timing_1 &lt; 4 &amp; !is.na(fungicide_application_2) ~ &quot;Recommended_plus&quot;, fungicide_timing_1 &gt;= 4 &amp; !is.na(fungicide_application_2) ~ &quot;Late_plus&quot;, TRUE ~ &quot;Other&quot; ) ) slim_PM_dat[slim_PM_dat$fungicide_ai == &quot;control&quot;, c( &quot;fungicide_timing_1&quot;, &quot;fungicide_timing_2&quot;, &quot;fungicide_timing_3&quot;, &quot;spray_management&quot; )] &lt;- &quot;control&quot; Now to view the number break-down of the spray_management treatments table(slim_PM_dat$spray_management) ## ## control Early Early_plus Late ## 40 13 5 17 ## Late_plus Recommended Recommended_plus ## 20 32 46 There are few ‘Early_plus’ treatments, these treatments therefore will have too few comparisons with other treatments in the meta-analysis to provide accurate results. Therefore we will remove ‘Early_plus’ from the analysis. slimmer_PM_dat &lt;- slim_PM_dat[slim_PM_dat$spray_management != &quot;Early_plus&quot;, ] 4.4 Test dose effect Earlier we noted there were different doses of propiconazole, which might influence our analysis. Let’s check this by comparing a linear mixed effect model including and excluding dose. We already have a factor breaking down the dose in the trial variable. Let’s make a new one without dose. slimmer_PM_dat$trial_noDose &lt;- paste(slimmer_PM_dat$trial_ref, slimmer_PM_dat$year, slimmer_PM_dat$location,slimmer_PM_dat$host_genotype, slimmer_PM_dat$row_spacing,sep = &quot;_&quot;) cbind(Dose = head(slimmer_PM_dat$trial), NoDose = head(slimmer_PM_dat$trial_noDose)) %&gt;% kable() Dose NoDose mung1011/01_2011_Hermitage_Berken_0.75_lowDose mung1011/01_2011_Hermitage_Berken_0.75 mung1011/01_2011_Hermitage_Berken_0.75_lowDose mung1011/01_2011_Hermitage_Berken_0.75 mung1011/01_2011_Hermitage_Crystal_0.75_lowDose mung1011/01_2011_Hermitage_Crystal_0.75 mung1011/01_2011_Hermitage_Crystal_0.75_lowDose mung1011/01_2011_Hermitage_Crystal_0.75 mung1011/02_2011_Kingaroy_Berken_0.75_lowDose mung1011/02_2011_Kingaroy_Berken_0.75 mung1011/02_2011_Kingaroy_Crystal_0.75_lowDose mung1011/02_2011_Kingaroy_Crystal_0.75 Let’s test the dose effect in a basic linear mixed effect model. m1 &lt;- lmer(log(grain_yield.t.ha * 1000) ~ factor(spray_management) + (1 | trial), data = slimmer_PM_dat) m2 &lt;- lmer(log(grain_yield.t.ha * 1000) ~ factor(spray_management) + (1 | trial_noDose), data = slimmer_PM_dat) anova(m1, m2) ## refitting model(s) with ML (instead of REML) ## Data: slimmer_PM_dat ## Models: ## m1: log(grain_yield.t.ha * 1000) ~ factor(spray_management) + (1 | ## m1: trial) ## m2: log(grain_yield.t.ha * 1000) ~ factor(spray_management) + (1 | ## m2: trial_noDose) ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## m1 8 -21.4 3.6 18.7 -37.4 ## m2 8 -60.2 -35.2 38.1 -76.2 38.8 0 &lt;0.0000000000000002 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Using the model without dose produces a lower AIC, however we should accept the data with dose as there is a significant difference between the models and we should accept the more complicated model m1. We will retain dose as a variable inside the trial factor. slimmer_PM_dat &lt;- slimmer_PM_dat[, colnames(slimmer_PM_dat) != &quot;trial_noDose&quot;] #remove second trial column 4.5 Disease pressure factor We may wish to investigate the impact of spray management in mitigating the yield loss through the effect on the disease pressure. We will set a categorical variable to indicate the amount of disease pressure in the trial, which will be evaluated on the control plot. We will create two categories, lowD and highD. We will use the median AUDPC to separate the trials into these two groups. slimmer_PM_dat$D_pres &lt;- NA_character_ Trial_Dpress &lt;- slimmer_PM_dat %&gt;% group_by(trial_ref) %&gt;% filter(fungicide_ai == &quot;control&quot;) %&gt;% summarise(AUDPC_C = mean(AUDPC_m, na.rm = TRUE)) ## `summarise()` ungrouping output (override with `.groups` argument) median_AUDPC &lt;- median(as.vector(Trial_Dpress$AUDPC_C), na.rm = TRUE) median_AUDPC ## [1] 153.6 write.csv(median_AUDPC, here(&quot;cache/median_AUDPC_C.csv&quot;), row.names = FALSE) sort(Trial_Dpress$AUDPC_C) ## [1] 24.50 40.25 41.00 47.12 77.00 78.33 82.60 119.62 153.62 161.00 ## [11] 169.00 172.00 192.08 196.00 198.72 228.37 239.61 for (i in unique(slimmer_PM_dat$trial_ref)) { if (is.na(Trial_Dpress[Trial_Dpress$trial_ref == i, &quot;AUDPC_C&quot;])) { next() } if (Trial_Dpress[Trial_Dpress$trial_ref == i, &quot;AUDPC_C&quot;] &lt; median_AUDPC) { slimmer_PM_dat[slimmer_PM_dat$trial_ref == i, &quot;D_pres&quot;] &lt;- &quot;lowD&quot; } else{ if (Trial_Dpress[Trial_Dpress$trial_ref == i, &quot;AUDPC_C&quot;] &gt;= median_AUDPC) { slimmer_PM_dat[slimmer_PM_dat$trial_ref == i, &quot;D_pres&quot;] &lt;- &quot;highD&quot; } else{ slimmer_PM_dat[slimmer_PM_dat$trial_ref == i, &quot;D_pres&quot;] &lt;- NA_character_ } } } Let’s have a quick look to examine whether trials with high disease pressure sustain a greater yield loss. slimmer_PM_dat %&gt;% ggplot(aes(x = D_pres, y = grain_yield.t.ha))+ geom_boxplot() + xlab(&quot;Disease pressure&quot;) + ylab(&quot;Grain yield (t/ha)&quot;) From this plot we see that in the trials with high disease pressure tended to produce lower yields. There are 0 trials that contained no data for AUDPC and thus produced NA values. 4.6 Row spacing We may want to consider row spacing in the trials. However one of the locations has NA as the row spacing. For now let’s assign the most used row spacing of 0.33 m as an approximation so the model can analyse this as a continuous variable. If we decide to use the row_spacing column as a factor in the final model we will need to remove this approximation. slimmer_PM_dat[is.na(slimmer_PM_dat$row_spacing),] ## trial trial_ref year host_genotype location ## 27 AM1303_2013_Premer_Crystal_NA_lowDose AM1303 2013 Crystal Premer ## 28 AM1303_2013_Premer_Crystal_NA_lowDose AM1303 2013 Crystal Premer ## 29 AM1303_2013_Premer_Crystal_NA_lowDose AM1303 2013 Crystal Premer ## 30 AM1303_2013_Premer_Crystal_NA_lowDose AM1303 2013 Crystal Premer ## row_spacing n planting_date first_sign_disease fungicide_ai ## 27 NA 3 2012-12-28 2013-02-28 control ## 28 NA 3 2012-12-28 2013-02-28 propiconazole ## 29 NA 3 2012-12-28 2013-02-28 propiconazole ## 30 NA 3 2012-12-28 2013-02-28 propiconazole ## fungicide_application_1 fungicide_application_2 fungicide_application_3 ## 27 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 28 2013-02-28 &lt;NA&gt; &lt;NA&gt; ## 29 2013-02-28 2013-03-19 &lt;NA&gt; ## 30 2013-02-28 2013-03-19 2013-03-31 ## total_fungicide dose_ai.ha grain_yield.t.ha yield_error yield_gain ## 27 0 0.0 1.422 0.005073 NA ## 28 1 62.5 1.450 0.054783 0.02859 ## 29 2 62.5 1.345 0.052398 -0.07693 ## 30 3 62.5 1.334 0.021939 -0.08783 ## prop_yield_gain PM_final_severity PM_final_severity_error Y_Msquare Inc_Ms ## 27 NA 8.000 0.0000 0.009815 417.2 ## 28 0.02011 7.833 0.2887 0.009815 417.2 ## 29 -0.05412 2.167 0.2887 0.009815 417.2 ## 30 -0.06178 2.000 0.8660 0.009815 417.2 ## AUDPC_m AUDPC_sd AUDPS_m AUDPS_sd dose fungicide_timing_1 ## 27 24.500 0.000 49.000 0.000 lowDose control days ## 28 23.917 1.010 47.833 2.021 lowDose 0 days ## 29 4.083 1.010 8.167 2.021 lowDose 0 days ## 30 3.500 3.031 7.000 6.062 lowDose 0 days ## fungicide_timing_2 fungicide_timing_3 cluster_1 cluster_2 cluster_3 ## 27 control days control days Late &lt;NA&gt; &lt;NA&gt; ## 28 NA days NA days Recommended &lt;NA&gt; &lt;NA&gt; ## 29 19 days NA days Recommended Late &lt;NA&gt; ## 30 19 days 12 days Recommended Late Early ## spray_management D_pres ## 27 control lowD ## 28 Recommended lowD ## 29 Recommended_plus lowD ## 30 Recommended_plus lowD slimmer_PM_dat[is.na(slimmer_PM_dat$row_spacing),&quot;row_spacing&quot;] &lt;- 0.33 write.csv(slimmer_PM_dat, file = here(&quot;cache/slimmer_PM_clusterdat.csv&quot;), row.names = FALSE) 4.6.1 Mungbeans age and yield saved The time at which powdery mildew infects in the seasons and the age of the plant might affect the AUDPC and the loss in yield. Let’s have a look at the age of each trial when each powdery mildew infected it. We will use the difference between planting_date and first_sign_disease as a proxy for crop maturity. dat1 &lt;- slimmer_PM_dat %&gt;% mutate(days2PM = first_sign_disease - planting_date) %&gt;% arrange(desc(days2PM)) %&gt;% select( trial_ref, year, location, spray_management, days2PM, grain_yield.t.ha, yield_gain, prop_yield_gain, AUDPC_m, D_pres, PM_final_severity ) dat1 ## trial_ref year location spray_management days2PM grain_yield.t.ha ## 1 AM1304 2013 Marys Mount control 82 days 1.0938 ## 2 AM1304 2013 Marys Mount Early 82 days 1.2654 ## 3 mung1819/01 2019 Hermitage Recommended 67 days 0.5432 ## 4 mung1819/01 2019 Hermitage Recommended_plus 67 days 0.5636 ## 5 mung1819/01 2019 Hermitage Late 67 days 0.5713 ## 6 mung1819/01 2019 Hermitage control 67 days 0.5872 ## 7 mung1011/01 2011 Hermitage control 63 days 1.6619 ## 8 mung1011/01 2011 Hermitage Recommended 63 days 1.7693 ## 9 mung1011/01 2011 Hermitage control 63 days 1.3876 ## 10 mung1011/01 2011 Hermitage Recommended 63 days 1.5439 ## 11 AM1303 2013 Premer control 62 days 1.4216 ## 12 AM1303 2013 Premer Recommended 62 days 1.4502 ## 13 AM1303 2013 Premer Recommended_plus 62 days 1.3446 ## 14 AM1303 2013 Premer Recommended_plus 62 days 1.3337 ## 15 AM1305 2013 Goolhi control 61 days 0.6944 ## 16 AM1305 2013 Goolhi Recommended 61 days 0.6528 ## 17 AM1305 2013 Goolhi Recommended_plus 61 days 0.7222 ## 18 AM1305 2013 Goolhi Recommended_plus 61 days 0.6042 ## 19 BB1305 2013 Millmerran control 60 days 0.8021 ## 20 BB1305 2013 Millmerran Recommended 60 days 0.8027 ## 21 BB1305 2013 Millmerran Recommended_plus 60 days 0.7714 ## 22 BB1305 2013 Millmerran Recommended_plus 60 days 0.7439 ## 23 mung1415/01 2015 Hermitage control 56 days 2.0449 ## 24 mung1415/01 2015 Hermitage Recommended 56 days 2.0183 ## 25 mung1415/01 2015 Hermitage Recommended_plus 56 days 2.1524 ## 26 mung1415/01 2015 Hermitage Late 56 days 2.1240 ## 27 mung1415/01 2015 Hermitage Late_plus 56 days 2.1755 ## 28 mung1819/02 2019 Hermitage Recommended 53 days 0.2962 ## 29 mung1819/02 2019 Hermitage Recommended_plus 53 days 0.3117 ## 30 mung1819/02 2019 Hermitage Late 53 days 0.2759 ## 31 mung1819/02 2019 Hermitage control 53 days 0.2894 ## 32 mung1011/02 2011 Kingaroy control 48 days 0.7985 ## 33 mung1011/02 2011 Kingaroy control 48 days 0.7985 ## 34 mung1011/02 2011 Kingaroy Recommended 48 days 1.0586 ## 35 mung1011/02 2011 Kingaroy Recommended 48 days 0.7302 ## 36 mung1011/02 2011 Kingaroy Recommended_plus 48 days 0.9862 ## 37 mung1011/02 2011 Kingaroy Recommended_plus 48 days 0.8754 ## 38 mung1112/01 2012 Gatton control 42 days 0.7380 ## 39 mung1112/01 2012 Gatton Recommended 42 days 0.8100 ## 40 mung1112/01 2012 Gatton Recommended_plus 42 days 0.9480 ## 41 mung1112/01 2012 Gatton Recommended 42 days 0.9100 ## 42 mung1112/01 2012 Gatton Recommended_plus 42 days 0.9250 ## 43 mung1112/01 2012 Gatton Recommended 42 days 0.8600 ## 44 mung1112/01 2012 Gatton Recommended_plus 42 days 0.9440 ## 45 mung1617/02 2017 Missen Flats control 39 days 1.6419 ## 46 mung1617/02 2017 Missen Flats control 39 days 2.0839 ## 47 mung1617/02 2017 Missen Flats control 39 days 1.8249 ## 48 mung1617/02 2017 Missen Flats control 39 days 1.5046 ## 49 mung1617/02 2017 Missen Flats control 39 days 1.4828 ## 50 mung1617/02 2017 Missen Flats control 39 days 1.6085 ## 51 mung1617/02 2017 Missen Flats control 39 days 1.4484 ## 52 mung1617/02 2017 Missen Flats control 39 days 1.2265 ## 53 mung1617/02 2017 Missen Flats control 39 days 1.2279 ## 54 mung1617/02 2017 Missen Flats Early 39 days 1.7914 ## 55 mung1617/02 2017 Missen Flats Early 39 days 1.7243 ## 56 mung1617/02 2017 Missen Flats Early 39 days 1.7330 ## 57 mung1617/02 2017 Missen Flats Early 39 days 1.7173 ## 58 mung1617/02 2017 Missen Flats Early 39 days 1.1302 ## 59 mung1617/02 2017 Missen Flats Early 39 days 1.4435 ## 60 mung1617/02 2017 Missen Flats Recommended 39 days 2.1006 ## 61 mung1617/02 2017 Missen Flats Recommended 39 days 1.9219 ## 62 mung1617/02 2017 Missen Flats Recommended 39 days 1.8592 ## 63 mung1617/02 2017 Missen Flats Recommended 39 days 1.8610 ## 64 mung1617/02 2017 Missen Flats Recommended 39 days 1.4981 ## 65 mung1617/02 2017 Missen Flats Recommended 39 days 1.3891 ## 66 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.1017 ## 67 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.5263 ## 68 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.1795 ## 69 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.0006 ## 70 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.9737 ## 71 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.7988 ## 72 mung1617/02 2017 Missen Flats Late 39 days 2.1434 ## 73 mung1617/02 2017 Missen Flats Late 39 days 1.8778 ## 74 mung1617/02 2017 Missen Flats Late 39 days 1.8279 ## 75 mung1617/02 2017 Missen Flats Late 39 days 1.7806 ## 76 mung1617/02 2017 Missen Flats Late 39 days 1.7564 ## 77 mung1617/02 2017 Missen Flats Late 39 days 1.5337 ## 78 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.3121 ## 79 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.2779 ## 80 mung1617/02 2017 Missen Flats Recommended_plus 39 days 2.1126 ## 81 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.3569 ## 82 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.7922 ## 83 mung1617/02 2017 Missen Flats Recommended_plus 39 days 1.7424 ## 84 mung1617/01 2017 Hermitage control 39 days 0.4047 ## 85 mung1617/01 2017 Hermitage control 39 days 0.5589 ## 86 mung1617/01 2017 Hermitage control 39 days 0.3163 ## 87 mung1617/01 2017 Hermitage control 39 days 0.3191 ## 88 mung1617/01 2017 Hermitage control 39 days 0.6205 ## 89 mung1617/01 2017 Hermitage control 39 days 0.4736 ## 90 mung1617/01 2017 Hermitage control 39 days 0.6152 ## 91 mung1617/01 2017 Hermitage control 39 days 0.5020 ## 92 mung1617/01 2017 Hermitage control 39 days 0.4721 ## 93 mung1617/01 2017 Hermitage Early 39 days 0.3594 ## 94 mung1617/01 2017 Hermitage Early 39 days 0.5928 ## 95 mung1617/01 2017 Hermitage Early 39 days 0.6020 ## 96 mung1617/01 2017 Hermitage Early 39 days 0.5593 ## 97 mung1617/01 2017 Hermitage Early 39 days 0.5031 ## 98 mung1617/01 2017 Hermitage Early 39 days 0.4824 ## 99 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.5060 ## 100 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.3798 ## 101 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.4386 ## 102 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.4444 ## 103 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.5183 ## 104 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.4407 ## 105 mung1617/01 2017 Hermitage Recommended 39 days 0.6467 ## 106 mung1617/01 2017 Hermitage Recommended 39 days 0.6123 ## 107 mung1617/01 2017 Hermitage Recommended 39 days 0.5530 ## 108 mung1617/01 2017 Hermitage Recommended 39 days 0.4574 ## 109 mung1617/01 2017 Hermitage Recommended 39 days 0.4664 ## 110 mung1617/01 2017 Hermitage Recommended 39 days 0.5208 ## 111 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.6590 ## 112 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.5448 ## 113 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.4199 ## 114 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.3415 ## 115 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.5638 ## 116 mung1617/01 2017 Hermitage Recommended_plus 39 days 0.6566 ## 117 mung1617/01 2017 Hermitage Late 39 days 0.3900 ## 118 mung1617/01 2017 Hermitage Late 39 days 0.4781 ## 119 mung1617/01 2017 Hermitage Late 39 days 0.3266 ## 120 mung1617/01 2017 Hermitage Late 39 days 0.5341 ## 121 mung1617/01 2017 Hermitage Late 39 days 0.5008 ## 122 mung1617/01 2017 Hermitage Late 39 days 0.6831 ## 123 mung1112/02 2012 Kingaroy control 38 days 0.7510 ## 124 mung1112/02 2012 Kingaroy Recommended 38 days 1.0900 ## 125 mung1112/02 2012 Kingaroy Recommended_plus 38 days 1.0980 ## 126 mung1112/02 2012 Kingaroy Recommended 38 days 1.0360 ## 127 mung1112/02 2012 Kingaroy Recommended_plus 38 days 1.2010 ## 128 mung1112/02 2012 Kingaroy Recommended 38 days 1.0570 ## 129 mung1112/02 2012 Kingaroy Recommended_plus 38 days 1.3230 ## 130 mung1718/01 2018 Wellcamp Late_plus 36 days 1.5559 ## 131 mung1718/01 2018 Wellcamp Late_plus 36 days 1.5820 ## 132 mung1718/01 2018 Wellcamp control 36 days 0.9007 ## 133 mung1718/01 2018 Wellcamp Late_plus 36 days 1.4725 ## 134 mung1718/01 2018 Wellcamp Late_plus 36 days 1.5675 ## 135 mung1718/01 2018 Wellcamp control 36 days 1.0891 ## 136 mung1718/01 2018 Wellcamp Late_plus 36 days 1.0845 ## 137 mung1718/01 2018 Wellcamp Late_plus 36 days 1.1543 ## 138 mung1718/01 2018 Wellcamp control 36 days 1.0928 ## 139 mung1718/01 2018 Wellcamp Late_plus 36 days 1.5754 ## 140 mung1718/01 2018 Wellcamp Late_plus 36 days 1.6521 ## 141 mung1718/01 2018 Wellcamp control 36 days 1.5731 ## 142 mung1718/01 2018 Wellcamp Late_plus 36 days 1.2170 ## 143 mung1718/01 2018 Wellcamp Late_plus 36 days 1.6903 ## 144 mung1718/01 2018 Wellcamp control 36 days 1.4513 ## 145 mung1718/01 2018 Wellcamp Late_plus 36 days 1.2344 ## 146 mung1718/01 2018 Wellcamp Late_plus 36 days 1.1731 ## 147 mung1718/01 2018 Wellcamp control 36 days 1.0561 ## 148 mung1516/03 2016 Emerald control 34 days 0.8050 ## 149 mung1516/03 2016 Emerald Recommended 34 days 0.8700 ## 150 mung1516/03 2016 Emerald Recommended_plus 34 days 0.8330 ## 151 mung1516/03 2016 Emerald Recommended_plus 34 days 0.8480 ## 152 mung1516/03 2016 Emerald Recommended 34 days 0.9260 ## 153 mung1516/03 2016 Emerald Recommended_plus 34 days 0.8050 ## 154 mung1516/03 2016 Emerald Late_plus 34 days 0.7840 ## 155 mung1516/01 2016 Hermitage control 34 days 1.8029 ## 156 mung1516/01 2016 Hermitage Late 34 days 2.2159 ## 157 mung1516/01 2016 Hermitage Late_plus 34 days 2.3701 ## 158 mung1516/01 2016 Hermitage Late_plus 34 days 2.2930 ## 159 mung1516/01 2016 Hermitage Recommended 34 days 2.1414 ## 160 mung1516/01 2016 Hermitage Recommended_plus 34 days 2.3381 ## 161 mung1516/01 2016 Hermitage Late_plus 34 days 2.3346 ## 162 mung1516/02 2016 Kingaroy control 27 days 0.8107 ## 163 mung1516/02 2016 Kingaroy Late 27 days 1.0309 ## 164 mung1516/02 2016 Kingaroy Late_plus 27 days 1.0339 ## 165 mung1516/02 2016 Kingaroy Late_plus 27 days 0.8728 ## 166 mung1516/02 2016 Kingaroy Recommended 27 days 0.8990 ## 167 mung1516/02 2016 Kingaroy Recommended_plus 27 days 0.9438 ## 168 mung1516/02 2016 Kingaroy Late_plus 27 days 0.9443 ## yield_gain prop_yield_gain AUDPC_m D_pres PM_final_severity ## 1 NA NA 47.125 lowD 3.000 ## 2 0.1716821 0.1569665 30.583 lowD 3.167 ## 3 -0.0440017 -0.0749392 28.000 lowD 5.000 ## 4 -0.0236129 -0.0402150 28.000 lowD 5.000 ## 5 -0.0159016 -0.0270820 42.667 lowD 7.167 ## 6 NA NA 41.000 lowD 7.500 ## 7 NA NA 38.500 lowD 4.667 ## 8 0.2445887 0.1604151 10.500 lowD 2.000 ## 9 NA NA 42.000 lowD 5.000 ## 10 0.0191718 0.0125739 14.000 lowD 2.333 ## 11 NA NA 24.500 lowD 8.000 ## 12 0.0285948 0.0201149 23.917 lowD 7.833 ## 13 -0.0769336 -0.0541188 4.083 lowD 2.167 ## 14 -0.0878268 -0.0617816 3.500 lowD 2.000 ## 15 NA NA 161.000 highD 7.000 ## 16 -0.0416667 -0.0600000 37.375 highD 3.750 ## 17 0.0277778 0.0400000 14.875 highD 2.750 ## 18 -0.0902778 -0.1300000 0.000 highD 1.000 ## 19 NA NA 153.625 highD 8.000 ## 20 0.0006127 0.0007639 66.500 highD 8.000 ## 21 -0.0306373 -0.0381971 49.062 highD 5.625 ## 22 -0.0582108 -0.0725745 11.062 highD 1.625 ## 23 NA NA 82.600 lowD 7.800 ## 24 -0.0266272 -0.0130209 61.800 lowD 6.600 ## 25 0.1074954 0.0525663 55.400 lowD 5.400 ## 26 0.0790062 0.0386348 79.400 lowD 6.600 ## 27 0.1305743 0.0638522 73.700 lowD 6.400 ## 28 0.0067663 0.0233769 49.800 lowD 5.600 ## 29 0.0222400 0.0768373 47.800 lowD 4.600 ## 30 -0.0135837 -0.0469305 83.000 lowD 7.333 ## 31 NA NA 78.333 lowD 7.833 ## 32 NA NA 211.000 highD 8.000 ## 33 NA NA 173.167 highD 7.667 ## 34 0.2601100 0.3257646 96.333 highD 5.333 ## 35 -0.0682650 -0.0854958 50.333 highD 4.333 ## 36 0.1877750 0.2351715 55.333 highD 3.333 ## 37 0.0769600 0.0963855 45.500 highD 4.000 ## 38 NA NA 169.000 highD 7.500 ## 39 0.0720000 0.0975610 85.800 highD 4.300 ## 40 0.2100000 0.2845528 59.800 highD 3.300 ## 41 0.1720000 0.2330623 137.800 highD 6.300 ## 42 0.1870000 0.2533875 59.800 highD 3.300 ## 43 0.1220000 0.1653117 111.800 highD 5.300 ## 44 0.2060000 0.2791328 26.000 highD 2.000 ## 45 NA NA 233.667 highD 9.000 ## 46 NA NA 239.500 highD 9.000 ## 47 NA NA 241.833 highD 9.000 ## 48 NA NA 242.333 highD 9.000 ## 49 NA NA 239.500 highD 9.000 ## 50 NA NA 241.833 highD 9.000 ## 51 NA NA 237.333 highD 9.000 ## 52 NA NA 241.000 highD 8.667 ## 53 NA NA 239.500 highD 9.000 ## 54 -0.0588262 -0.0317939 212.167 highD 8.667 ## 55 -0.1259498 -0.0680725 223.833 highD 9.000 ## 56 0.2010261 0.1312200 230.667 highD 8.667 ## 57 0.1853020 0.1209561 224.167 highD 9.000 ## 58 -0.1707497 -0.1312524 229.000 highD 9.000 ## 59 0.1425934 0.1096091 223.667 highD 9.000 ## 60 0.2503239 0.1352932 159.833 highD 8.000 ## 61 0.0716202 0.0387087 197.167 highD 8.667 ## 62 0.3272415 0.2136072 168.667 highD 8.333 ## 63 0.3290150 0.2147649 198.500 highD 8.333 ## 64 0.1971689 0.1515603 175.167 highD 8.667 ## 65 0.0881311 0.0677449 186.833 highD 8.000 ## 66 0.2514674 0.1359112 174.167 highD 8.000 ## 67 0.6760208 0.3653708 158.333 highD 8.000 ## 68 0.6475035 0.4226586 149.667 highD 7.667 ## 69 0.4686232 0.3058943 191.500 highD 8.000 ## 70 0.6728122 0.5171791 153.167 highD 8.000 ## 71 0.4979126 0.3827368 188.000 highD 8.000 ## 72 0.2931218 0.1584243 199.333 highD 8.000 ## 73 0.0275480 0.0148890 207.333 highD 8.000 ## 74 0.2959211 0.1931628 207.333 highD 8.000 ## 75 0.2486372 0.1622982 218.500 highD 8.000 ## 76 0.4554631 0.3501066 192.833 highD 8.000 ## 77 0.2327435 0.1789059 218.500 highD 8.000 ## 78 0.4619123 0.2496510 201.667 highD 8.000 ## 79 0.4276816 0.2311503 214.333 highD 7.667 ## 80 0.5806158 0.3789976 204.333 highD 8.000 ## 81 -0.1750750 -0.1142804 215.667 highD 8.000 ## 82 0.4912386 0.3776067 202.833 highD 8.000 ## 83 0.4415085 0.3393800 207.500 highD 8.000 ## 84 NA NA 246.500 highD 8.000 ## 85 NA NA 222.667 highD 8.000 ## 86 NA NA 212.000 highD 8.000 ## 87 NA NA 235.500 highD 8.000 ## 88 NA NA 226.833 highD 8.000 ## 89 NA NA 212.333 highD 8.000 ## 90 NA NA 235.167 highD 8.000 ## 91 NA NA 222.833 highD 8.000 ## 92 NA NA 241.500 highD 8.000 ## 93 -0.0868802 -0.1946615 140.000 highD 8.000 ## 94 0.0322860 0.0576048 123.833 highD 7.667 ## 95 0.1812860 0.4309271 125.500 highD 8.000 ## 96 0.1129455 0.2530627 124.667 highD 8.000 ## 97 -0.0573711 -0.1023616 159.167 highD 8.000 ## 98 0.0617076 0.1466823 137.667 highD 7.667 ## 99 0.0596804 0.1337184 98.000 highD 7.000 ## 100 -0.1807224 -0.3224450 77.167 highD 7.000 ## 101 0.0179611 0.0426945 106.333 highD 7.000 ## 102 -0.0019451 -0.0043581 117.667 highD 7.000 ## 103 -0.0421730 -0.0752451 114.333 highD 7.000 ## 104 0.0200330 0.0476195 125.167 highD 7.000 ## 105 0.2003826 0.4489720 140.833 highD 8.000 ## 106 0.0518660 0.0925393 155.667 highD 8.000 ## 107 0.1323394 0.3145782 152.000 highD 7.667 ## 108 0.0111221 0.0249199 188.833 highD 8.000 ## 109 -0.0940530 -0.1678094 177.167 highD 8.000 ## 110 0.1001438 0.2380475 144.667 highD 8.000 ## 111 0.2127255 0.4766273 120.667 highD 7.000 ## 112 -0.0156564 -0.0279342 99.500 highD 5.333 ## 113 -0.0008316 -0.0019767 113.000 highD 7.000 ## 114 -0.1047887 -0.2347868 173.000 highD 7.000 ## 115 0.0033556 0.0059871 140.500 highD 7.000 ## 116 0.2359362 0.5608336 151.833 highD 7.000 ## 117 -0.0563528 -0.1262625 144.833 highD 7.000 ## 118 -0.0823390 -0.1469093 155.333 highD 7.000 ## 119 -0.0940946 -0.2236680 177.667 highD 7.000 ## 120 0.0877364 0.1965798 175.333 highD 7.333 ## 121 -0.0596928 -0.1065039 182.667 highD 7.667 ## 122 0.2624596 0.6238813 206.167 highD 8.000 ## 123 NA NA 196.000 highD 8.000 ## 124 0.3390000 0.4513981 196.000 highD 8.000 ## 125 0.3470000 0.4620506 92.400 highD 4.300 ## 126 0.2850000 0.3794940 187.600 highD 7.700 ## 127 0.4500000 0.5992011 103.600 highD 4.700 ## 128 0.3060000 0.4074567 176.400 highD 7.300 ## 129 0.5720000 0.7616511 19.600 highD 1.700 ## 130 0.3190304 0.2579239 172.500 highD 7.667 ## 131 0.3451043 0.2790036 156.333 highD 6.333 ## 132 NA NA 178.833 highD 8.333 ## 133 0.2023365 0.1592966 166.167 highD 7.000 ## 134 0.2973506 0.2340999 147.667 highD 6.000 ## 135 NA NA 200.167 highD 8.000 ## 136 0.0100724 0.0093745 175.667 highD 7.333 ## 137 0.0798006 0.0742711 158.000 highD 6.000 ## 138 NA NA 193.667 highD 7.333 ## 139 0.3384810 0.2736490 171.500 highD 7.000 ## 140 0.4151966 0.3356706 155.333 highD 6.000 ## 141 NA NA 194.333 highD 9.000 ## 142 -0.0532369 -0.0419126 189.500 highD 7.333 ## 143 0.4201107 0.3307471 161.500 highD 7.000 ## 144 NA NA 220.333 highD 8.667 ## 145 0.1599073 0.1488271 170.333 highD 6.667 ## 146 0.0986429 0.0918078 150.667 highD 5.667 ## 147 NA NA 205.000 highD 8.000 ## 148 NA NA 77.000 lowD 4.500 ## 149 0.0650000 0.0807453 55.000 lowD 3.500 ## 150 0.0280000 0.0347826 33.000 lowD 2.500 ## 151 0.0430000 0.0534161 39.600 lowD 2.800 ## 152 0.1210000 0.1503106 50.600 lowD 3.300 ## 153 0.0000000 0.0000000 39.600 lowD 2.800 ## 154 -0.0210000 -0.0260870 77.000 lowD 4.500 ## 155 NA NA 119.625 lowD 8.000 ## 156 0.4130228 0.2290878 71.750 lowD 6.250 ## 157 0.5671527 0.3145778 61.750 lowD 4.500 ## 158 0.4900935 0.2718360 50.500 lowD 3.000 ## 159 0.3385256 0.1877671 61.125 lowD 4.000 ## 160 0.5352451 0.2968798 64.375 lowD 7.500 ## 161 0.5316499 0.2948857 53.750 lowD 6.500 ## 162 NA NA 172.000 highD 8.250 ## 163 0.2201110 0.2714939 113.500 highD 7.000 ## 164 0.2231786 0.2752776 47.000 highD 2.250 ## 165 0.0620611 0.0765488 54.000 highD 2.500 ## 166 0.0882327 0.1088298 140.000 highD 7.750 ## 167 0.1330887 0.1641570 87.500 highD 6.500 ## 168 0.1336091 0.1647990 63.500 highD 2.750 From these trials I am most interested in the experiments that directly compare Recommended with Recommended_P_plus and/or Late with Late_plus. Therefore I will not inspect, AM1304 (Marys Mount). We can see that the crops which were likely the most mature, did not show large yield gains, in particular: Hermitage 2019 Premer Goolhi Millmerran Let’s look at this in a quick box plot. We will only look at trials where powdery mildew set in at flowering which is approximately 60 days after planting. dat1 %&gt;% filter(days2PM &gt;= 60) %&gt;% filter(spray_management != &quot;control&quot; &amp; trial_ref != &quot;AM1304&quot;) %&gt;% group_by(trial_ref, spray_management) %&gt;% ggplot(aes(x = spray_management, y = yield_gain, fill = trial_ref)) + geom_boxplot() + scale_fill_usq() + geom_hline(yintercept = 0) We can see in these experiments five experiments there is clearly no benefit to applying a second fungicide application. For completeness let’s test this with powdery mildew infection commencing 40 - 60 days after planting, instead of greater than 60. dat1 %&gt;% filter(days2PM &lt; 60 &amp; days2PM &gt;= 40) %&gt;% filter(spray_management != &quot;control&quot;) %&gt;% group_by(trial_ref, spray_management) %&gt;% ggplot(aes(x = spray_management, y = yield_gain, fill = trial_ref)) + geom_boxplot() + scale_fill_usq() + geom_hline(yintercept = 0) We can see here all four experiments benefited, on average, from more than one spray. Let’s estimate the age of the crop based on crop maturity observations, we will use the PM_MB_means which include some observations of crop maturity. dat2 &lt;- PM_MB_means %&gt;% mutate( flower = lubridate::ymd(flowering_date) - lubridate::ymd(planting_date), pod = lubridate::ymd(pod_fill_date) - lubridate::ymd(planting_date), late_pod = lubridate::ymd(mid_late_pod_fill) - lubridate::ymd(planting_date) ) %&gt;% select(location, year, flower, pod, late_pod) %&gt;% distinct() %&gt;% arrange(desc(flower)) index1 &lt;- apply(dat2, 1 , function(X) ! all(is.na(X[c(&quot;flower&quot;, &quot;pod&quot;, &quot;late_pod&quot;)]))) dat2[index1,] ## location year flower pod late_pod ## 1 Goolhi 2013 71 days 85 days NA days ## 2 Premer 2013 62 days NA days NA days ## 3 Hermitage 2011 57 days NA days NA days ## 4 Gatton 2012 42 days NA days NA days ## 5 Kingaroy 2012 38 days NA days NA days ## 14 Millmerran 2013 NA days 68 days 75 days ## 15 Marys Mount 2013 NA days 66 days NA days ## 19 Hermitage 2016 NA days NA days 72 days ## 20 Kingaroy 2016 NA days 54 days NA days as.double(mean(dat2[index1, &quot;flower&quot;], na.rm = TRUE)) ## [1] 54 as.double(mean(dat2[index1, &quot;pod&quot;], na.rm = TRUE)) ## [1] 68.25 as.double(mean(dat2[index1, &quot;late_pod&quot;], na.rm = TRUE)) ## [1] 73.5 We can see that flowering and podding can be variable, and depend on the cumulative degree days. However, on average flowering starts 54 days after sowing, podding starts 68.25, and late podding 73.5. "]
]
